var parambox_t, parambox_t2;
var canv = document.getElementById(lil);
var ctx = canv.getContext(lll);
var right_panel = document.getElementById(lIl);
var left_panel = document.getElementById(lICl);
var top_panel = document.getElementById(liCl);
var floattag = document.getElementById(lIOl);
var _lsu = 10;
var _lsv = 10;
var lsu = 10;
var lsv = 10;
var es = new Array();
var expert_view = false;
var selgrd = licl;
var selgrd2 = licl;
var selgrd3 = liOl;
var selgrd_b = lIcl;
var selgrd2_b = lIcl;
var img_ctrl = new Image();
img_ctrl.src = llOl;
var img_alt = new Image();
img_alt.src = llcl;
var img_shift = new Image();
img_shift.src = llCl;
var img_player_hero = new Image();
img_player_hero.src = llOGl;
var img_player_red = new Image();
img_player_red.src = liOOl;
var img_player_blue = new Image();
img_player_blue.src = lIcGl;
var img_player_cs = new Image();
img_player_cs.src = lIOGl;
var img_unknown = new Image();
img_unknown.src = liCDl;
var img_weapon = new Image();
img_weapon.src = llODl;
var img_inf = new Image();
img_inf.src = llCOl;
var img_song = new Image();
img_song.src = llcGl;
var img_image = new Image();
img_image.src = licOl;
var img_trigger = new Image();
img_trigger.src = liCGl;
var img_timer = new Image();
img_timer.src = llcOl;
var img_lamp = new Image();
img_lamp.src = licGl;
var img_lamp_ambient = new Image();
img_lamp_ambient.src = llCDl;
var img_region = new Image();
img_region.src = lIcDl;
var img_region_red = new Image();
img_region_red.src = lIcOl;
var img_region_blue = new Image();
img_region_blue.src = llOOl;
var img_quickpick = new Image();
img_quickpick.src = lIODl;
var img_quickpick2 = new Image();
img_quickpick2.src = llCGl;
var img_slct = new Image();
img_slct.onload = function () {
    selgrd = ctx.createPattern(img_slct, lIOOl);
};
var img_slct2 = new Image();
img_slct2.onload = function () {
    selgrd2 = ctx.createPattern(img_slct2, lIOOl);
};
var img_slct3 = new Image();
img_slct3.onload = function () {
    selgrd3 = ctx.createPattern(img_slct3, lIOOl);
};
var img_slct_b = new Image();
img_slct_b.onload = function () {
    selgrd_b = ctx.createPattern(img_slct_b, lIOOl);
};
var img_slct2_b = new Image();
img_slct2_b.onload = function () {
    selgrd2_b = ctx.createPattern(img_slct2_b, lIOOl);
};
var img_put = new Image();
img_put.src = llcDl;
img_slct.src = liOGl;
img_slct2.src = lICDl;
img_slct3.src = licDl;
img_slct_b.src = liCOl;
img_slct2_b.src = lICGl;
var lo_x = new Array();
var lo_y = new Array();
var lo_w = new Array();
var lo_h = new Array();
lo_x[lICOl] = lo_x[liODl] = -32;
lo_y[lICOl] = lo_y[liODl] = -87;
lo_w[lICOl] = lo_w[liODl] = 65;
lo_h[lICOl] = lo_h[liODl] = 96;
lo_x[liCGIl] = -28;
lo_y[liCGIl] = -12;
lo_w[liCGIl] = 100;
lo_h[liCGIl] = 25;
lo_x[llcGll] = -126;
lo_y[llcGll] = -66;
lo_w[llcGll] = 263;
lo_h[llcGll] = 281;
lo_x[licGll] = lo_x[llcOll] = lo_x[lICGIl] = lo_x[llCOIl] = lo_x[liODll] = lo_x[licGil] = lo_x[lIOGIl] = -16;
lo_y[licGll] = lo_y[llcOll] = lo_y[lICGIl] = lo_y[llCOIl] = lo_y[liODll] = lo_y[licGil] = lo_y[lIOGIl] = -16;
lo_w[licGll] = lo_w[llcOll] = lo_w[lICGIl] = lo_w[llCOIl] = lo_w[liODll] = lo_w[licGil] = lo_w[lIOGIl] = 32;
lo_h[licGll] = lo_h[llcOll] = lo_h[lICGIl] = lo_h[llCOIl] = lo_h[liODll] = lo_h[licGil] = lo_h[lIOGIl] = 32;
lo_x[lIODll] = -12;
lo_y[lIODll] = -20;
lo_w[lIODll] = 25;
lo_h[lIODll] = 41;
var bo_x = new Array();
var bo_y = new Array();
var bo_w = new Array();
var bo_h = new Array();
bo_x[lICOl] = bo_x[liODl] = -15;
bo_y[lICOl] = bo_y[liODl] = -82;
bo_w[lICOl] = bo_w[liODl] = 30;
bo_h[lICOl] = bo_h[liODl] = 82;
bo_x[liCGIl] = -25;
bo_y[liCGIl] = -7;
bo_w[liCGIl] = 50;
bo_h[liCGIl] = 14;
bo_x[licGll] = bo_x[llcOll] = bo_x[lICGIl] = bo_x[llCOIl] = bo_x[liODll] = bo_x[licGil] = bo_x[lIOGIl] = -16;
bo_y[licGll] = bo_y[llcOll] = bo_y[lICGIl] = bo_y[llCOIl] = bo_y[liODll] = bo_y[licGil] = bo_y[lIOGIl] = -16;
bo_w[licGll] = bo_w[llcOll] = bo_w[lICGIl] = bo_w[llCOIl] = bo_w[liODll] = bo_w[licGil] = bo_w[lIOGIl] = 32;
bo_h[licGll] = bo_h[llcOll] = bo_h[lICGIl] = bo_h[llCOIl] = bo_h[liODll] = bo_h[licGil] = bo_h[lIOGIl] = 32;
bo_x[lIODll] = -15;
bo_y[lIODll] = -20;
bo_w[lIODll] = 30;
bo_h[lIODll] = 40;
bo_x[llcGll] = -21;
bo_y[llcGll] = -21;
bo_w[llcGll] = 42;
bo_h[llcGll] = 42;
bo_x[llCGll] = -99;
bo_y[llCGll] = -32;
bo_w[llCGll] = 222;
bo_h[llCGll] = 111;
bo_x[liOOll] = -110;
bo_y[liOOll] = -56;
bo_w[liOOll] = 233;
bo_h[liOOll] = 257;
bo_x[licOIl] = -30;
bo_y[licOIl] = -60;
bo_w[licOIl] = 60;
bo_h[licOIl] = 120;
bo_x[llCDil] = -30;
bo_y[llCDil] = -30;
bo_w[llCDil] = 60;
bo_h[llCDil] = 60;
bo_x[lIcDIl] = -13;
bo_y[lIcDIl] = -11;
bo_w[lIcDIl] = 45;
bo_h[lIcDIl] = 34;
bo_x[licOil] = -10;
bo_y[licOil] = 0;
bo_w[licOil] = 20;
bo_h[licOil] = 188;
bo_x[liODIl] = -49;
bo_y[liODIl] = -46;
bo_w[liODIl] = 182;
bo_h[liODIl] = 129;
lo_x[lIOGll] = -59;
lo_y[lIOGll] = -51;
lo_w[lIOGll] = 118;
lo_h[lIOGll] = 100;
lo_x[llOOll] = -32;
lo_y[llOOll] = -27;
lo_w[llOOll] = 64;
lo_h[llOOll] = 53;
lo_x[lICDll] = -250;
lo_y[lICDll] = -81;
lo_w[lICDll] = 376;
lo_h[lICDll] = 92;
lo_x[liCDIl] = 0;
lo_y[liCDIl] = 0;
lo_w[liCDIl] = 0;
lo_h[liCDIl] = 0;
lo_x[lIcDil] = -250;
lo_y[lIcDil] = -81 - (376 - 92);
lo_w[lIcDil] = 376;
lo_h[lIcDil] = 376;
lo_x[llcOil] = -57;
lo_y[llcOil] = -16;
lo_w[llcOil] = 114;
lo_h[llcOil] = 20;
lo_x[liODil] = -57;
lo_y[liODil] = -16;
lo_w[liODil] = 114;
lo_h[liODil] = 20;
lo_x[llOOil] = -40;
lo_y[llOOil] = -47;
lo_w[llOOil] = 80;
lo_h[llOOil] = 58;
lo_x[llcDll] = -40;
lo_y[llcDll] = -13;
lo_w[llcDll] = 80;
lo_h[llcDll] = 58;
lo_x[lIcGll] = -46;
lo_y[lIcGll] = -26;
lo_w[lIcGll] = 237;
lo_h[lIcGll] = 53;
lo_x[llcOIl] = -189;
lo_y[llcOIl] = -26;
lo_w[llcOIl] = 237;
lo_h[llcOIl] = 53;
lo_x[lIcGil] = -26;
lo_y[lIcGil] = -46;
lo_w[lIcGil] = 53;
lo_h[lIcGil] = 237;
lo_x[liCDll] = -26;
lo_y[liCDll] = -189;
lo_w[liCDll] = 53;
lo_h[liCDll] = 237;
lo_x[lIOOll] = -171;
lo_y[lIOOll] = -8;
lo_w[lIOOll] = 341;
lo_h[lIOOll] = 20;
lo_x[llCOll] = -171;
lo_y[llCOll] = -73;
lo_w[llCOll] = 341;
lo_h[llCOll] = 84;
lo_x[llODil] = -40;
lo_y[llODil] = -12;
lo_w[llODil] = 80;
lo_h[llODil] = 23;
lo_x[liCOil] = -40;
lo_y[liCOil] = -12;
lo_w[liCOil] = 80;
lo_h[liCOil] = 23;
lo_x[licOll] = -50;
lo_y[licOll] = -50;
lo_w[licOll] = 100;
lo_h[licOll] = 100;
lo_x[llCGIl] = -50;
lo_y[llCGIl] = -50;
lo_w[llCGIl] = 100;
lo_h[llCGIl] = 100;
lo_x[lIOGil] = -50;
lo_y[lIOGil] = -50;
lo_w[lIOGil] = 100;
lo_h[lIOGil] = 100;
function SetDefaultDimensionsOffset(v) {
    v = liOGll + v;
    lo_x[v] = -400;
    lo_y[v] = -400;
    lo_w[v] = 800;
    lo_h[v] = 800;
}
SetDefaultDimensionsOffset(liOGIl);
SetDefaultDimensionsOffset(llcDil);
SetDefaultDimensionsOffset(lICGll);
SetDefaultDimensionsOffset(lIOOil);
SetDefaultDimensionsOffset(llOGll);
SetDefaultDimensionsOffset(lICOIl);
SetDefaultDimensionsOffset(liCGll);
SetDefaultDimensionsOffset(llCGil);
SetDefaultDimensionsOffset(lICGil);
SetDefaultDimensionsOffset(liCGil);
SetDefaultDimensionsOffset(llcDIl);
SetDefaultDimensionsOffset(lIcDll);
SetDefaultDimensionsOffset(llOOIl);
SetDefaultDimensionsOffset(liCOIl);
SetDefaultDimensionsOffset(lIODil);
SetDefaultDimensionsOffset(licDll);
SetDefaultDimensionsOffset(lIcOIl);
SetDefaultDimensionsOffset(lIcGIl);
SetDefaultDimensionsOffset(lICOil);
SetDefaultDimensionsOffset(licDil);
SetDefaultDimensionsOffset(llODIl);
SetDefaultDimensionsOffset(liOOIl);
SetDefaultDimensionsOffset(lIcOil);
SetDefaultDimensionsOffset(liOOil);
SetDefaultDimensionsOffset(llCDIl);
SetDefaultDimensionsOffset(lICDil);
SetDefaultDimensionsOffset(liOGil);
SetDefaultDimensionsOffset(lICOll);
SetDefaultDimensionsOffset(licDIl);
SetDefaultDimensionsOffset(lIOOIl);
SetDefaultDimensionsOffset(lICDIl);
SetDefaultDimensionsOffset(llODll);
SetDefaultDimensionsOffset(llCOil);
SetDefaultDimensionsOffset(llOGil);
SetDefaultDimensionsOffset(lIODIl);
SetDefaultDimensionsOffset(llOGIl);
SetDefaultDimensionsOffset(liCOll);
SetDefaultDimensionsOffset(liCDil);
SetDefaultDimensionsOffset(llCDll);
SetDefaultDimensionsOffset(llcGIl);
SetDefaultDimensionsOffset(licGIl);
SetDefaultDimensionsOffset(lIcOll);
SetDefaultDimensionsOffset(llcGil);
SetDefaultDimensionsOffset(lICOiCl);
SetDefaultDimensionsOffset(liCGlCl);
SetDefaultDimensionsOffset(liOOiOl);
SetDefaultDimensionsOffset(lICGIcl);
SetDefaultDimensionsOffset(liCDlCl);
SetDefaultDimensionsOffset(liCGiCl);
SetDefaultDimensionsOffset(liCGICl);
SetDefaultDimensionsOffset(lIODiOl);
SetDefaultDimensionsOffset(liCOiCl);
SetDefaultDimensionsOffset(liCOlcl);
SetDefaultDimensionsOffset(liCOicl);
SetDefaultDimensionsOffset(liODlcl);
SetDefaultDimensionsOffset(llCDicl);
SetDefaultDimensionsOffset(llCGicl);
SetDefaultDimensionsOffset(lIOOlOl);
SetDefaultDimensionsOffset(lIcDIOl);
SetDefaultDimensionsOffset(liOGlCl);
SetDefaultDimensionsOffset(licGlcl);
SetDefaultDimensionsOffset(llcOIOl);
lo_x[llCDICl] = -50;
lo_y[llCDICl] = -50;
lo_w[llCDICl] = 100;
lo_h[llCDICl] = 100;
lo_x[llCGlOl] = -50;
lo_y[llCGlOl] = -50;
lo_w[llCGlOl] = 100;
lo_h[llCGlOl] = 100;
lo_x[licDIcl] = -50;
lo_y[licDIcl] = -50;
lo_w[licDIcl] = 100;
lo_h[licDIcl] = 100;
function ThinkOfBBoxClass(this_class, es_i) {
    if (this_class == llcGll)
        if (bo_w[this_class + liODicl + es_i.pm.model] != null) {
            this_class = this_class + liODicl + es_i.pm.model;
        }
    return this_class;
}
function ThinkOfOffsetClass(this_class, es_i) {
    if (this_class == lIOGIl)
        if (lo_w[this_class + liODicl + es_i.pm.model] != null) {
            this_class = this_class + liODicl + es_i.pm.model;
        }
    return this_class;
}
function img_decide(e) {
    switch (e._class) {
        case liODl:
        case lICOl:
            switch (e.pm.char) {
                case 1:
                    return img_player_hero;
                case 73:
                    return img_player_blue;
                case 74:
                    return img_player_red;
                default:
                    return img_player_cs;
            }
        case liCGIl:
            if (img_guns[e.pm.model] != undefined) return img_guns[e.pm.model];
            return img_weapon;
        case lIODll:
            if (img_barrels[e.pm.model] != undefined) return img_barrels[e.pm.model];
            return img_unknown;
        case llcGll:
            if (img_vehicles[e.pm.model] != undefined) return img_vehicles[e.pm.model];
            return img_unknown;
        case lICGIl:
            return img_inf;
        case llcOll:
            return img_song;
        case licGll:
            return img_image;
        case llCOIl:
            return img_trigger;
        case liODll:
            return img_timer;
        case licGil: {
            if (e.pm.flare == llOOlcl || e.pm.flare == 1) return img_lamp;
            return img_lamp_ambient;
        }
        case lIOGIl: {
            if (img_decors[e.pm.model] != undefined) return img_decors[e.pm.model];
        }
    }
    return img_unknown;
}
var note_place = document.getElementById(llCGIOl);
var Notes = new Array();
var Notes_first_invis = 0;
var Notes_first_exist = 0;
var Notes_total = 0;
var note_good = llOOicl;
var note_bad = licOlOl;
var note_neutral = licDiOl;
var note_passive = llCOicl;
function endNote(noteid, gotodis, autoti) {
    if (gotodis) {
        if (Notes[noteid].canterminate) {
            Notes[noteid].canterminate = false;
            if (autoti) Notes[noteid].physical.className = liCOiOl;
            else Notes[noteid].physical.className = lICOlcl;
            Notes[noteid].physical.style.webkitAnimationName = llcDiOl;
            Notes[noteid].timeout = setTimeout(llcDiCl + noteid + licOiCl, 800);
        }
    } else {
        note_place.removeChild(Notes[noteid].physical);
        Notes[noteid].physical = null;
    }
}
function termNote(noteid) {
    if (Notes[noteid].canterminate) endNote(noteid, true, false);
}
function NewNote(_text, _color) {
    Notes[Notes_total] = { physical: document.createElement(lIcOICl), timeout: setTimeout(llcDiCl + Notes_total + lIcGlOl, _color == note_passive ? 5000 : 2000 + _text.length * 50), canterminate: true };
    note_place.appendChild(Notes[Notes_total].physical);
    Notes[Notes_total].physical.setAttribute(llCOlcl, llcDICl);
    Notes[Notes_total].physical.setAttribute(liOOICl, lIOGlCl + _color);
    Notes[Notes_total].physical.setAttribute(licGicl, llCOlOl + Notes_total);
    Notes[Notes_total].physical.setAttribute(lIcDICl, lIOGIcl + Notes_total + liCDlOl);
    Notes[Notes_total].physical.innerHTML = _text;
    Notes_total++;
}
function httpGet(theUrl, posts) {
    var xmlHttp = null;
    xmlHttp = new XMLHttpRequest();
    xmlHttp.open(licDlcl, theUrl, false);
    try {
        xmlHttp.setRequestHeader(liCOIOl, llcGlCl);
        xmlHttp.send(posts);
    } catch (e) {
        return llOOIOl;
    }
    return xmlHttp.responseText;
}
function getQueryParams(qs) {
    qs = qs.split(llOGIcl).join(lIcGiOl);
    var params = {},
        tokens,
        re = /[?&]?([^=]+)=([^&]*)/g;
    while ((tokens = re.exec(qs))) {
        params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
    }
    return params;
}
var request_a = getQueryParams(document.location.search).a;
if (request_a === undefined) request_a = liOGIcl;
function ServerRequest(my_request, operation, callback = null) {
    var url = llOOiOl + request_a;
    var t = httpGet(url, my_request);
    if (t == llOOIOl) {
        if (operation == lICGiCl) {
            NewNote(llODlOl, note_bad);
        } else if (operation == liCDiCl) {
            NewNote(lIcOiCl, note_bad);
        }
    } else {
        try {
            eval.call(window, t);
            if (operation == lICGiCl || operation == liCDiCl) {
                changes_made = false;
                if (operation == liCDiCl) {
                    need_redraw = true;
                    need_GUIParams_update = true;
                    ClearUndos();
                }
            }
        } catch (e) {
            NewNote(lIOGlcl, note_bad);
            debugger;
        }
    }
    if (callback != null) callback();
}
var param_type = new Array();
param_type[0] = [llCGiOl, lIOOIOl, licOIcl, lIODlOl, liOOIOl];
param_type[1] = [llcOICl, lICDICl, licOlCl, lIcOIcl, liOOIOl];
param_type[2] = [licOicl, lICDICl, llODlCl, lIcDicl, liOOIOl];
param_type[3] = [licDICl, lIcOiOl, llODiCl, liOGlOl, liOOIOl];
param_type[4] = [lIcOlcl, lIcOiOl, lIcDlOl, lICDiCl, liOOIOl];
param_type[5] = [licDicl, lIOGICl, liOOicl, llcOiCl, liOOIOl];
param_type[6] = [llODiOl, lIOGICl, llOOICl, llOGicl, liOOIOl];
param_type[7] = [lIcGlcl, lIcGlcl, llCDiOl, lIOOicl, liOOIOl];
param_type[8] = [liOOiCl, liOOiCl, lIOGicl, llcOIcl, liOOIOl];
param_type[9] = [llOGlCl, llOGlCl, lICGlCl, lICOiOl, liOOIOl];
param_type[10] = [lIODiCl, llCGICl, lIcDIcl, licGiCl, liOOIOl];
param_type[11] = [lICOIcl, lICOIcl, lICGlOl, lIOGlOl, liOOIOl];
param_type[12] = [lIOOICl, lIcGIOl, llcGiOl, llOGlcl, liOOIOl];
param_type[13] = [liOGiOl, lIcOiOl, lICGiOl, lIODlcl, licGil];
param_type[14] = [llcOiOl, lIOOlCl, llcGiCl, liCOlCl, licGil];
param_type[15] = [liCGlOl, llCDlcl, liODlOl, liCGIcl, liCGIl];
param_type[16] = [lIODIOl, lIcDiCl, lICOlCl, lIcOIOl, liCGIl];
param_type[17] = [llCDlCl, lICDlOl, llODIOl, lIcOlCl, liCGIl];
param_type[18] = [llCGlCl, llODicl, llcDlcl, llOOIcl, liOOIOl];
param_type[19] = [liOGicl, llODicl, llcDicl, lICDIcl, liOOIOl];
param_type[20] = [liODlCl, liCGlcl, liCGIOl, lIOGiOl, llOGiCl];
param_type[21] = [liOOIcl, llOGICl, llcOlOl, licDlOl, licOICl];
param_type[22] = [lIODICl, lIcGIOl, liCDICl, llCDiCl, liCDicl];
param_type[23] = [llODIcl, licOlcl, llcGIOl, licOiOl, liCDicl];
param_type[24] = [licDICl, lIcOiOl, licGlOl, liCDIcl, liOGICl];
param_type[25] = [lIcOlcl, lIcOiOl, llCOIcl, llCGIcl, liOGICl];
param_type[26] = [llOOiCl, llOGICl, lIcOicl, liOGlcl, liOGICl];
param_type[27] = [liOOIcl, lICGIOl, liOOlcl, lIOGiCl, liOGICl];
param_type[28] = [llCGiCl, llOGICl, lIcDlCl, llcDlOl, licDlCl];
param_type[29] = [llCDIOl, lIOOlCl, llOOlCl, liOGIOl, licDlCl];
param_type[30] = [lIcGiCl, lIOOlCl, lIODIcl, liOGiCl, liODll];
param_type[31] = [lIcGIcl, lIcGIcl, llcOicl, lICGicl, liODll];
param_type[32] = [lIODlCl, lIcGIOl, llcGIcl, liCGiOl, liODll];
param_type[33] = [liODICl, llOGICl, liCDiOl, liODiCl, liODll];
param_type[34] = [liCGlOl, lICDiOl, liODiOl, llODlcl, lIOGIl];
param_type[35] = [lIcGicl, llCOiOl, liODIcl, licDIOl, lICGIl];
param_type[36] = [llcDIOl, lICDIOl, licOIOl, lICGICl, lICGIl];
param_type[37] = [liCGlOl, lICDlcl, liODiOl, liCOIcl, llcGll];
param_type[38] = [llOOlOl, llOGICl, liCDIOl, lICDlCl, llcGll];
param_type[39] = [liCGlOl, licGIOl, liODiOl, llcGlOl, lIODll];
param_type[40] = [lIcGiCl, lIOOlCl, lICOIOl, llCDlOl, llCOIl];
param_type[41] = [lIcGIcl, lIcGIcl, llcOicl, lICGicl, llCOIl];
param_type[42] = [liODlCl, lIOOIcl, liCGIOl, lIOGiOl, lIOOlcl];
param_type[43] = [llOGlOl, lIOOIOl, lICOicl, llCOIOl, llOGiCl];
param_type[44] = [llcOlCl, lIOOIOl, llcDlCl, lIcDiOl, llcOll];
param_type[45] = [liCOICl, llOGICl, llcGicl, llcGicl, llcOll];
param_type[46] = [licGICl, llCDIcl, llCOiCl, liODIOl, licDlCl];
param_type[47] = [licGlCl, llCDIcl, llCOiCl, llOGIOl, llOGiCl];
param_type[48] = [licGICl, llCDIcl, llCOiCl, llcOlcl, lIOGIl];
param_type[49] = [licGICl, llCDIcl, llCOiCl, liCDlcl, liOGICl];
param_type[50] = [licGICl, llCDIcl, llCOiCl, licGIcl, liCDicl];
param_type[51] = [lIcOlOl, lIOOlCl, liCOlOl, lIOGIOl, licOICl];
param_type[52] = [lICGlcl, lIOOlCl, lICOICl, lICOICl, llcOll];
param_type[53] = [llcGlcl, lIcGIOl, llODICl, lICOlOl, llcOll];
param_type[54] = [licGicl, llOGICl, lIcGlCl, liOOlOl, licGll];
param_type[55] = [llCGlcl, llcDIcl, llOGiOl, liOOlCl, licGll];
param_type[56] = [lIcGICl, llcDIcl, lICDicl, lIODicl, licGll];
param_type[57] = [licGICGl, lIcOiOl, llCDIOOl, lIOOicGl, liOOIOl];
param_type[58] = [liOGlOOl, lIcOiOl, llcOIOGl, lIOOicGl, liOOIOl];
param_type[59] = [liOOiODl, lIODlcGl, llOGlODl, licDIOOl, liOOIOl];
param_type[60] = [llcOlCGl, lIOOlCl, liCOicDl, licOlCOl, liOOIOl];
for (var i = 1; i <= 10; i++) {
    param_type[param_type.length] = [licDicDl + i + llCOlOGl, llODicGl, llCGIcDl + i + liOOICDl, llcDlcDl + i + liOGIcl, llCOIl];
    param_type[param_type.length] = [licDicDl + i + licDlcGl, lICDIOl, llCGlCOl, lICDIcOl + i + liOGIcl, llCOIl];
    param_type[param_type.length] = [licDicDl + i + liODICOl, lICDIOl, llcOICOl, lICGlOOl + i + liOGIcl, llCOIl];
}
var CACHED_BGS = {};
var CACHED_DECORS = {};
var CUSTOM_IMAGES_APPROVED = {};
var CACHED_SKY = {};
var special_values_table = new Array();
special_values_table[lIcGlcl] = new Array();
special_values_table[lIcGlcl][0] = liODicDl;
special_values_table[lIcGlcl][1] = liODiCDl;
special_values_table[lIcGlcl][2] = liOGICOl;
special_values_table[lIcGlcl][3] = llCOlcGl;
special_values_table[lIcGlcl][4] = licDicGl;
special_values_table[lIcGlcl][5] = lICOIcOl;
special_values_table[lIcGlcl][6] = lIcDlCOl;
special_values_table[lIcGlcl][7] = liCDiCOl;
special_values_table[lIcGlcl][8] = liCDicDl;
special_values_table[lIcGlcl][9] = lIcGIOGl;
special_values_table[lIcGlcl][10] = licDlODl;
special_values_table[lIcGlcl][11] = llCOIOOl;
special_values_table[lIcGlcl][12] = lIOGIcGl;
special_values_table[lIcGlcl][13] = lICOIOOl;
special_values_table[lIcGlcl][14] = licDlCGl;
special_values_table[lIcGlcl][15] = lIODicGl;
special_values_table[lIcGlcl][16] = lICDiOGl;
special_values_table[lIcDiCl] = new Array();
special_values_table[lIcDiCl][-1] = lIODIOGl;
for (var i = 0; i < special_values_table[lIcGlcl].length; i++) special_values_table[lIcDiCl][i] = special_values_table[lIcGlcl][i];
special_values_table[liOOiCl] = new Array();
special_values_table[liOOiCl][-1] = llCDlCOl;
special_values_table[liOOiCl][1] = llCOlcOl;
special_values_table[llOGlCl] = new Array();
special_values_table[llOGlCl][-1] = liODICGl;
special_values_table[llOGlCl][1] = llOOiCDl;
special_values_table[llOGlCl][2] = liCOlCGl;
special_values_table[llOGlCl][3] = liCDiOOl;
special_values_table[llOGlCl][4] = licGlOGl;
special_values_table[llOGlCl][5] = lIODlcOl;
special_values_table[llOGlCl][6] = lICDlCOl;
special_values_table[llOGlCl][7] = llCGICOl;
special_values_table[llOGlCl][8] = lIcDiOOl;
special_values_table[llOGlCl][9] = llOOiCGl;
special_values_table[llOGlCl][11] = llOOlcDl;
special_values_table[llOGlCl][12] = llCGIcGl;
special_values_table[llOGlCl][13] = llOGiCGl;
special_values_table[llOGlCl][14] = llOGlCDl;
special_values_table[llOGlCl][15] = llCOiOGl;
special_values_table[llOGlCl][16] = lICGlCGl;
special_values_table[llOGlCl][17] = liODlOGl;
special_values_table[llOGlCl][18] = lICDiCOl;
special_values_table[llOGlCl][19] = lIOOlOOl;
special_values_table[llOGlCl][21] = liOGicGl;
special_values_table[llOGlCl][22] = lIcOiCDl;
special_values_table[llOGlCl][23] = llODlOGl;
special_values_table[llOGlCl][24] = liCOIcOl;
special_values_table[llOGlCl][25] = lICGlCDl;
special_values_table[llOGlCl][26] = licDIcGl;
special_values_table[llOGlCl][27] = llcOIcDl;
special_values_table[llOGlCl][28] = licGiOGl;
special_values_table[llOGlCl][29] = llcGICOl;
special_values_table[llOGlCl][31] = liODIODl;
special_values_table[llOGlCl][32] = liCOiOOl;
special_values_table[llOGlCl][33] = lIODICOl;
special_values_table[llOGlCl][34] = liODiODl;
special_values_table[llOGlCl][35] = liODicGl;
special_values_table[llOGlCl][36] = lIcGIcDl;
special_values_table[llOGlCl][37] = llOOlOGl;
special_values_table[llOGlCl][40] = llcDiCGl;
special_values_table[llOGlCl][41] = liOGicOl;
special_values_table[llOGlCl][42] = liCGIcDl;
special_values_table[llOGlCl][43] = liOGlcDl;
special_values_table[llOGlCl][44] = lIOOlCOl;
special_values_table[llOGlCl][45] = lIOOlCGl;
special_values_table[llOGlCl][46] = lIcGicOl;
special_values_table[llOGlCl][47] = llCGiODl;
special_values_table[llOGlCl][48] = liCGicDl;
special_values_table[llOGlCl][49] = licDiODl;
special_values_table[llOGlCl][61] = liCGIOGl;
special_values_table[llOGlCl][69] = llOGiCDl;
special_values_table[llOGlCl][70] = lIOGICDl;
special_values_table[llOGlCl][71] = llcDICGl;
special_values_table[llOGlCl][72] = licGlODl;
special_values_table[llOGlCl][73] = llcOiOGl;
special_values_table[llOGlCl][74] = liCGiOGl;
special_values_table[llOGlCl][75] = licGIcDl;
special_values_table[llOGlCl][76] = licOiOOl;
special_values_table[llOGlCl][77] = lICDICDl;
special_values_table[llOGlCl][78] = licGICDl;
special_values_table[llOGlCl][79] = llcGlcDl;
special_values_table[llOGlCl][80] = lIOOIODl;
special_values_table[llOGlCl][81] = lIcOIODl;
special_values_table[llOGlCl][82] = liCGIcGl;
special_values_table[llOGlCl][83] = licGlOOl;
special_values_table[llOGlCl][84] = llCDiOOl;
special_values_table[llOGlCl][85] = llCDlCGl;
special_values_table[llOGlCl][86] = lIOOlOGl;
special_values_table[llOGlCl][87] = liOOICGl;
special_values_table[llOGlCl][88] = lICGicGl;
special_values_table[llOGlCl][89] = liCDlOGl;
special_values_table[llOGlCl][90] = llOGIcOl;
special_values_table[llOGlCl][130] = liOGIcDl;
special_values_table[llOGlCl][131] = liCOICOl;
special_values_table[llOGlCl][132] = lIOGiCGl;
special_values_table[llOGlCl][133] = liCDicGl;
special_values_table[llOGlCl][134] = lICOiCGl;
special_values_table[llOGlCl][135] = llCDICGl;
special_values_table[llOGlCl][136] = llCGIOGl;
special_values_table[llOGlCl][137] = licOiODl;
special_values_table[llOGlCl][138] = licOIcOl;
special_values_table[llOGlCl][139] = llODIcGl;
special_values_table[llOGlCl][140] = lIOOIcOl;
special_values_table[llOGlCl][141] = lICOlcGl;
special_values_table[llOGlCl][142] = lIcDlCDl;
special_values_table[llOGlCl][143] = lIcDicOl;
special_values_table[llOGlCl][144] = liODlcGl;
special_values_table[llOGlCl][145] = licOicGl;
special_values_table[llOGlCl][146] = llcOlCOl;
special_values_table[llOGlCl][147] = lIcDlOGl;
special_values_table[llOGlCl][148] = lICOIcGl;
special_values_table[llOGlCl][149] = lIOGlcGl;
special_values_table[llOGlCl][150] = liCDlOOl;
var img_chars_full = new Array();
for (i in special_values_table[llOGlCl]) {
    img_chars_full[i] = new Image();
    var leading = i + liOGIcl;
    while (leading.length < 4) leading = "0" + leading;
    img_chars_full[i].src = lICOIOGl + leading + llCGICDl;
    special_values_table[llOGlCl][i] = lIcDIcDl + img_chars_full[i].src + llcGICGl + special_values_table[llOGlCl][i];
}
special_values_table[llCGICl] = new Array();
special_values_table[llCGICl][-2] = lICGiOOl;
special_values_table[llCGICl][-1] = llODICGl;
special_values_table[llCGICl][lIOGlODl] = llcGll;
special_values_table[llCOICDl] = new Array();
special_values_table[llCOICDl][-1] = lIODIODl;
special_values_table[llCOICDl][lIOGlODl] = llcOll;
special_values_table[llcGll] = new Array();
special_values_table[llcGll][lIOGlODl] = llcGll;
special_values_table[llCOIl] = new Array();
special_values_table[llCOIl][lIOGlODl] = llCOIl;
special_values_table[liODll] = new Array();
special_values_table[liODll][lIOGlODl] = liODll;
special_values_table[liOGICl] = new Array();
special_values_table[liOGICl][lIOGlODl] = liOGICl;
special_values_table[licDlCl] = new Array();
special_values_table[licDlCl][lIOGlODl] = licDlCl;
special_values_table[llCDIcl] = new Array();
special_values_table[llCDIcl][-1] = llODICGl;
special_values_table[llCDIcl][lIOGlODl] = licDlCl;
special_values_table[lIODll] = new Array();
special_values_table[lIODll][lIOGlODl] = lIODll;
special_values_table[lIOGIl] = new Array();
special_values_table[lIOGIl][lIOGlODl] = lIOGIl;
special_values_table[licGil] = new Array();
special_values_table[licGil][lIOGlODl] = licGil;
special_values_table[liCGIl] = new Array();
special_values_table[liCGIl][lIOGlODl] = liCGIl;
special_values_table[liCDicl] = new Array();
special_values_table[liCDicl][lIOGlODl] = liCDicl;
special_values_table[liCGiODl] = new Array();
special_values_table[liCGiODl][lIOGlODl] = liODl;
special_values_table[liCGiODl][lIcGICDl] = lICOl;
special_values_table[lICOIcl] = new Array();
special_values_table[lICOIcl][0] = lIcOlODl;
special_values_table[lICOIcl][1] = lIcOlcOl;
special_values_table[lICOIcl][2] = lICDIcGl;
special_values_table[lICOIcl][3] = liODIcGl;
special_values_table[lICOIcl][4] = llCDlOGl;
special_values_table[lIOOlCl] = new Array();
special_values_table[lIOOlCl][llOOlcl] = lIODiOGl;
special_values_table[lIOOlCl][lICDIODl] = lIcDICGl;
special_values_table[lICGIOl] = new Array();
special_values_table[lICGIOl][0] = lIcOicGl;
special_values_table[lICGIOl][llOOlCOl] = lIcOicOl;
special_values_table[lICGIOl][lIcDICDl] = llCGIcOl;
special_values_table[lICDiOl] = new Array();
ServerRequest(liODlCGl + lICDiOl + llcGlcOl + lICDicGl, llODIcOl);
var img_decors = new Array();
for (i in special_values_table[lICDiOl]) {
    img_decors[i] = new Image();
    img_decors[i].src = lICOlcDl + i + llCDiODl;
}
special_values_table[llCDlcl] = new Array();
special_values_table[llCDlcl][lICGIODl] = llODlCDl;
special_values_table[llCDlcl][lIcGiCGl] = llcOlcOl;
special_values_table[llCDlcl][liOOiCGl] = lIOOlcOl;
special_values_table[llCDlcl][lIOOicOl] = llCDiCGl;
special_values_table[llCDlcl][llCDIODl] = llcDlODl;
special_values_table[llCDlcl][liCGICOl] = llCOlCOl;
special_values_table[llCDlcl][lIOGlCDl] = lIOGICGl;
special_values_table[llCDlcl][llOGiODl] = lIcDIOGl;
special_values_table[llCDlcl][lICDlcDl] = llODIcDl;
special_values_table[llCDlcl][lIODIOOl] = lIcOIcOl;
special_values_table[llCDlcl][llODlOOl] = liCDIcDl;
special_values_table[llCDlcl][llcGiOGl] = liODiOGl;
special_values_table[llCDlcl][llOGiOGl] = lICDiOOl;
special_values_table[llCDlcl][lIcGlcGl] = lICOICDl;
special_values_table[llCDlcl][licDiCDl] = llCOicGl;
special_values_table[llCDlcl][lIcDICOl] = liOOlCGl;
special_values_table[llCDlcl][llcOiODl] = llCGicOl;
special_values_table[llCDlcl][llCOiOOl] = licOiCOl;
special_values_table[llCDlcl][liCOIcDl] = liOOiCDl;
special_values_table[llCDlcl][lIcOICDl] = llcGiCOl;
special_values_table[llCDlcl][liODlCOl] = llODlcOl;
special_values_table[llCDlcl][liOGlCDl] = liCOIcGl;
special_values_table[llCDlcl][licDiOGl] = liCOIOOl;
special_values_table[llCDlcl][liOGlOGl] = lICGIcOl;
special_values_table[llCDlcl][licDICOl] = lICOICOl;
special_values_table[llCDlcl][llCGlcGl] = llcGIcDl;
special_values_table[llCDlcl][lIcOlcGl] = liCGICDl;
special_values_table[llCDlcl][liCDlcDl] = lICOicGl;
special_values_table[llCDlcl][lIOGIcDl] = licDiCOl;
special_values_table[llCDlcl][licOICDl] = lIOOiOOl;
special_values_table[llCDlcl][llOGICDl] = liCDiODl;
special_values_table[llCDlcl][llcOiCDl] = lIcDiCGl;
special_values_table[llCDlcl][llODlCOl] = lIODIcOl;
special_values_table[llCDlcl][llcOlODl] = licOICGl;
special_values_table[llCDlcl][liCOlCDl] = liODICDl;
special_values_table[llCDlcl][lIcDIcGl] = licDIcDl;
special_values_table[llCDlcl][lIcOiCGl] = lIcDlOOl;
special_values_table[llCDlcl][liCGiCOl] = llOOiODl;
special_values_table[llCDlcl][llODlODl] = lICDICGl;
special_values_table[llCDlcl][licGlcGl] = licGIcGl;
special_values_table[llCDlcl][licOiCDl] = liCDICOl;
special_values_table[llCDlcl][liOOiOGl] = licOicOl;
special_values_table[llCDlcl][liCDICDl] = lIcDicDl;
special_values_table[llCDlcl][licOlCDl] = llCGlODl;
special_values_table[llCDlcl][llcDlOOl] = lIODicOl;
special_values_table[llCDlcl][llOGicGl] = llCGIODl;
special_values_table[llCDlcl][llCDICDl] = lIODICGl;
special_values_table[llCDlcl][llcDIcGl] = llCOIcOl;
special_values_table[llCDlcl][lIOGICOl] = liCGlcDl;
special_values_table[llCDlcl][lIcGiODl] = llOOIcGl;
special_values_table[llCDlcl][llCDicGl] = lIOOIOOl;
special_values_table[llCDlcl][llcOlcGl] = lICOIcDl;
special_values_table[llCDlcl][lIcGiOOl] = lIcGiCDl;
special_values_table[llCDlcl][liCOicGl] = llOGlCGl;
special_values_table[llCDlcl][liCGiCGl] = liCDlODl;
special_values_table[llCDlcl][llODIOGl] = licOlcOl;
special_values_table[llCDlcl][llCDlcDl] = lIOGlCGl;
special_values_table[llCDlcl][lICDIOGl] = liCOlcOl;
special_values_table[llCDlcl][llcOIOOl] = licDiOOl;
special_values_table[llCDlcl][llODiOOl] = llcDICDl;
special_values_table[llCDlcl][llcGICDl] = llOGlcDl;
special_values_table[llCDlcl][lIOGicDl] = liOGiCDl;
special_values_table[llCDlcl][lICOiCDl] = llCDIcDl;
special_values_table[llCDlcl][lIOGIODl] = llCDlODl;
special_values_table[llCDlcl][llCGicDl] = lIOGiOGl;
special_values_table[llCDlcl][llcDlCOl] = llcDicGl;
special_values_table[llCDlcl][llcGiCGl] = llCOicOl;
special_values_table[llCDlcl][lIcOICGl] = lIODiODl;
special_values_table[llCDlcl][licDicOl] = licOlcDl;
special_values_table[llCDlcl][llOGIOGl] = liOGiOGl;
special_values_table[llCDlcl][llCGIOOl] = llcDiCDl;
special_values_table[llCDlcl][liOOlODl] = lICGlcOl;
special_values_table[llCDlcl][liODlcDl] = llOOlcOl;
special_values_table[llCDlcl][lIOGicOl] = lICGiOGl;
special_values_table[llCDlcl][lICOiOOl] = liOGIOOl;
special_values_table[llCDlcl][lIcDiODl] = lIOGiODl;
special_values_table[llCDlcl][liODlcOl] = llODlCGl;
special_values_table[llCDlcl][lIOGicGl] = licOlOGl;
special_values_table[llCDlcl][liCDlCDl] = lICGIOOl;
special_values_table[llCDlcl][llCOlCGl] = lIcOlCOl;
special_values_table[llCDlcl][lIODlODl] = lIOOiCOl;
special_values_table[llCDlcl][llCGICGl] = llODiCGl;
special_values_table[llCDlcl][lIOOlcDl] = liCDlCOl;
special_values_table[llCDlcl][llcGlCGl] = llOGiCOl;
special_values_table[llCDlcl][liOGlODl] = liCGiOOl;
special_values_table[llCDlcl][llOOICGl] = lICDlcGl;
special_values_table[llCDlcl][liOOIcGl] = licDlOOl;
special_values_table[llCDlcl][lIcDlcGl] = licDlcOl;
special_values_table[llCDlcl][llCOiCDl] = liCGlCDl;
special_values_table[llCDlcl][lICDlODl] = liCOIOGl;
special_values_table[llCDlcl][llCOiCOl] = lIOGiCOl;
special_values_table[llCDlcl][llCOlODl] = llcOICDl;
special_values_table[llCDlcl][llcOIcGl] = llCOicDl;
special_values_table[llCDlcl][llOGlOGl] = llcGlcGl;
special_values_table[llCDlcl][liODiCGl] = llcOIcOl;
special_values_table[llCDlcl][licOIOGl] = lICGIOGl;
special_values_table[llCDlcl][llcGIcOl] = lIODiCGl;
special_values_table[llCDlcl][lIcOlOOl] = llOGlcGl;
special_values_table[llCDlcl][llcOIODl] = liODIcOl;
var img_guns = new Array();
for (i in special_values_table[llCDlcl]) {
    special_values_table[llCDlcl][i] = llCGiOGl + i + lIcOiODl + special_values_table[llCDlcl][i] + liOGicDl;
    img_guns[i] = new Image();
    img_guns[i].src = lICOlcDl + i + llCOlcDl;
}
special_values_table[licGIOl] = new Array();
special_values_table[licGIOl][lICGlcDl] = licGiCGl;
special_values_table[licGIOl][licDlCOl] = lIcDIODl;
special_values_table[licGIOl][llcOicOl] = lICDiCDl;
var img_barrels = new Array();
for (i in special_values_table[licGIOl]) {
    special_values_table[licGIOl][i] = llCGiOGl + i + llcGIODl + special_values_table[licGIOl][i] + lIOOlODl + special_values_table[licGIOl][i];
    img_barrels[i] = new Image();
    img_barrels[i].src = lICOlcDl + i + lIcGlOGl;
}
special_values_table[lICDlcl] = new Array();
special_values_table[lICDlcl][llCDIcGl] = llOGICOl;
special_values_table[lICDlcl][llOGlCOl] = lICGiODl;
special_values_table[lICDlcl][liCDiCGl] = lIOGiCDl;
special_values_table[lICDlcl][liCDIcGl] = llOOIOGl;
special_values_table[lICDlcl][lIOOiCDl] = lICGICDl;
special_values_table[lICDlcl][llOOICOl] = llCOIcGl;
special_values_table[lICDlcl][liCOICGl] = lIODlCGl;
var img_vehicles = new Array();
for (i in special_values_table[lICDlcl]) {
    special_values_table[lICDlcl][i] = llCGiOGl + i + lIOGIOGl + special_values_table[lICDlcl][i] + lIOOlODl + special_values_table[lICDlcl][i];
    img_vehicles[i] = new Image();
    img_vehicles[i].src = lICOlcDl + i + lIOGiOOl;
}
special_values_table[lIOOIcl] = new Array();
special_values_table[lIOOIcl][-1] = liOOicDl;
special_values_table[lIOOIcl][0] = liOOIOOl;
special_values_table[lIOOIcl][1] = liODIcDl;
special_values_table[lIOOIcl][2] = llcGiCDl;
special_values_table[lIOOIcl][3] = llCDICOl;
special_values_table[lIOOIcl][4] = licGIOGl;
special_values_table[lIOOIcl][5] = llcGiOOl;
special_values_table[lIOOIcl][6] = lICGiCGl;
special_values_table[lIOOIcl][7] = llcOiCGl;
special_values_table[lIOOIcl][8] = lICDiCGl;
special_values_table[lIOOIcl][9] = llODicDl;
special_values_table[lIOOIcl][10] = liCDlcOl;
special_values_table[lIOOIcl][11] = lICGlcGl;
special_values_table[lIOOIcl][12] = licDlOGl;
special_values_table[lIOOIcl][13] = lIcGIcOl;
special_values_table[lIOOIcl][14] = lICGicOl;
special_values_table[lIOOIcl][15] = licGIODl;
special_values_table[lIOOIcl][16] = lIcGlCDl;
special_values_table[lIOOIcl][17] = licOlODl;
special_values_table[lIOOIcl][18] = lIcDiCDl;
special_values_table[lIOOIcl][19] = lIOOiODl;
special_values_table[lIOOIcl][20] = licGlCGl;
for (i in special_values_table[lIOOIcl]) {
    special_values_table[lIOOIcl][i] = llCGiOGl + i + llOGicOl + special_values_table[lIOOIcl][i] + lIOOlODl + special_values_table[lIOOIcl][i];
}
special_values_table[lIODlcGl] = [];
special_values_table[lIODlcGl][0] = lIcDICGl;
special_values_table[lIODlcGl][1] = lIODiOGl;
special_values_table[lIODlcGl][2] = lIOGlcOl;
special_values_table[liCGlcl] = new Array();
for (var i = -1; i <= 16; i++) {
    let img = new Image();
    img.src = lICGlOGl + i + llcGiODl;
    img.loaded = false;
    img.onload = function () {
        img.loaded = true;
    };
    CACHED_BGS[i] = img;
}
ServerRequest(liODlCGl + liCGlcl + llcGlcOl + lICDicGl, llODIcOl);
for (var i = 1; i <= 18; i++) {
    let img = new Image();
    img.src = lICGIcGl + i + llcGiODl;
    img.loaded = false;
    img.onload = function () {
        img.loaded = true;
    };
    CACHED_SKY[i] = img;
}
special_values_table[lICDlOl] = new Array();
special_values_table[lICDlOl][0] = llcDIcOl;
special_values_table[lICDlOl][1] = lICOicOl;
special_values_table[lICDlOl][2] = llOGICGl;
special_values_table[lICDlOl][3] = lIOOICGl;
special_values_table[lIcGIcl] = new Array();
special_values_table[lIcGIcl][-1] = llcGIOOl;
special_values_table[lIcGIcl][1] = llOOiOOl;
special_values_table[lIcGIcl][llOOlCOl] = llOOICDl;
special_values_table[licOlcl] = new Array();
special_values_table[licOlcl][0] = liCDIcOl;
special_values_table[licOlcl][1] = liCDicOl;
special_values_table[licOlcl][2] = licGicOl;
special_values_table[licOlcl][3] = liOOlOGl;
special_values_table[licOlcl][4] = lICGlCl;
special_values_table[licOlcl][5] = licOlCGl;
special_values_table[licOlcl][6] = liCDiOGl;
special_values_table[licOlcl][7] = llcGlCDl;
special_values_table[licOlcl][8] = liOGICDl;
special_values_table[licOlcl][9] = liCOlCOl;
special_values_table[licOlcl][10] = llODiCOl;
special_values_table[licOlcl][11] = llOGicDl;
special_values_table[licOlcl][12] = liODlCDl;
special_values_table[licOlcl][13] = licOICOl;
special_values_table[licOlcl][14] = lIOOlcGl;
special_values_table[licOlcl][15] = licGicGl;
special_values_table[lIcGIOl] = new Array();
special_values_table[lIcGIOl][-1] = llcOlOGl;
special_values_table[lIcGIOl][lIOGlODl] = llCOIl;
var mark_pairs = new Array();
var rainbow = [
    llCOiODl,
    liCGlCOl,
    llCGiCDl,
    licDlcDl,
    lIcOlOGl,
    lIcGICOl,
    llCOlOOl,
    liCDiCDl,
    liOOiCOl,
    lICGicDl,
    licDiCGl,
    llcDiODl,
    liODlODl,
    llcDIcDl,
    llcDICOl,
    lICGlODl,
    llOGIcDl,
    llOGlOOl,
    lIOOICOl,
    licOIODl,
    lIOGIcOl,
    lIOGIOOl,
    lIOOiOGl,
    licOlcGl,
    lICGICOl,
    lIODiCDl,
    liCOicOl,
];
var next_color = 0;
var tr_type_tags = new Array();
special_values_table[llODicGl] = new Array();
var last_trigger_type_id;
function addTrigger(trigger_type_id, description, paramA, paramB) {
    last_trigger_type_id = trigger_type_id;
    var parts = description.split(liCOlOOl);
    if (parts.length > 1) {
        if (tr_type_tags[parts[0]] == undefined) {
            if (rainbow[next_color] == undefined) console.log(liCDIOOl + next_color);
            tr_type_tags[parts[0]] = rainbow[next_color];
            next_color++;
        }
        parts[0] = lIcGIODl + tr_type_tags[parts[0]] + liOGiCOl + parts[0] + lICDIcDl;
        description = parts.join(lIOGlOOl);
    }
    special_values_table[llODicGl][trigger_type_id] = description;
    mark_pairs[lIcGlcDl + trigger_type_id] = paramA;
    mark_pairs[llOOIcOl + trigger_type_id] = paramB;
}
var trigger_opcode_aliases = [];
function AddOpcodeAlias(opcode) {
    trigger_opcode_aliases[last_trigger_type_id] = opcode;
}
addTrigger(-1, lIOOIcGl, lICDIOl, lICDIOl);
addTrigger(0, llCGiOOl, licDlCl, liCDicl);
AddOpcodeAlias(liOOIOGl);
addTrigger(1, licOiCGl, licDlCl, llOGICl);
AddOpcodeAlias(lIcDiCOl);
addTrigger(2, llCDiCDl, liCDicl, liCDicl);
AddOpcodeAlias(lICOlcOl);
addTrigger(3, liOGiOOl, llcGll, lIcOiOl);
AddOpcodeAlias(lIODlCOl);
addTrigger(4, llODlcGl, liCGiODl, lIcOiOl);
AddOpcodeAlias(llCDicDl);
addTrigger(5, lIcGicGl, lIcOiOl, lICDIOl);
AddOpcodeAlias(lICOiOGl);
addTrigger(6, lICOIODl, lIcOiOl, liCDicl);
AddOpcodeAlias(llCDlOOl);
addTrigger(9, liODiOOl, lIOOIOl, lICDIOl);
AddOpcodeAlias(lIcGlCGl);
addTrigger(10, licOIcDl, lIcOiOl, liCDicl);
AddOpcodeAlias(llCDicOl);
addTrigger(11, llOGiOOl, liCGiODl, liCDicl);
AddOpcodeAlias(llCGlCGl);
addTrigger(12, lICOiODl, liCDicl, lICDIOl);
AddOpcodeAlias(liCOlODl);
addTrigger(13, liCGlOOl, liCGiODl, llcGll);
AddOpcodeAlias(llOGIOOl);
addTrigger(14, liCGICGl, liCGiODl, liCDicl);
AddOpcodeAlias(llOOiOGl);
addTrigger(15, liCGlODl, liCGIl, liCDicl);
AddOpcodeAlias(llcGlOGl);
addTrigger(16, llOOlcGl, lIODll, liCDicl);
AddOpcodeAlias(lIcOiOGl);
addTrigger(18, llcGIcGl, liCDicl, liCDicl);
AddOpcodeAlias(lICGiCOl);
addTrigger(19, llOOicGl, llCOIl, lICDIOl);
AddOpcodeAlias(liCGlcGl);
addTrigger(20, lIODICDl, llCOIl, lICDIOl);
AddOpcodeAlias(llcGlOOl);
addTrigger(21, lICOlCGl, llCOIl, lICDIOl);
AddOpcodeAlias(licGICOl);
addTrigger(22, liODlOOl, llCOIl, lIcGIcl);
AddOpcodeAlias(lICDlCGl);
addTrigger(23, licDIODl, liCGiODl, lIOGICl);
AddOpcodeAlias(lIOOlCDl);
addTrigger(24, lICDlOGl, llOGICl, liCDicl);
AddOpcodeAlias(llcDlcGl);
addTrigger(25, liCDlcGl, liODll, lICDIOl);
AddOpcodeAlias(lICDicDl);
addTrigger(26, llCOIOGl, liODll, lICDIOl);
AddOpcodeAlias(licDICGl);
addTrigger(27, liCGicOl, liODll, lIOGICl);
AddOpcodeAlias(llCGlcOl);
addTrigger(28, llCGiCOl, liCGiODl, liCDicl);
AddOpcodeAlias(liCDICGl);
addTrigger(29, lIODIcDl, liCGiODl, liCDicl);
AddOpcodeAlias(liOGiCGl);
addTrigger(30, lIODlOOl, liCDicl, liCDicl);
AddOpcodeAlias(liCGlcOl);
addTrigger(31, llCGlCDl, liCDicl, liCDicl);
AddOpcodeAlias(llcOlcDl);
addTrigger(32, liCOiCGl, liCGiODl, lICOIcl);
AddOpcodeAlias(llOOlCGl);
addTrigger(33, llcDiCOl, liCGiODl, lIcGlcl);
AddOpcodeAlias(llcOiCOl);
addTrigger(34, liODIOGl, lIOGIl, lICDiOl);
AddOpcodeAlias(lIcOlCGl);
addTrigger(35, liCDlCGl, liOGICl, lIcOiOl);
AddOpcodeAlias(licGlCOl);
addTrigger(36, llcDiOGl, liOGICl, lIcOiOl);
AddOpcodeAlias(llCDlcOl);
addTrigger(37, liCOlcDl, liOGICl, llOGICl);
AddOpcodeAlias(llCDIOGl);
addTrigger(38, llCDiCOl, liOGICl, lICGIOl);
AddOpcodeAlias(llODlcDl);
addTrigger(39, liODicOl, llOGICl, lICDIOl);
AddOpcodeAlias(llcDlOGl);
addTrigger(40, liOOIcOl, licGiCOl, lICDIOl);
AddOpcodeAlias(lIcGlCOl);
special_values_table[licGiCOl] = new Array();
special_values_table[licGiCOl][1] = lICOICGl;
special_values_table[licGiCOl][0] = llcGicDl;
addTrigger(41, liCGIODl, llODIODl, lICDIOl);
AddOpcodeAlias(llOGIcGl);
special_values_table[llODIODl] = new Array();
special_values_table[llODIODl][lIcOIOOl] = licGlcOl;
special_values_table[llODIODl][lIcGIcGl] = lIcGICGl;
special_values_table[llODIODl][lIODiOOl] = liOOIODl;
special_values_table[llODIODl][licOicDl] = liOGIOGl;
special_values_table[llODIODl][llcOlOOl] = lIODlCDl;
special_values_table[llODIODl][lIODlcDl] = lICOlOOl;
special_values_table[llODIODl][lICDiODl] = lIODIcGl;
special_values_table[llODIODl][liOOlcDl] = licDiCOl;
special_values_table[llODIODl][lIcDiOGl] = llCOicGl;
special_values_table[llODIODl][liCOiOGl] = liCDIcDl;
special_values_table[llODIODl][llOOIcDl] = lICOICDl;
special_values_table[llODIODl][lICOiCOl] = llODlCDl;
special_values_table[llODIODl][licGiCDl] = lIODiCOl;
special_values_table[llODIODl][lICDicOl] = liCOIOOl;
special_values_table[llODIODl][llCDiOGl] = lICGIcOl;
special_values_table[llODIODl][llcGlCOl] = lIcOIcOl;
special_values_table[llODIODl][licGIcOl] = llcDlODl;
special_values_table[llODIODl][licOIOOl] = lIOOlcOl;
special_values_table[llODIODl][licDlCDl] = llcGIcDl;
special_values_table[llODIODl][liOGlcGl] = liCGICDl;
special_values_table[llODIODl][llcDlcOl] = llcOicDl;
special_values_table[llODIODl][lIcGiCOl] = liCOIODl;
special_values_table[llODIODl][llcGicGl] = licOiCOl;
special_values_table[llODIODl][lIcDicGl] = liOOiCDl;
special_values_table[llODIODl][lIOGlcDl] = llCGicOl;
special_values_table[llODIODl][lIcOlCDl] = lICDiOOl;
special_values_table[llODIODl][llOOIOOl] = licDICDl;
special_values_table[llODIODl][liCGlOGl] = lIcGlODl;
special_values_table[llODIODl][licOIcGl] = licGicDl;
special_values_table[llODIODl][llcOICGl] = llcDlCGl;
special_values_table[llODIODl][licDIcOl] = llOOicDl;
special_values_table[llODIODl][llCOICGl] = liCGIcOl;
special_values_table[llODIODl][lIcDlODl] = licGiODl;
special_values_table[llODIODl][llODicOl] = liOOlCGl;
special_values_table[llODIODl][liOOlcOl] = liOGiODl;
special_values_table[llODIODl][llOOicOl] = liCOlcGl;
special_values_table[llODIODl][llOOIODl] = llcDicOl;
special_values_table[llODIODl][llcGicOl] = llCGiCGl;
special_values_table[llODIODl][lICOicDl] = llcGlODl;
special_values_table[llODIODl][llcDIODl] = liOGlCOl;
special_values_table[llODIODl][lIOOiCGl] = lICDlCDl;
special_values_table[llODIODl][lIcOicDl] = liOGlCGl;
special_values_table[llODIODl][lIcGlcOl] = lIcGlOOl;
special_values_table[llODIODl][liOOiOOl] = liCOiCDl;
special_values_table[llODIODl][llCOIcDl] = llOOlODl;
special_values_table[llODIODl][llCOIODl] = llCGlcDl;
special_values_table[llODIODl][lIOOIcDl] = lICOlOGl;
special_values_table[llODIODl][lICOlODl] = lIOOicDl;
special_values_table[llODIODl][liOOlCDl] = lIODlOGl;
special_values_table[llODIODl][licOiOGl] = llOOiCOl;
special_values_table[llODIODl][llODiCDl] = llCGicGl;
special_values_table[llODIODl][llCOiCGl] = liOGlcOl;
special_values_table[llODIODl][lIcOIcDl] = licGIOOl;
special_values_table[llODIODl][llCGlOGl] = llcOiOOl;
special_values_table[llODIODl][licGlcDl] = lICDlOOl;
special_values_table[llODIODl][liOGIcOl] = llODICOl;
special_values_table[llODIODl][liODIOOl] = lIOGlOGl;
special_values_table[llODIODl][licGiOOl] = llCGlOOl;
special_values_table[llODIODl][liCGicGl] = llcOicGl;
special_values_table[llODIODl][lICGiCDl] = lIOOICDl;
special_values_table[llODIODl][lIOGlCOl] = liCGlCGl;
special_values_table[llODIODl][liOOIcDl] = lIOOIOGl;
special_values_table[llODIODl][liOOlCOl] = llCDlCDl;
special_values_table[llODIODl][liCOICDl] = lICDICOl;
special_values_table[llODIODl][lIcGiOGl] = lIcOIOGl;
special_values_table[llODIODl][llODICDl] = lICDIOOl;
special_values_table[llODIODl][licGlCDl] = llCOICOl;
special_values_table[llODIODl][llcDiOOl] = lIcDIOGl;
special_values_table[llODIODl][llcDicDl] = liOOICOl;
special_values_table[llODIODl][llcOlCDl] = lIODicDl;
special_values_table[llODIODl][lICOlCDl] = liCGIOOl;
special_values_table[llODIODl][lICGIcDl] = lIcOIcGl;
special_values_table[llODIODl][llOOlCDl] = lIcGicDl;
special_values_table[llODIODl][lICGlCOl] = lICDlcOl;
special_values_table[llODIODl][llCOlCDl] = llcDIOOl;
special_values_table[llODIODl][liODiCOl] = liCOlOGl;
special_values_table[llODIODl][liCOiCOl] = llODIcDl;
special_values_table[llODIODl][lIcDlcDl] = llcDlCDl;
special_values_table[llODIODl][llOGIODl] = llODiOGl;
special_values_table[llODIODl][lIcOiOOl] = llODIOOl;
special_values_table[llODIODl][liCDIODl] = llCDlcGl;
special_values_table[llODIODl][llOOlOOl] = liCOiODl;
special_values_table[llODIODl][lIcDIOOl] = liOOicOl;
special_values_table[llODIODl][lIcDlcOl] = liOOicGl;
special_values_table[llODIODl][llOGlcOl] = lIcGIOOl;
special_values_table[llODIODl][liOGIcGl] = liOGIODl;
special_values_table[llODIODl][liOGICGl] = llCDlcGll;
special_values_table[llODIODl][llcDlcOIl] = llcOicOil;
special_values_table[llODIODl][lICDlOOll] = llcDlCDil;
special_values_table[llODIODl][llCDicDil] = lICGICOil;
special_values_table[llODIODl][liCGicDil] = lICDlcOIl;
special_values_table[llODIODl][llCDlcGIl] = liODiODIl;
special_values_table[llODIODl][licDlOOil] = llOGiODll;
special_values_table[llODIODl][llcOIcDIl] = llcOIcDll;
special_values_table[llODIODl][llCOicGil] = llCDicGil;
special_values_table[llODIODl][lIcGlcOll] = licOiOGil;
special_values_table[llODIODl][licOlCDIl] = liOGlOOll;
special_values_table[llODIODl][licOiCGil] = lIOGICGl;
special_values_table[llODIODl][lIODiCDll] = llCOIcGll;
special_values_table[llODIODl][liODIcDll] = liODIODIl;
special_values_table[llODIODl][lICDIcOll] = liCDiOOll;
special_values_table[llODIODl][liCOlcOil] = lIcDIcDIl;
special_values_table[llODIODl][liCDiCDil] = lIcDlODil;
special_values_table[llODIODl][liCDlCOil] = lIcOlcGIl;
special_values_table[llODIODl][liCDIcGil] = llcGICGIl;
special_values_table[llODIODl][lIcOlOGIl] = liODiCOIl;
special_values_table[llODIODl][llcOlCDIl] = lICDlCOil;
special_values_table[llODIODl][lIOOlcDll] = lICDICDIl;
special_values_table[llODIODl][lIOGIODil] = llCOicGIl;
special_values_table[llODIODl][lICOicOll] = lIcOlCDIl;
special_values_table[llODIODl][llcOICGll] = llOOicGll;
special_values_table[llODIODl][liCGICOll] = llCDlcGil;
special_values_table[llODIODl][llCOiODIl] = lIODIcGil;
special_values_table[llODIODl][llcOiCGll] = lIOOlCOll;
special_values_table[llODIODl][liCDicGll] = lIcDlOGil;
special_values_table[llODIODl][llcGiCGll] = llODIOGil;
special_values_table[llODIODl][llCGlCDIl] = liCOiOOIl;
special_values_table[llODIODl][liOOicDll] = licOICOll;
special_values_table[llODIODl][lIcOIOGil] = liOOiODIl;
special_values_table[llODIODl][llOOIODll] = llCOICDll;
special_values_table[llODIODl][liODIcOll] = liOGiCDll;
special_values_table[llODIODl][lIODlcDll] = licDiOGIl;
special_values_table[llODIODl][llCGicOll] = llOOIOGll;
special_values_table[llODIODl][llODlOOIl] = liCOicOIl;
special_values_table[llODIODl][llcOiCDil] = liOOlcDll;
special_values_table[llODIODl][lIcGIcDIl] = licDiCOIl;
special_values_table[llODIODl][llCOICGIl] = lIOOlCGll;
special_values_table[llODIODl][lICGICOIl] = lICDiCOll;
special_values_table[llODIODl][liCDICOil] = lIcDIcOIl;
special_values_table[llODIODl][lIOOiOGll] = lIcGiCDil;
special_values_table[llODIODl][liOOIODll] = lICDIcGil;
special_values_table[llODIODl][llcDICOil] = llCDiCGil;
special_values_table[llODIODl][lICGiODll] = llcOicDll;
special_values_table[llODIODl][liCGICOIl] = llODlcOIl;
special_values_table[llODIODl][llCOlCDil] = llCDICDIl;
special_values_table[llODIODl][llCDICOil] = lIcGICOIl;
special_values_table[llODIODl][lIOOlCDil] = lICOiCDll;
special_values_table[llODIODl][lIcGiCDll] = lICOiCOll;
special_values_table[llODIODl][lICOIODll] = liCDiCGil;
special_values_table[llODIODl][liODlCOll] = llcGlOGil;
special_values_table[llODIODl][lICOIcGil] = llCOlOGIl;
special_values_table[llODIODl][liODlcOIl] = llOGIOGil;
special_values_table[llODIODl][lIcOlCDll] = lIcGicDil;
special_values_table[llODIODl][llcOICDIl] = llOOlcOll;
special_values_table[llODIODl][lIODiOOIl] = llcDlcOil;
special_values_table[llODIODl][llCGiODIl] = lICDlOOil;
special_values_table[llODIODl][lIOOlcGil] = licDiCOil;
special_values_table[llODIODl][llCOlCOll] = liCDIODIl;
special_values_table[llODIODl][liOOlCDil] = lIcDiODll;
special_values_table[llODIODl][llcOICOll] = liODlCGll;
special_values_table[llODIODl][llOOlODll] = llCDicGll;
special_values_table[llODIODl][llcGlCDIl] = llCDiOGil;
special_values_table[llODIODl][licOIcGIl] = licDIcDIl;
special_values_table[llODIODl][lICDIcOIl] = liCOICGll;
special_values_table[llODIODl][lIODlOGll] = llCOlcDil;
special_values_table[llODIODl][llODICOIl] = liCGlcOll;
special_values_table[llODIODl][llODicGIl] = llcGiCDil;
special_values_table[llODIODl][llODlcOll] = liCGicGll;
special_values_table[llODIODl][lIOOIOGil] = lIcDIOGIl;
special_values_table[llODIODl][lIOOiOOIl] = llODicOIl;
special_values_table[llODIODl][liCOlCGil] = lICDicGll;
special_values_table[llODIODl][licDiODil] = liOGlCDil;
special_values_table[llODIODl][lICGIOGll] = llCGIOOIl;
special_values_table[llODIODl][liOGIOGil] = lIcGlCOil;
special_values_table[llODIODl][llcOiOGil] = llcGlcGIl;
special_values_table[llODIODl][llcGiODil] = llcGicOIl;
special_values_table[llODIODl][lIODll] = llcOiCOIl;
special_values_table[llODIODl][liCGlOGll] = licDlCOll;
special_values_table[llODIODl][lIOOICGIl] = lICGlcGil;
special_values_table[llODIODl][liCDiODll] = lIcDIODll;
special_values_table[llODIODl][llCGlcGll] = llOOlOGil;
special_values_table[llODIODl][lIOGiODIl] = lIcDIOGll;
special_values_table[llODIODl][llcGicOil] = licDIcDil;
special_values_table[llODIODl][liODIcDIl] = lIcDICOIl;
special_values_table[llODIODl][llCGIOOll] = lIcOicDil;
special_values_table[llODIODl][llCGIcOIl] = lIOOICOll;
special_values_table[llODIODl][lICGIcDil] = llcDIcGIl;
special_values_table[llODIODl][liODiCDll] = lIcDICGll;
special_values_table[llODIODl][liOGICGll] = llcDiCOIl;
special_values_table[llODIODl][liCDlcOil] = liOOiCGil;
special_values_table[llODIODl][liOGicOll] = lIOOlcOil;
special_values_table[llODIODl][llOGICOIl] = lIOOIcOll;
special_values_table[llODIODl][lIOGIcDll] = lICGiCDIl;
special_values_table[llODIODl][llcOlcOll] = llCGiCDil;
special_values_table[llODIODl][lICDlcOil] = liCGiCDll;
special_values_table[llODIODl][lIOGlcDil] = liCDlCGil;
special_values_table[llODIODl][liODlOOIl] = lIODlcGil;
special_values_table[llODIODl][liCGlCDll] = liCDICDll;
special_values_table[llODIODl][lIOOlODIl] = licDICDll;
special_values_table[llODIODl][llCGiCGIl] = liCOICOil;
special_values_table[llODIODl][liCOIOGll] = llcGICGil;
special_values_table[llODIODl][liOGICDll] = lICGiCGil;
special_values_table[llODIODl][liCOiODll] = lIcDlCGil;
special_values_table[llODIODl][lIOGicOil] = liCOicGIl;
special_values_table[llODIODl][llCGiOOil] = lIODIOOil;
special_values_table[llODIODl][liCOlcDll] = lIOOICOIl;
special_values_table[llODIODl][liOOICDil] = lICDlCOll;
special_values_table[llODIODl][llCGICDIl] = liCOicDIl;
special_values_table[llODIODl][llCGICDil] = llcGiCOl;
special_values_table[llODIODl][licDICDIl] = llCDlcOll;
special_values_table[llODIODl][lICGIOOIl] = licGIODil;
special_values_table[llODIODl][llODlCDil] = licDIOOIl;
special_values_table[llODIODl][liOGlcDIl] = lICGlOOll;
special_values_table[llODIODl][lIcGiCOll] = lIODiODll;
special_values_table[llODIODl][lIOOlcGll] = licOIOGil;
special_values_table[llODIODl][licGlOGil] = llcGiCOil;
special_values_table[llODIODl][llODIOGIl] = llcOICDll;
special_values_table[llODIODl][llCOiCGll] = liODlcDil;
special_values_table[llODIODl][llCDiCDll] = licOiODIl;
special_values_table[llODIODl][lIODlODll] = lIOOIODll;
special_values_table[llODIODl][llcOiOOll] = liOGlcOil;
special_values_table[llODIODl][lIODiOGil] = lIcGIOOil;
special_values_table[llODIODl][lICOiOOll] = liODIOOll;
special_values_table[llODIODl][llCDICDil] = lIODiCDIl;
special_values_table[llODIODl][lIOOlCDIl] = licDiOOIl;
special_values_table[llODIODl][liOGicDil] = liCOICDll;
special_values_table[llODIODl][llOGIcOil] = lIcDlOOil;
special_values_table[llODIODl][llODIcGll] = lIOOiOGIl;
special_values_table[llODIODl][liCOlcOIl] = lICOICOil;
special_values_table[llODIODl][liCOlcGil] = llCGlcOIl;
special_values_table[llODIODl][llCDlODil] = licDlCOil;
special_values_table[llODIODl][licGICDll] = lIcGICDIl;
special_values_table[llODIODl][licGlcOll] = lICGlCGIl;
special_values_table[llODIODl][llcGlOGll] = llcGIODIl;
special_values_table[llODIODl][liCDicGIl] = licGlODll;
special_values_table[llODIODl][lIcDlCDll] = liCDlcDil;
special_values_table[llODIODl][lIOOlOGIl] = lICGiCDil;
special_values_table[llODIODl][lIcDiODil] = licGlOOll;
special_values_table[llODIODl][liOGlcGIl] = lIcGICOil;
special_values_table[llODIODl][liCOlcGll] = lIcDIcDil;
special_values_table[llODIODl][liCGlCGil] = llcGlcGil;
special_values_table[llODIODl][llCGlODil] = lIcGIOGIl;
special_values_table[llODIODl][lIOGicDll] = lICDICOil;
special_values_table[llODIODl][liCGlCDIl] = lIODICDil;
special_values_table[llODIODl][llOGicDIl] = liOGIcGil;
special_values_table[llODIODl][llCDicOIl] = licDICOil;
special_values_table[llODIODl][liOOicDil] = lIcDiOOil;
special_values_table[llODIODl][llCGicGll] = llcDlcGll;
special_values_table[llODIODl][lIOGlcDll] = llCDICGIl;
special_values_table[llODIODl][llcDIcOIl] = llcGlODil;
special_values_table[llODIODl][lIcOiODil] = llCOIcOIl;
special_values_table[llODIODl][llcOlODIl] = lICOIcDll;
special_values_table[llODIODl][llCOlCOIl] = liCGlCOil;
special_values_table[llODIODl][llcDiOGIl] = llCOiCOll;
special_values_table[llODIODl][llCDiCOil] = liCGiOGIl;
special_values_table[llODIODl][liODlCOIl] = liOOlcDil;
special_values_table[llODIODl][liOOICDll] = licDicDil;
special_values_table[llODIODl][licOiOOil] = llOGiOGIl;
special_values_table[llODIODl][lIODlcGll] = lIcGICGll;
special_values_table[llODIODl][liCDlCGIl] = llODlcGll;
special_values_table[llODIODl][lIcOiCGll] = lIOGIcOll;
special_values_table[llODIODl][liCOiOOil] = lICOlCDIl;
special_values_table[llODIODl][liOOlCDll] = liCDiOOil;
special_values_table[llODIODl][licOICGIl] = liCOlCOIl;
special_values_table[llODIODl][llCGIcDil] = liOGICGIl;
special_values_table[llODIODl][llOOIOOil] = lIcDiCGll;
special_values_table[llODIODl][llCOlOOIl] = lICGicOil;
special_values_table[llODIODl][liOGlcOIl] = licGlcDil;
special_values_table[llODIODl][liCDIOOIl] = lIcDIODIl;
special_values_table[llODIODl][lIOOiOOil] = liOGlCGll;
special_values_table[llODIODl][lICOlCDll] = licDiCDll;
special_values_table[llODIODl][liCDICOll] = lIOOICOil;
special_values_table[llODIODl][lICGlCOll] = llcOiCOll;
special_values_table[llODIODl][lIcOlCOll] = lIOGiCOIl;
special_values_table[llODIODl][lICOlcGIl] = llcOlOOil;
special_values_table[llODIODl][lIcOlOOil] = llOGIOGIl;
special_values_table[llODIODl][llcOIODil] = liCOicDil;
special_values_table[llODIODl][liOOicDIl] = lICGlCDll;
special_values_table[llODIODl][liCOIOGil] = llcGlCOll;
special_values_table[llODIODl][llcGlCDil] = llcOlCOil;
special_values_table[llODIODl][llCOICOIl] = liOOIOGIl;
special_values_table[llODIODl][licOlcOIl] = lIOGiCDll;
special_values_table[llODIODl][liOOiCDIl] = lICOIODIl;
special_values_table[llODIODl][llCOlCGll] = licOlcDIl;
special_values_table[llODIODl][lICGIOOll] = llcDiOGil;
special_values_table[llODIODl][llOOlcGIl] = liCOIcDIl;
special_values_table[llODIODl][lICDiOGIl] = llcGlcDIl;
special_values_table[llODIODl][lIODICDll] = lICDIOOIl;
special_values_table[llODIODl][lIODlCDll] = llOOIcOIl;
special_values_table[llODIODl][lIcDiCGil] = llCGlCOil;
addTrigger(42, llcOlCDll, lIOOIOl, lICGIODll);
AddOpcodeAlias(lICDicGIl);
special_values_table[lICGIODll] = new Array();
special_values_table[lICGIODll][0] = liOGlcOll;
special_values_table[lICGIODll][1] = liOGiCOIl;
special_values_table[lICGIODll][2] = llOGiCGl;
special_values_table[lICGIODll][3] = liCDiOOl;
special_values_table[lICGIODll][4] = lIOOlCOil;
special_values_table[lICGIODll][lIcDiCDil] = licOicOil;
addTrigger(43, liCGIOOll, lIOOIOl, lICDIOl);
AddOpcodeAlias(llcDicDIl);
addTrigger(44, lICDiCGil, liODll, lICDIOl);
AddOpcodeAlias(llODIODil);
addTrigger(45, lIcGlcGil, licGiCOl, lICDIOl);
AddOpcodeAlias(liCOICGil);
addTrigger(46, liODlODll, liODll, lIcGIcl);
AddOpcodeAlias(lICOIcGll);
addTrigger(48, lICDlCGil, liCGiODl, lIcOiOl);
AddOpcodeAlias(llcGlCGIl);
addTrigger(49, lICDlOOIl, licGiCOl, lICDIOl);
AddOpcodeAlias(licOicGil);
addTrigger(50, lIOOicGil, lIOOIOl, lICDIOl);
AddOpcodeAlias(liOOlCOil);
addTrigger(51, lIcOIcGll, llcDIcl, lICDIOl);
AddOpcodeAlias(liCOlCGIl);
addTrigger(52, llOGIcOll, liCGiODl, lIOOIOl);
AddOpcodeAlias(lIcDlCOil);
addTrigger(53, licGICGll, liCGiODl, liCDicl);
AddOpcodeAlias(licDlCDil);
addTrigger(54, llcOlOGil, licGil, lICDIOl);
AddOpcodeAlias(licGlcDIl);
addTrigger(55, lICDIODIl, licGil, lICDIOl);
AddOpcodeAlias(liODICOIl);
addTrigger(56, licOIOOll, lICDIOl, liCDicl);
AddOpcodeAlias(liODICGil);
addTrigger(57, lICGlODIl, lICDIOl, liCDicl);
AddOpcodeAlias(lIcOlCGIl);
addTrigger(58, licOICOil, liCGiODl, llOGlCl);
AddOpcodeAlias(llCDICDll);
addTrigger(59, llOOlOGIl, liCGiODl, lIcOiOl);
AddOpcodeAlias(llcDIOOIl);
addTrigger(60, llcOiOOil, liCGiODl, lICDIOl);
AddOpcodeAlias(llODiCOll);
addTrigger(61, llcDIcDil, liCGiODl, lIcOiOl);
AddOpcodeAlias(llCDIcDIl);
addTrigger(62, liODlcGll, liCGIl, lIcOiOl);
AddOpcodeAlias(liOOIcDll);
addTrigger(63, licDlODil, liCGIl, lIcOiOl);
AddOpcodeAlias(lIcOlODIl);
addTrigger(64, llODiCGil, liCGIl, lIcOiOl);
AddOpcodeAlias(liODlCOil);
addTrigger(65, lICOiOGll, liCGIl, lICDIOl);
AddOpcodeAlias(lIOGiODll);
addTrigger(66, liODIOOIl, liCGIl, lICDIOl);
AddOpcodeAlias(lIcGIOOIl);
addTrigger(67, licDlCDll, liCGIl, lICDIOl);
AddOpcodeAlias(llCGiCOil);
addTrigger(68, liCGiOOil, liCGIl, lICDIOl);
AddOpcodeAlias(llOOICDil);
addTrigger(69, llcGicDll, liCGIl, lICDIOl);
AddOpcodeAlias(lIOOlCDll);
addTrigger(70, llODiODIl, liCDicl, liCDicl);
AddOpcodeAlias(lICGICOll);
addTrigger(71, liCOICGIl, licDlCl, lIOOIOl);
AddOpcodeAlias(liOOIcOil);
addTrigger(72, lICGicDIl, liCDicl, lIcOiOl);
AddOpcodeAlias(llODlODil);
addTrigger(73, llOOlcGll, lIcOiOl, lICDIOl);
AddOpcodeAlias(lICOicGIl);
addTrigger(74, lIcGIcGil, lIcOiOl, lICDIOl);
AddOpcodeAlias(lICGlODll);
addTrigger(75, liODlOGIl, lIcOiOl, lICDIOl);
AddOpcodeAlias(lIcDIcOil);
addTrigger(76, licOlODll, liCGIl, lICDIOl);
AddOpcodeAlias(lIcOICDll);
addTrigger(77, llODlcGIl, liCGIl, lICDIOl);
AddOpcodeAlias(liOOlCOll);
addTrigger(78, llODiCDil, liCGIl, lIOGICl);
AddOpcodeAlias(lICOlcGll);
addTrigger(79, liODlOGll, liCDicl, lICDIOl);
AddOpcodeAlias(lIcGiOGIl);
addTrigger(80, lICOlODIl, liCDicl, liCGiODl);
AddOpcodeAlias(lIODiODIl);
addTrigger(81, liOOIcDil, liCGIl, llCOIl);
AddOpcodeAlias(llCOlcOil);
addTrigger(82, llCDiOOll, licDlCl, llCOIl);
AddOpcodeAlias(llOGicOIl);
addTrigger(83, lICDIOGIl, liCDicl, lIcOiOl);
AddOpcodeAlias(llCDlCDil);
addTrigger(84, llCGiCGll, liCDicl, lIcOiOl);
AddOpcodeAlias(liOGIOGll);
addTrigger(85, lIODIcOll, licDlCl, lICDIOl);
AddOpcodeAlias(llCDlCGil);
addTrigger(86, lIcOiOGll, licDlCl, lICDIOl);
AddOpcodeAlias(lIcDlcDIl);
addTrigger(87, liCDlCDil, liCDicl, lICDIOl);
AddOpcodeAlias(liCOIcGll);
addTrigger(88, liCGIOGIl, liCGiODl, lIcOiOl);
AddOpcodeAlias(licDIOOil);
addTrigger(89, lICGlCDil, liCGiODl, lIOGICl);
AddOpcodeAlias(licOicDil);
addTrigger(90, liCGIcDll, liCGiODl, lIOOIOl);
AddOpcodeAlias(lIcOiCGil);
addTrigger(91, lIcOicOll, liCGiODl, lIOGICl);
addTrigger(92, lIcGlCGll, liCGiODl, lIOGICl);
addTrigger(93, liCGiOGll, liCGiODl, lIOGICl);
addTrigger(94, lICDiOGll, liCGiODl, liCDicl);
addTrigger(95, lIOGIcDil, liCDicl, liCDicl);
addTrigger(96, liCGicGIl, liCDicl, liCDicl);
addTrigger(97, llOGICDIl, liCGiODl, liCGiODl);
addTrigger(98, llOOIOGil, liCDicl, licDlCl);
addTrigger(99, lIOGlcOll, llCOIl, lICDIOl);
AddOpcodeAlias(liCGiCOil);
addTrigger(100, licGiCDil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(licDiOOil);
addTrigger(101, llcDIcGll, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llOGiCOil);
addTrigger(102, llcOICGil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(licGlcOIl);
addTrigger(103, llOOiCGIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llCDlOOil);
addTrigger(104, liOGICOIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llcOlCGIl);
addTrigger(105, llOOICDIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(liOGiCOil);
addTrigger(106, llODlCDll, lIOOIOl, lIOOIOl);
AddOpcodeAlias(liODiOGil);
addTrigger(107, lIOOIcDll, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llcDICDil);
addTrigger(108, llODiCOIl, lIOOIOl, lICDIOl);
AddOpcodeAlias(llCDiOOIl);
addTrigger(109, lIcOiCOIl, lIOOIOl, lICDIOl);
AddOpcodeAlias(llOOlcDll);
addTrigger(110, llcDIcOil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llcGIOGil);
addTrigger(111, llCDIOOil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(lIcDIcDll);
addTrigger(112, llCGicDIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(liOGIcOIl);
addTrigger(113, licGICGil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llcOiOOIl);
addTrigger(114, llOOlODil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(licGlCOil);
addTrigger(115, llCOIOGIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(liCGiODIl);
addTrigger(116, lIOGlOOil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llOOlcDIl);
addTrigger(117, llcGicGIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llcDicOIl);
addTrigger(118, llcOIcGIl, lIOOIOl, liCDicl);
AddOpcodeAlias(licOIOOIl);
addTrigger(119, llOOlOOIl, lIOOIOl, liCDicl);
AddOpcodeAlias(lICOlcOil);
addTrigger(120, llCDlcOil, liCDicl, lIOOIOl);
AddOpcodeAlias(licOicOIl);
addTrigger(121, liOGlCGIl, liCDicl, lIOOIOl);
AddOpcodeAlias(llODiCGll);
addTrigger(122, llcOICOil, lIOOIOl, liCGiODl);
AddOpcodeAlias(lIcGIcOll);
addTrigger(123, lIOGiCDil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(licDiOGil);
addTrigger(124, licGicDil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llcGIcOil);
addTrigger(125, llODiOOIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llCOlcOIl);
addTrigger(126, lIcDicOil, lIOOIOl, liCDicl);
AddOpcodeAlias(llOGIOOil);
addTrigger(127, lIODlCGil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(lIcGIcOil);
addTrigger(128, lICOlcDll, liCGIl, lIOOIOl);
addTrigger(129, licOlODil, liCGIl, lIOOIOl);
addTrigger(130, lIcGIcDll, liCGIl, lIOOIOl);
addTrigger(131, licGICOll, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llCDICOIl);
addTrigger(132, llOOiCOll, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llcGiOGIl);
addTrigger(133, licDlcOil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(liOGlOOIl);
addTrigger(134, lICOICOll, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llCDiCGIl);
addTrigger(135, llOOiOOll, lIOOIOl, lIOOIOl);
AddOpcodeAlias(licGicDIl);
addTrigger(136, lIOOiCDil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llCGlCDil);
addTrigger(137, licDIOGIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(lIODiODil);
addTrigger(138, liCOIcOll, lIOOIOl, lIOOIOl);
AddOpcodeAlias(liCDlCOll);
addTrigger(139, liCDIcOll, lIOOIOl, lIOOIOl);
AddOpcodeAlias(liCOlCDil);
addTrigger(140, liOGiOOil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llcOicGIl);
addTrigger(141, liCOicOil, liCGiODl, lIcOiOl);
AddOpcodeAlias(licGicOIl);
addTrigger(142, llOOiOGIl, liCGiODl, lIcOiOl);
AddOpcodeAlias(llcGiCGil);
addTrigger(143, lIOGiOOIl, liCGiODl, lIcOiOl);
AddOpcodeAlias(llcGlCOIl);
addTrigger(144, liODIOGil, liCGiODl, lIcOiOl);
AddOpcodeAlias(liOOiODll);
addTrigger(145, liCDIOOll, lIOOIOl, liCDicl);
AddOpcodeAlias(llCDICGil);
addTrigger(146, lIcOiCOll, lIOOIOl, lICDIOl);
AddOpcodeAlias(lICOlCOll);
addTrigger(147, lIcOICOil, lIOOIOl, lICDIOl);
AddOpcodeAlias(llcGiODIl);
addTrigger(148, liOGiCGil, lIOOIOl, lICDIOl);
AddOpcodeAlias(liCOiODIl);
addTrigger(149, llOOIcDIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(lIcOICDil);
addTrigger(150, lIOGlCGil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(lICGlcGIl);
addTrigger(151, llCOiOGll, lIOOIOl, lIOOIOl);
AddOpcodeAlias(lIcOIOOil);
addTrigger(152, lIOOIcGIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(lIODicOIl);
addTrigger(153, llCGIcOil, lIOOIOl, lICDIOl);
AddOpcodeAlias(lIODIcGIl);
addTrigger(154, liODiCGll, lIOOIOl, lICDIOl);
AddOpcodeAlias(llcGiCGIl);
addTrigger(155, lICGlOGil, lIOOIOl, lICDIOl);
AddOpcodeAlias(licDICGIl);
addTrigger(156, llOOIcOll, llCOIl, lICDIOl);
AddOpcodeAlias(llcDlCOil);
addTrigger(157, llCDlcOIl, lIOOIOl, lICDIOl);
AddOpcodeAlias(liOOlCGIl);
addTrigger(158, lIcOlODll, lIOOIOl, lICDIOl);
AddOpcodeAlias(liCDiCOil);
addTrigger(159, liOGIcDIl, lIOOIOl, lICDIOl);
AddOpcodeAlias(licDIODIl);
addTrigger(160, liODicOll, lIOOIOl, lICDIOl);
AddOpcodeAlias(llOGicOll);
addTrigger(161, liOOiOGIl, lICDIOl, lICDIOl);
addTrigger(162, llcDlCOll, lIOOIOl, lIOOIOl);
addTrigger(163, lIODICDIl, lIOOIOl, lIOOIOl);
addTrigger(164, lIcDlCOll, liCGiODl, llOGlCl);
addTrigger(165, liOGicOIl, liCGiODl, llOGlCl);
addTrigger(166, liOOICOll, liCGiODl, llOGlCl);
addTrigger(167, lIcOICGIl, liCGiODl, llOGlCl);
addTrigger(168, llcOlcGIl, liCGiODl, lIOOIOl);
addTrigger(169, lICDiCDIl, lIOOIOl, lIOOIOl);
addTrigger(170, licOlCOil, liCGIl, lIOOIOl);
addTrigger(171, lIcOiOGil, liCGIl, lIOOIOl);
addTrigger(172, liOOlOOIl, liCGIl, lIOOIOl);
addTrigger(173, llcDlCDll, liCGIl, lIOOIOl);
addTrigger(174, lICOIOOll, lIOOIOl, lICDIOl);
addTrigger(175, llcDlOOll, liCGIl, lIOOIOl);
addTrigger(176, liCOIOGIl, liCGIl, lIOOIOl);
addTrigger(177, liOGlcGil, lIOOIOl, lICDIOl);
addTrigger(178, lIcOlCDil, lIOOIOl, liCGiODl);
addTrigger(179, lIcDIcOll, lIOOIOl, liCGiODl);
addTrigger(180, llcOIcOll, lIOOIOl, lICDIOl);
addTrigger(181, licOicDll, lIOOIOl, lICDIOl);
addTrigger(182, llOGicGil, lIOOIOl, lICDIOl);
addTrigger(183, llODIcOil, lIOOIOl, lICDIOl);
addTrigger(184, liCDlOOil, lIOOIOl, lIOOIOl);
addTrigger(185, llcOiCGIl, lIOOIOl, lIOOIOl);
addTrigger(186, llOOlcGil, lIOOIOl, lIOOIOl);
addTrigger(187, llcDIcDIl, lIOOIOl, lIOOIOl);
addTrigger(188, lICOIcOIl, lIOOIOl, lIOOIOl);
addTrigger(189, lICDiCOil, lIOOIOl, lIOOIOl);
addTrigger(190, llcGlODll, lICDIOl, lICDIOl);
addTrigger(191, lICOiOGIl, lICDIOl, lICDIOl);
addTrigger(192, liCOIcOil, lIcGlCDil, lICDIOl);
addTrigger(193, llCGiODll, lIOOIOl, lICDIOl);
addTrigger(194, llcDIODil, lIOOIOl, lICDIOl);
addTrigger(195, llOOICOll, lIOOIOl, lICDIOl);
addTrigger(196, lIcDICGil, lIOOIOl, lICDIOl);
addTrigger(197, lICGICDIl, lIOOIOl, lICDIOl);
addTrigger(198, lIODIOGll, lIOOIOl, lICDIOl);
addTrigger(199, licDIOOll, lIOOIOl, lIOOIOl);
addTrigger(200, licDIcGll, lIOOIOl, lIOOIOl);
addTrigger(201, lIODIcOil, lIOOIOl, lIOOIOl);
addTrigger(202, licGlODil, lIOOIOl, lIOOIOl);
addTrigger(203, liOOICDIl, lIOOIOl, lIOOIOl);
addTrigger(204, llOOicDll, lIOOIOl, lIOOIOl);
addTrigger(205, llOGiODIl, lIOOIOl, lIOOIOl);
addTrigger(206, lIcDlOOll, lIOOIOl, lIOOIOl);
addTrigger(207, lIOOiOGil, lICDIOl, lICDIOl);
addTrigger(208, llCGiOOll, lICDIOl, lICDIOl);
addTrigger(209, liODIODll, lIOOIOl, lICDIOl);
addTrigger(210, llcDlODIl, lIOOIOl, lICDIOl);
addTrigger(211, llcDiOOil, lIOOIOl, lICDIOl);
addTrigger(212, licDIcDll, lIOOIOl, lICDIOl);
addTrigger(213, llCGICGll, lIOOIOl, lICDIOl);
addTrigger(214, lICOlCGll, lIOOIOl, lICDIOl);
addTrigger(215, llcGIODll, lIOOIOl, lICDIOl);
addTrigger(216, lIOGlCDIl, lIOOIOl, lICDIOl);
addTrigger(217, llCGiODil, lIOOIOl, lICDIOl);
addTrigger(218, licGIcOil, liCGIl, lIOOIOl);
addTrigger(219, lIcDlcDil, liCGIl, lIOOIOl);
addTrigger(220, lICGiCGll, liCGiODl, lIOOIOl);
addTrigger(221, llcDicGil, liCGiODl, lIOOIOl);
addTrigger(222, licOicGIl, liCGiODl, lIOOIOl);
addTrigger(223, licGICOIl, lIOOIOl, lICDIOl);
addTrigger(224, liOOicOil, lIOOIOl, lICDIOl);
addTrigger(225, liOGIOOil, lIOOIOl, lICDIOl);
addTrigger(226, liODlODIl, lIOOIOl, lICDIOl);
addTrigger(227, licDlCDIl, lIOOIOl, lICDIOl);
addTrigger(228, llODlcDil, llCOIl, lICDIOl);
addTrigger(229, lIcGiCOIl, llCOICDl, lICDIOl);
addTrigger(230, liOOIcDIl, lIOOIOl, lIOOIOl);
addTrigger(231, liCGIcGll, lIOGIl, lIOOIOl);
addTrigger(232, liCDicOil, lIOGIl, lIOOIOl);
addTrigger(233, licOIcGil, lIOGIl, lIOOIOl);
addTrigger(234, llOOICOil, lIOGIl, lIOOIOl);
addTrigger(235, licGiOGil, lIOOIOl, lICDIOl);
addTrigger(236, llOOlOOil, lIOOIOl, lICDIOl);
addTrigger(237, lICOiCDIl, liCGIl, lIOOIOl);
addTrigger(238, lICOIOGIl, liCGIl, lIOOIOl);
addTrigger(239, llOGIOOll, liCGIl, lIOOIOl);
addTrigger(240, llOOlCDll, lIOOIOl, lICDIOl);
addTrigger(241, lICDIcDil, lIOOIOl, lICDIOl);
addTrigger(242, lIOGICDil, lIOOIOl, lICDIOl);
addTrigger(243, liCDicGil, liCDicl, lIOOIOl);
addTrigger(244, liCOlOOIl, lIOOIOl, lIOOIOl);
addTrigger(245, lIOGIOGil, liCDicl, lIOOIOl);
addTrigger(246, llODlcGil, lICDIOl, lICDIOl);
addTrigger(247, lIcDlCGIl, lIOOIOl, liCGiODl);
addTrigger(248, llODlOGil, lIOOIOl, liCGiODl);
addTrigger(249, licGiOGIl, lIOOIOl, liCGiODl);
addTrigger(250, liOGiCOll, lICDIOl, lICDIOl);
addTrigger(251, liODlcOil, lICDIOl, lICDIOl);
addTrigger(252, llOGICGIl, lIOGIl, lIOOIOl);
addTrigger(253, lICGiCOil, lIOGIl, lIOOIOl);
addTrigger(254, lIODiCDil, lIOOIOl, lICDIOl);
addTrigger(255, licGlcDll, liCGiODl, lIOOIOl);
addTrigger(256, lIODIcDll, liCGiODl, lIOOIOl);
addTrigger(257, liODiOGIl, lIOGIl, lIOOIOl);
addTrigger(258, llOGlcDll, lIOGIl, lIOOIOl);
addTrigger(259, licGlCOIl, liCDicl, liCGiODl);
addTrigger(260, liODIcOil, liCGIl, llODIODl);
addTrigger(261, liODICDil, lICDIOl, lICDIOl);
addTrigger(262, lIcGicDIl, lICDIOl, lICDIOl);
addTrigger(263, lICOicOIl, lIOOIOl, lICDIOl);
addTrigger(264, licOIcDll, lIOOIOl, lICDIOl);
addTrigger(265, liCDicDIl, lIOOIOl, lICDIOl);
addTrigger(266, lIcDlcOll, lIOOIOl, lICDIOl);
addTrigger(267, llOGlCOll, lIOGIl, lIOOIOl);
addTrigger(268, liOOlOGIl, lIOGIl, lIOOIOl);
addTrigger(270, licOlCDll, liCGiODl, lIOOIOl);
AddOpcodeAlias(llCOIcDll);
addTrigger(271, llcOIcGll, liCGiODl, lIOOIOl);
AddOpcodeAlias(licOiCGll);
addTrigger(272, liOOICGll, liCGiODl, lIOGICGil);
AddOpcodeAlias(llCGIcGll);
addTrigger(273, llODiODll, liCGiODl, lICDIOl);
AddOpcodeAlias(llCOIcGIl);
addTrigger(274, liODicOIl, liCGiODl, lICDIOl);
AddOpcodeAlias(lIcGlOGil);
addTrigger(275, lIcOIcDIl, lICDIOl, lICDIOl);
addTrigger(276, llOGIODll, lICDIOl, lICDIOl);
addTrigger(277, llODlCDIl, lIOOIOl, lICDIOl);
addTrigger(278, llODlCGIl, lIOOIOl, lICDIOl);
addTrigger(279, lIcDlCOIl, liCDicl, liCDicl);
AddOpcodeAlias(lIcGlCOll);
addTrigger(280, licDICGll, lIOOIOl, lICDIOl);
addTrigger(281, lIcDicOIl, lIOOIOl, lIOOIOl);
addTrigger(282, lIcOlCOil, lICDIOl, lICDIOl);
addTrigger(283, licGIcOIl, liCGiODl, liCDicl);
addTrigger(284, liCOIODll, llODIODl, liCDicl);
AddOpcodeAlias(lIcOIcDil);
addTrigger(285, liCDlCGll, lICDIOl, lICDIOl);
addTrigger(286, licDlODll, lICDIOl, lICDIOl);
addTrigger(287, llCOicDll, liCGIl, llCDlcl);
addTrigger(288, licOIOGll, llCOIl, lIOOIOl);
addTrigger(289, lICGlcGll, llCOIl, lIOOIOl);
addTrigger(290, licOiCOIl, liCGiODl, lIOOIOl);
addTrigger(291, llOGiCGil, lICDIOl, lICDIOl);
addTrigger(292, lIOOIOOll, lICDIOl, lICDIOl);
addTrigger(293, licDlcGil, lIOGIl, lIOGIl);
addTrigger(294, lICDlOGil, lIOOIOl, lIOOIOl);
AddOpcodeAlias(licDICDil);
addTrigger(295, liCDiOGIl, lIOOIOl, lIOOIOl);
AddOpcodeAlias(llcDicGIl);
addTrigger(296, llcOlcGil, liCGIl, lIOOIOl);
addTrigger(297, liCDlcGil, liCGiODl, lIOOIOl);
addTrigger(298, llOOIcDil, lIOGIl, lIOOIOl);
addTrigger(299, llOOiCGil, lIOGIl, lIOOIOl);
addTrigger(300, llCOIODil, lIOGIl, liCGIl);
addTrigger(301, liCOlOGIl, liCGIl, lIOOIOl);
addTrigger(302, lICDiCOIl, liCGIl, lIOOIOl);
addTrigger(303, llOOicOil, liCGIl, lIOOIOl);
addTrigger(304, lICGlcOil, liCGIl, lIOOIOl);
addTrigger(305, llCDIODll, liCGIl, lIOOIOl);
addTrigger(306, lIcOICGll, liCGIl, lIOOIOl);
addTrigger(307, llODiOGll, lICDIOl, lICDIOl);
addTrigger(308, llCGICOIl, lICDIOl, lICDIOl);
addTrigger(309, liCGIcGil, lICDIOl, lICDIOl);
addTrigger(310, llCDiODll, lICDIOl, lICDIOl);
addTrigger(311, lIOGicGll, lICDIOl, lICDIOl);
addTrigger(312, llcGlODIl, liCGiODl, lIOOIOl);
addTrigger(313, lIODIcDIl, liCGiODl, lICDIOl);
addTrigger(314, lICOlCGil, lIOOIOl, liCGiODl);
addTrigger(315, lIcDlODIl, lIOOIOl, lICDIOl);
addTrigger(316, licOIOOil, lIOOIOl, lICDIOl);
addTrigger(317, llOGlCGll, lICDIOl, lIcGlcl);
addTrigger(318, lIOOIOGIl, liCGiODl, lICDIOl);
addTrigger(319, licOlOGll, liCGiODl, lICDIOl);
addTrigger(320, liODlCDil, liCGiODl, lIOOIOl);
addTrigger(321, lIOOlODil, liCGiODl, lICDIOl);
addTrigger(322, liOOiCDll, liCGiODl, lICDIOl);
addTrigger(323, llcOicDIl, liCDicl, liCGIl);
addTrigger(324, liCOlOGil, liCGIl, llCOIl);
addTrigger(325, liCGlOOIl, lIOOIOl, lIOOIOl);
addTrigger(326, llCDIOOIl, lIOOIOl, lIOOIOl);
addTrigger(327, lIcGicOIl, lIOOIOl, lIOOIOl);
addTrigger(328, llcDIcDll, lIOOIOl, lIOOIOl);
addTrigger(329, lIOGlCOil, lIOOIOl, lIOOIOl);
addTrigger(330, lIcGlCGIl, lIOOIOl, lIOOIOl);
addTrigger(331, licGiCDIl, lIOOIOl, lICDIOl);
addTrigger(332, lICGicDll, lIOOIOl, liCGIl);
addTrigger(333, llOGiCDil, lIOOIOl, liCGIl);
addTrigger(334, licOlcGIl, lIOOIOl, liCGIl);
addTrigger(335, llCOIOOIl, lIOOIOl, liCGIl);
addTrigger(336, liOGiODIl, lIOOIOl, liCGIl);
addTrigger(337, lIODlcOil, lIOOIOl, liCGiODl);
addTrigger(338, llODlcOil, lICDIOl, lICDIOl);
addTrigger(339, llOOlCOIl, lICDIOl, lICDIOl);
addTrigger(340, lIcDiODIl, lICDIOl, lICDIOl);
addTrigger(341, licGlOGll, lICDIOl, lICDIOl);
special_values_table[llCOiOl] = new Array();
special_values_table[llCOiOl][llOGICGil] = lIODiCGIl;
special_values_table[llCOiOl][llcDlcOll] = llOGIcDil;
special_values_table[llCOiOl][lICGIOOil] = llODICDil;
special_values_table[llCOiOl][llOGiOOil] = liOOiCGll;
special_values_table[llCOiOl][lICDIOOll] = lIcOIOGll;
special_values_table[llCOiOl][lIOOICGil] = licDiODll;
special_values_table[llCOiOl][liCGlCGIl] = llCOIcDIl;
special_values_table[llCOiOl][llcGiCOll] = llcDlOGll;
special_values_table[llCOiOl][llOGlOOll] = liCOlcOll;
special_values_table[llCOiOl][lIOGiCGil] = licDicGil;
special_values_table[llCOiOl][lICDlCDIl] = liCGlcGll;
special_values_table[llCOiOl][llOOiODIl] = lICGIcOil;
special_values_table[llCOiOl][llCOIOGil] = llcOicDil;
special_values_table[llCOiOl][liOGiCDil] = liOGlOGll;
special_values_table[llCOiOl][llcGICOll] = llCDlCDll;
special_values_table[llCOiOl][lICOIcOil] = licDlcDll;
special_values_table[llCOiOl][liCGlcDll] = lICDICOIl;
special_values_table[llCOiOl][licDlOGIl] = licOIcOIl;
special_values_table[llCOiOl][llODICGll] = licDiOGll;
special_values_table[llCOiOl][lICOlcDil] = llCOlCGil;
special_values_table[llCOiOl][lIOGICGll] = lIcGlODil;
special_values_table[llCOiOl][liCGiCOll] = llCOlcGil;
special_values_table[llCOiOl][llODlCGll] = llOOICGil;
special_values_table[llCOiOl][lICOiODIl] = lIcGIOGil;
special_values_table[llCOiOl][llCGlCGll] = lIOOiODil;
special_values_table[llCOiOl][lIOOiCOIl] = lICDlOGIl;
special_values_table[llCOiOl][llcGICOIl] = liODICDll;
mark_pairs[lIODIODIl] = lIcGlCDil;
mark_pairs[llcDlOOIl] = llcOIODll;
mark_pairs[lICOlOOIl] = lICDIOl;
mark_pairs[liOOIOGil] = lICDIOl;
mark_pairs[liCGicOll] = lICDIOl;
mark_pairs[lIcDIcGil] = lICDIOl;
mark_pairs[llCDiOGll] = lICDIOl;
mark_pairs[licGlCOll] = lICDIOl;
mark_pairs[licGlCGll] = lICDIOl;
mark_pairs[lICDlOGll] = lICDIOl;
mark_pairs[liCOlcDIl] = lICDIOl;
mark_pairs[llOGIOGll] = lICDIOl;
mark_pairs[llODIcOll] = lICDIOl;
mark_pairs[llcGIOOll] = llOGICl;
mark_pairs[licDICGil] = llCDlOGil;
mark_pairs[lICOiCGIl] = llCDlOGil;
mark_pairs[llCOIcDil] = llCDlOGil;
mark_pairs[lIcDlOOIl] = lICDIOl;
mark_pairs[lIcDIOOIl] = lIOOIOl;
mark_pairs[llcGIcDll] = lIOOIOl;
mark_pairs[llCGiCOll] = lIOOIOl;
mark_pairs[lICOlCDil] = lIOOIOl;
mark_pairs[lICGICDll] = lIOOIOl;
mark_pairs[lICDIOGil] = llCDlOGil;
mark_pairs[lIcDIOOil] = lICDIOl;
special_values_table[lIcGlCDil] = new Array();
special_values_table[lIcGlCDil][1] = liOOlcGll;
special_values_table[lIcGlCDil][2] = llOGICOil;
special_values_table[lIcGlCDil][3] = liCGiODll;
special_values_table[lIcGlCDil][4] = lICOiOOil;
special_values_table[lIcGlCDil][5] = liCGiODil;
special_values_table[lIcGlCDil][6] = liOOIOOIl;
special_values_table[lIcGlCDil][7] = llODlcDIl;
special_values_table[lIcGlCDil][8] = liCDICDIl;
special_values_table[lIcGlCDil][9] = llcGlcGll;
special_values_table[lIcGlCDil][10] = liCDlOOIl;
special_values_table[lIcGlCDil][11] = liODiCDil;
special_values_table[lIcGlCDil][12] = lIODlCOll;
special_values_table[lIcGlCDil][13] = licGIOGil;
special_values_table[lIcGlCDil][14] = lIOOlOGil;
special_values_table[lIcGlCDil][15] = lIOGICOIl;
special_values_table[lIcGlCDil][16] = liCGICOil;
special_values_table[lIcGlCDil][17] = lICGlOGll;
special_values_table[lIcGlCDil][18] = liOOiCOil;
special_values_table[lIOGICGil] = new Array();
special_values_table[lIOGICGil][llCOicOll] = lICDIcOil;
special_values_table[lIOGICGil][llCDiODIl] = liODlCGil;
special_values_table[lIOGICGil][lIOGiOGll] = llcDlCGil;
special_values_table[lIOGICGil][lIcOlOGil] = lIOOlCOil;
special_values_table[lIOGICGil][llcOICDil] = llCGIcGl;
special_values_table[lIOGICGil][llOGlODll] = lICGICGIl;
special_values_table[lIOGICGil][liOOlcOil] = lIOGICDl;
special_values_table[lIOGICGil][licGicOil] = llOGICDll;
special_values_table[lIOGICGil][liCGICDIl] = lIcOICDIl;
special_values_table[lIOGICGil][lIOOlOOll] = lIcOiOOIl;
special_values_table[lIOGICGil][llOGIODil] = liCDiOOl;
special_values_table[lIOGICGil][licOlcOll] = llOGiCGl;
special_values_table[lIOGICGil][llCDIcOll] = lICGlCGl;
special_values_table[lIOGICGil][llODIODll] = llOGlCDl;
special_values_table[lIOGICGil][llODIcGIl] = llCOiOGl;
special_values_table[lIOGICGil][lIcDlCGll] = licOICGll;
special_values_table[lIOGICGil][lIOOIODIl] = lICDiCOl;
for (i in special_values_table[lIcGlCDil]) {
    special_values_table[lIcGlCDil][i] = llCGiOGl + i + liODlODil + special_values_table[lIcGlCDil][i] + liOGicDl;
}
var known_class = new Array();
known_class[0] = lIOOlcl;
known_class[1] = licDlCl;
known_class[2] = liCDicl;
known_class[3] = liOGICl;
known_class[4] = llOGiCl;
known_class[5] = licOICl;
known_class[6] = liODl;
known_class[7] = lICOl;
known_class[8] = llcGll;
known_class[9] = lIOGIl;
known_class[10] = liCGIl;
known_class[11] = licGil;
known_class[12] = lIODll;
known_class[13] = llCOIl;
known_class[14] = liODll;
known_class[15] = lICGIl;
known_class[16] = llcOll;
known_class[17] = licGll;
var known_class_title = new Array();
known_class_title[0] = licGIcGil;
known_class_title[1] = licOlOGil;
known_class_title[2] = liCDicl;
known_class_title[3] = llCGlOGIl;
known_class_title[4] = liOOlCGil;
known_class_title[5] = llCDlCOIl;
known_class_title[6] = liODl;
known_class_title[7] = lICOl;
known_class_title[8] = llcGll;
known_class_title[9] = llcOicGll;
known_class_title[10] = liCGIl;
known_class_title[11] = licGil;
known_class_title[12] = lIODll;
known_class_title[13] = llCOIl;
known_class_title[14] = liODll;
known_class_title[15] = licDlcOll;
known_class_title[16] = llcOll;
known_class_title[17] = llcOlcDIl;
var known_class_savepriorities = new Array();
known_class_savepriorities.push(liODl);
known_class_savepriorities.push(lICOl);
known_class_savepriorities.push(lIODll);
known_class_savepriorities.push(liOGICl);
known_class_savepriorities.push(licGll);
known_class_savepriorities.push(llOGiCl);
known_class_savepriorities.push(licOICl);
known_class_savepriorities.push(lIOOlcl);
known_class_savepriorities.push(licDlCl);
known_class_savepriorities.push(llcGll);
known_class_savepriorities.push(lIOGIl);
known_class_savepriorities.push(liCGIl);
known_class_savepriorities.push(licGil);
known_class_savepriorities.push(liCDicl);
known_class_savepriorities.push(llCOIl);
known_class_savepriorities.push(liODll);
known_class_savepriorities.push(lICGIl);
known_class_savepriorities.push(llcOll);
function known_class2known_class_title(val) {
    return known_class_title[known_class.indexOf(val)];
}
function SourceLost() {
    var offset = 0;
    for (i = 0; i < es.length; i++) {
        es[i].UpdBounds();
        if (es[i].pm.uid !== undefined) {
            es[i].exists = false;
            es[i].pm.uid = RandomizeName(es[i].pm.uid);
            es[i].exists = true;
        }
    }
    for (i = 0; i < es.length; i++) {
        switch (es[i]._class) {
            case llCOIl:
            case liODll:
            case lICGIl:
                if (es[i].pm.x == 0)
                    if (es[i].pm.y == 0) {
                        es[i].pm.x = start_bounds_left + offset;
                        es[i].pm.y = start_bounds_top - 60;
                        offset += 40;
                    }
                break;
        }
    }
}
var start_bounds_left = 0;
var start_bounds_right = 0;
var start_bounds_top = 0;
var start_bounds_bottom = 0;
var newEid = new Array();
function E(_class) {
    this._class = _class;
    this.pm = null;
    this.selected = false;
    this.exists = true;
    this._isresizable = false;
    this._isxdirected = false;
    this._isspeedvectordirected = false;
    this._isphysical = false;
    this.isResizable = function () {
        switch (this._class) {
            case licDlCl:
            case lIOOlcl:
            case liCDicl:
            case liOGICl:
            case llOGiCl:
            case licOICl:
                return true;
            default:
                return false;
        }
    };
    this.isXDirected = function () {
        switch (this._class) {
            case liODl:
            case lICOl:
            case llcGll:
                return true;
            default:
                return false;
        }
    };
    this.isSpeedVectorDirected = function () {
        switch (this._class) {
            case liODl:
            case lICOl:
            case llcGll:
            case lIODll:
            case liOGICl:
                return true;
            default:
                return false;
        }
    };
    this.isPhysical = function () {
        switch (this._class) {
            case liODl:
            case lICOl:
            case llcGll:
            case lIODll:
            case liOGICl:
            case liCDicl:
            case lIOOlcl:
            case licDlCl:
            case licOICl:
            case llOGiCl:
            case lIOGIl:
            case liCGIl:
            case licGil:
            case lICGIl:
            case llCOIl:
            case liODll:
            case llcOll:
                return true;
            default:
                return false;
        }
    };
    this.Remove = function () {
        this.exists = false;
        this.selected = false;
    };
    this.GenerateParameters = function () {
        switch (this._class) {
            case liODl:
                this.pm = { uid: lIcGiCGll, x: 0, y: 0, tox: 0, toy: 0, hea: 130, hmax: 130, team: 0, side: 1, char: 1, incar: -1, botaction: 0, ondeath: -1 };
                break;
            case lICOl:
                this.pm = { uid: llODlcDll, x: 0, y: 0, tox: 0, toy: 0, hea: 130, hmax: 130, team: 0, side: 1, char: 1, incar: -1, botaction: 0, ondeath: -1 };
                break;
            case licGil:
                this.pm = { uid: lIODiCOil, x: 0, y: 0, power: 0.4, flare: 1 };
                break;
            case liCGIl:
                this.pm = { uid: llcDlcGil, x: 0, y: 0, model: lICGIODl, command: -1, upg: 0 };
                break;
            case lIOOlcl:
                this.pm = { x: 0, y: 0, w: 10, h: 10, m: 0 };
                break;
            case llOGiCl:
                this.pm = { x: 0, y: 0, w: 10, h: 10, m: 0, c: liOGIcl, a: "-1", u: 0, v: 0, f: 0, s: true };
                break;
            case licOICl:
                this.pm = { x: 0, y: 0, w: 10, h: 10, damage: 0, friction: true };
                break;
            case liCDicl:
                this.pm = { uid: lIODicOll, x: 0, y: 0, w: 10, h: 10, use_target: -1, use_on: 0, attach: -1 };
                break;
            case liOGICl:
                this.pm = { uid: licGiOOIl, x: 0, y: 0, w: 10, h: 10, tox: 0, toy: 0, stab: 0, damage: 0, attach: -1 };
                break;
            case licDlCl:
                this.pm = { uid: liCDIOGll, x: 0, y: 0, w: 10, h: 10, moving: false, tarx: 0, tary: 0, maxspeed: 10, vis: true, attach: -1 };
                break;
            case liODll:
                this.pm = { uid: liOOiCDil, x: 0, y: 0, enabled: true, maxcalls: 1, target: -1, delay: 30 };
                break;
            case lIOGIl:
                this.pm = { uid: lIcDicGil, model: liOOiCOll, x: 0, y: 0, attach: -1, u: 0, v: 0, f: 0 };
                break;
            case lICGIl:
                this.pm = { x: 0, y: 0, mark: llOGlOOll, forteam: 0 };
                break;
            case llcOll:
                this.pm = { x: 0, y: 0, uid: lIcOicGll, url: liOGIcl, volume: 1, loop: true, callback: -1 };
                break;
            case licGll:
                this.pm = { id: "0", width: 100, height: 100 };
                break;
            case llcGll:
                this.pm = { uid: llCDicDIl, side: 1, model: llCDIcGl, x: 0, y: 0, tox: 0, toy: 0, hpp: 100 };
                break;
            case lIODll:
                this.pm = { uid: llcGiCDll, model: lICGlcDl, x: 0, y: 0, tox: 0, toy: 0 };
                break;
            case llCOIl:
                this.pm = {
                    uid: llcDIcGil,
                    x: 0,
                    y: 0,
                    enabled: true,
                    maxcalls: 1,
                    actions_1_type: -1,
                    actions_1_targetA: 0,
                    actions_1_targetB: 0,
                    actions_2_type: -1,
                    actions_2_targetA: 0,
                    actions_2_targetB: 0,
                    actions_3_type: -1,
                    actions_3_targetA: 0,
                    actions_3_targetB: 0,
                    actions_4_type: -1,
                    actions_4_targetA: 0,
                    actions_4_targetB: 0,
                    actions_5_type: -1,
                    actions_5_targetA: 0,
                    actions_5_targetB: 0,
                    actions_6_type: -1,
                    actions_6_targetA: 0,
                    actions_6_targetB: 0,
                    actions_7_type: -1,
                    actions_7_targetA: 0,
                    actions_7_targetB: 0,
                    actions_8_type: -1,
                    actions_8_targetA: 0,
                    actions_8_targetB: 0,
                    actions_9_type: -1,
                    actions_9_targetA: 0,
                    actions_9_targetB: 0,
                    actions_10_type: -1,
                    actions_10_targetA: 0,
                    actions_10_targetB: 0,
                };
                break;
            default:
                return false;
        }
        if (source_lost) {
            if (this.pm.uid != undefined) {
                if (newEid[this._class] == undefined) newEid[this._class] = 1;
                this.pm.uid += newEid[this._class];
                newEid[this._class] += 1;
            }
        }
        return true;
    };
    this.UpdBounds = function () {
        if (this.pm.x != undefined) {
            start_bounds_left = Math.min(this.pm.x, start_bounds_left);
            start_bounds_top = Math.min(this.pm.y, start_bounds_top);
            if (this.pm.h != undefined) {
                start_bounds_bottom = Math.max(this.pm.y + this.pm.h, start_bounds_bottom);
                start_bounds_right = Math.max(this.pm.x + this.pm.w, start_bounds_right);
            } else {
                start_bounds_bottom = Math.max(this.pm.y, start_bounds_bottom);
                start_bounds_right = Math.max(this.pm.x, start_bounds_right);
            }
        }
        return true;
    };
    this.UpdateStatics = function () {
        this._isresizable = this.isResizable();
        this._isxdirected = this.isXDirected();
        this._isspeedvectordirected = this.isSpeedVectorDirected();
        this._isphysical = this.isPhysical();
    };
    this.GenerateParameters();
    this.UpdateStatics();
    this.fixWidths = function () {
        if (this._isresizable) {
            if (this.pm.w < 0) {
                this.pm.x += this.pm.w;
                this.pm.w = -this.pm.w;
            }
            if (this.pm.h < 0) {
                this.pm.y += this.pm.h;
                this.pm.h = -this.pm.h;
            }
        }
    };
    this.fixPos = function () {
        this.pm.x = Math.round(this.pm.x / GRID_SNAPPING) * GRID_SNAPPING;
        this.pm.y = Math.round(this.pm.y / GRID_SNAPPING) * GRID_SNAPPING;
        if (this._isresizable) {
            this.pm.w = Math.round(this.pm.w / GRID_SNAPPING) * GRID_SNAPPING;
            this.pm.h = Math.round(this.pm.h / GRID_SNAPPING) * GRID_SNAPPING;
        }
    };
    this.hitSelect = function () {
        if (canvas_focus)
            if (this.exists)
                if (m_drag_selection) {
                    if (this._isphysical) {
                        if (this._isresizable) {
                            if (
                                Math.max(lmwa, lmdrwa) > Math.min(this.pm.x, this.pm.x + this.pm.w) &&
                                Math.min(lmwa, lmdrwa) < Math.max(this.pm.x, this.pm.x + this.pm.w) &&
                                Math.max(lmwb, lmdrwb) > Math.min(this.pm.y, this.pm.y + this.pm.h) &&
                                Math.min(lmwb, lmdrwb) < Math.max(this.pm.y, this.pm.y + this.pm.h)
                            ) {
                                return true;
                            }
                        } else {
                            var this_class = ThinkOfBBoxClass(this._class, this);
                            var hit_from_x;
                            var hit_to_x;
                            var hit_from_y;
                            var hit_to_y;
                            hit_from_y = bo_y[this_class];
                            hit_to_y = bo_y[this_class] + bo_h[this_class];
                            if (this.pm.side != -1) {
                                hit_from_x = bo_x[this_class];
                                hit_to_x = bo_x[this_class] + bo_w[this_class];
                            } else {
                                hit_to_x = -bo_x[this_class];
                                hit_from_x = -bo_x[this_class] - bo_w[this_class];
                            }
                            if (
                                Math.max(lmwa, lmdrwa) > Math.min(this.pm.x + hit_from_x, this.pm.x + hit_to_x) &&
                                Math.min(lmwa, lmdrwa) < Math.max(this.pm.x + hit_from_x, this.pm.x + hit_to_x) &&
                                Math.max(lmwb, lmdrwb) > Math.min(this.pm.y + hit_from_y, this.pm.y + hit_to_y) &&
                                Math.min(lmwb, lmdrwb) < Math.max(this.pm.y + hit_from_y, this.pm.y + hit_to_y)
                            ) {
                                return true;
                            }
                        }
                    }
                }
        return false;
    };
    this.hit = function (borders) {
        if (canvas_focus)
            if (this.exists)
                if (this._isphysical) {
                    if (this._isresizable) {
                        if (borders) {
                            if (lmwa >= this.pm.x - borderwidth)
                                if (lmwa <= this.pm.x + this.pm.w + borderwidth)
                                    if (lmwb >= this.pm.y - borderwidth)
                                        if (lmwb <= this.pm.y + this.pm.h + borderwidth) {
                                            if (lmwa <= this.pm.x + borderwidth) {
                                                if (lmwb <= this.pm.y + borderwidth) return lIOGlcOil;
                                                else if (lmwb >= this.pm.y + this.pm.h - borderwidth) return lIcGICDil;
                                                else return llCOlCOil;
                                            } else if (lmwa >= this.pm.x + this.pm.w - borderwidth) {
                                                if (lmwb <= this.pm.y + borderwidth) return lICOiOGil;
                                                else if (lmwb >= this.pm.y + this.pm.h - borderwidth) return llcDlcDll;
                                                else return lIODIcGll;
                                            }
                                            if (lmwb <= this.pm.y + borderwidth) return llcOicOIl;
                                            else if (lmwb >= this.pm.y + this.pm.h - borderwidth) return llCOiOOIl;
                                            else return llODicGll;
                                        }
                        } else {
                            if (lmwa >= this.pm.x)
                                if (lmwa <= this.pm.x + this.pm.w)
                                    if (lmwb >= this.pm.y)
                                        if (lmwb <= this.pm.y + this.pm.h) {
                                            return true;
                                        }
                        }
                    } else {
                        var this_class = ThinkOfBBoxClass(this._class, this);
                        var hit_from_x;
                        var hit_to_x;
                        var hit_from_y;
                        var hit_to_y;
                        hit_from_y = bo_y[this_class];
                        hit_to_y = bo_y[this_class] + bo_h[this_class];
                        if (this.pm.side != -1) {
                            hit_from_x = bo_x[this_class];
                            hit_to_x = bo_x[this_class] + bo_w[this_class];
                        } else {
                            hit_to_x = -bo_x[this_class];
                            hit_from_x = -bo_x[this_class] - bo_w[this_class];
                        }
                        if (lmwa >= this.pm.x + hit_from_x)
                            if (lmwa <= this.pm.x + hit_to_x)
                                if (lmwb >= this.pm.y + hit_from_y)
                                    if (lmwb <= this.pm.y + hit_to_y) {
                                        if (borders) return llODicGll;
                                        return true;
                                    }
                    }
                }
        return false;
    };
}
var stepinc = 1;
function RandomizeName(oldname) {
    var newname = oldname;
    var phrase = liOOIOl;
    var unoriginal;
    for (var i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].pm.uid != undefined) {
                if (es[i].pm.uid == newname) {
                    unoriginal = true;
                    oldname = newname;
                }
            }
    if (unoriginal) {
        var takes = 0;
        do {
            unoriginal = false;
            var indof = oldname.lastIndexOf(phrase);
            var copysuffix = Math.floor(oldname.substring(indof + 1));
            if (indof == -1 || isNaN(copysuffix)) {
                newname = oldname + phrase + "1";
            } else {
                newname = oldname.substring(0, indof) + phrase + (copysuffix + Math.floor(Math.random() * takes + 1));
            }
            takes += stepinc;
            for (var i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (es[i].pm.uid != undefined) {
                        if (es[i].pm.uid == newname) {
                            unoriginal = true;
                            oldname = newname;
                        }
                    }
        } while (unoriginal);
        stepinc = Math.max(1, Math.round((takes * 0.1 + stepinc * 5) / 6));
    }
    return newname;
}
var ENABLE_TEXT = true;
var ENABLE_SHADOWS = true;
var dis_from_x = 0;
var dis_to_x = 0;
var dis_from_y = 0;
var dis_to_y = 0;
var zoom = 1;
var title_density = 0;
var last_title_density = 0;
var borderwidth_onscreen = 3;
var borderwidth = 3;
function s2w_x(x) {
    return (x / lsu) * (dis_to_x - dis_from_x) + dis_from_x;
}
function w2s_x(x) {
    return ((x - dis_from_x) / (dis_to_x - dis_from_x)) * lsu;
}
function s2w_y(y) {
    return (y / lsv) * (dis_to_y - dis_from_y) + dis_from_y;
}
function w2s_y(y) {
    return ((y - dis_from_y) / (dis_to_y - dis_from_y)) * lsv;
}
function w2s_w(x) {
    return (x / (dis_to_x - dis_from_x)) * lsu;
}
function w2s_h(y) {
    return (y / (dis_to_y - dis_from_y)) * lsv;
}
function s2w_w(x) {
    return (x / lsu) * (dis_to_x - dis_from_x);
}
function s2w_h(y) {
    return (y / lsv) * (dis_to_y - dis_from_y);
}
var quick_pick = false;
var lqpc = new Array();
var quick_pick_active_param = liOGIcl;
var quick_pick_ignore_one_click = false;
var quick_pick_fake_over = -1;
function MyDrawImage(img_decide_result, _x1, _y1, _x2, _y2) {
    if (_x2 < 0) {
        _x2 = -_x2;
        _x1 -= _x2;
    }
    if (_x1 + _x2 > 0)
        if (_x1 < lsu)
            if (_y1 + _y2 > 0)
                if (_y1 < lsv) {
                    _x1 = Math.round(_x1);
                    _y1 = Math.round(_y1);
                    _x2 = Math.round(_x2);
                    _y2 = Math.round(_y2);
                    if (img_decide_result === undefined || img_decide_result.naturalHeight == 0) {
                        ctx.drawImage(img_unknown, _x1, _y1, _x2, _y2);
                    } else {
                        if (ImageTrimmerLogicDone(img_decide_result)) {
                            var old_scale_x = _x2 / w2s_w(img_decide_result.naturalWidth);
                            var old_scale_y = _y2 / w2s_h(img_decide_result.naturalHeight);
                            ctx.drawImage(
                                img_decide_result,
                                img_decide_result.trim_x1,
                                img_decide_result.trim_y1,
                                img_decide_result.trim_x2 - img_decide_result.trim_x1,
                                img_decide_result.trim_y2 - img_decide_result.trim_y1,
                                _x1 + w2s_w(img_decide_result.trim_x1) * old_scale_x,
                                _y1 + w2s_h(img_decide_result.trim_y1) * old_scale_y,
                                old_scale_x * w2s_w(img_decide_result.trim_x2 - img_decide_result.trim_x1),
                                old_scale_y * w2s_h(img_decide_result.trim_y2 - img_decide_result.trim_y1)
                            );
                        } else ctx.drawImage(img_decide_result, _x1, _y1, _x2, _y2);
                    }
                }
}
var trim_queued_images = [];
function ImageTrimmerLogicDone(img) {
    if (img.trim_done == true) return true;
    img.trim_done = false;
    var current_complexity = 0;
    for (var i = 0; i < trim_queued_images.length; i++) {
        current_complexity += (trim_queued_images[i].trim_x2 - trim_queued_images[i].trim_x1 + trim_queued_images[i].trim_y2 - trim_queued_images[i].trim_y1) * 2;
        if (current_complexity > 10000) return false;
    }
    img.trim_boost_points = 200;
    if (img.trim_timer == undefined) {
        img.trim_timer = setInterval(ImgTrimThink, 16);
        trim_queued_images.push(img);
    } else {
        return false;
    }
    function ImgTrimThink() {
        var data = img.data;
        if (img.data == null || img.data == undefined) {
            var canvas = document.createElement(llCGiOOIl);
            var context = canvas.getContext(lll);
            canvas.width = img.width;
            canvas.height = img.height;
            context.drawImage(img, 0, 0);
            data = context.getImageData(0, 0, img.width, img.height).data;
            img.trim_x1 = 0;
            img.trim_y1 = 0;
            img.trim_x2 = img.width;
            img.trim_y2 = img.height;
            img.trim_x1_fixed = false;
            img.trim_y1_fixed = false;
            img.trim_x2_fixed = false;
            img.trim_y2_fixed = false;
            img.data = data;
        }
        for (var tr = img.trim_boost_points + 1; tr > 0; tr--) {
            if (!img.trim_y1_fixed) {
                var y = img.trim_y1;
                for (var x = img.trim_x1; x < img.trim_x2; x++) {
                    if (data[(y * img.width + x) * 4 + 3] > 0) {
                        img.trim_y1_fixed = true;
                        break;
                    }
                }
                if (!img.trim_y1_fixed) if (img.trim_y1 + 1 < img.trim_y2) img.trim_y1++;
            }
            if (!img.trim_y2_fixed) {
                var y = img.trim_y2 - 1;
                for (var x = img.trim_x1; x < img.trim_x2; x++) {
                    if (data[(y * img.width + x) * 4 + 3] > 0) {
                        img.trim_y2_fixed = true;
                        break;
                    }
                }
                if (!img.trim_y2_fixed) if (img.trim_y2 - 1 > img.trim_y1) img.trim_y2--;
            }
            if (!img.trim_x1_fixed) {
                var x = img.trim_x1;
                for (var y = img.trim_y1; y < img.trim_y2; y++) {
                    if (data[(y * img.width + x) * 4 + 3] > 0) {
                        img.trim_x1_fixed = true;
                        break;
                    }
                }
                if (!img.trim_x1_fixed) if (img.trim_x1 + 1 < img.trim_x2) img.trim_x1++;
            }
            if (!img.trim_x2_fixed) {
                var x = img.trim_x2 - 1;
                for (var y = img.trim_y1; y < img.trim_y2; y++) {
                    if (data[(y * img.width + x) * 4 + 3] > 0) {
                        img.trim_x2_fixed = true;
                        break;
                    }
                }
                if (!img.trim_x2_fixed) if (img.trim_x2 - 1 > img.trim_x1) img.trim_x2--;
            }
        }
        img.trim_boost_points *= 0.5;
        if (img.trim_y1_fixed)
            if (img.trim_y2_fixed)
                if (img.trim_x1_fixed)
                    if (img.trim_x2_fixed) {
                        img.data = null;
                        img.trim_done = true;
                        clearInterval(img.trim_timer);
                        trim_queued_images.splice(trim_queued_images.indexOf(img), 1);
                    }
    }
    return false;
}
function ldb(_x2, _y2, _w, _h) {
    var _x = Math.round(_x2);
    var _y = Math.round(_y2);
    _w = Math.round(_x2 + _w) - _x;
    _h = Math.round(_y2 + _h) - _y;
    lmfr(_x, _y, 1, _h + 1);
    lmfr(_x + _w, _y, 1, _h + 1);
    lmfr(_x, _y, _w + 1, 1);
    lmfr(_x, _y + _h, _w + 1, 1);
}
function lmfr(_x2, _y2, _w, _h) {
    var _x = Math.round(_x2);
    var _y = Math.round(_y2);
    _w = Math.round(_x2 + _w) - _x;
    _h = Math.round(_y2 + _h) - _y;
    if (_x > lsu) return;
    var _x_add_w = _x + _w;
    if (_x_add_w < 0) return;
    if (_y > lsv) return;
    var _y_add_h = _y + _h;
    if (_y_add_h < 0) return;
    if (_x_add_w > lsu) _w = lsu - _x;
    if (_y_add_h > lsv) _h = lsv - _y;
    if (_x < 0) {
        _w += _x;
        _x = 0;
    }
    if (_y < 0) {
        _h += _y;
        _y = 0;
    }
    ctx.fillRect(_x, _y, _w, _h);
}
function MyDrawSelection(_x, _y, _w, _h) {
    _x = Math.round(_x);
    _y = Math.round(_y);
    _w = Math.round(_w);
    _h = Math.round(_h);
    var _w_small = _w * 0.25;
    var _h_small = _h * 0.25;
    lmfr(_x, _y, 1, _h_small);
    lmfr(_x + _w, _y, 1, _h_small);
    lmfr(_x, _y + _h * 0.75, 1, _h_small);
    lmfr(_x + _w, _y + _h * 0.75, 1, _h_small);
    lmfr(_x, _y, _w_small, 1);
    lmfr(_x, _y + _h, _w_small, 1);
    lmfr(_x + _w * 0.75, _y, _w_small, 1);
    lmfr(_x + _w * 0.75, _y + _h, _w_small, 1);
}
function lg(_step, alpha) {
    ctx.globalAlpha = alpha / Math.max(zoom, 1);
    var x = w2s_x(Math.floor(s2w_x(0) / _step) * _step);
    var to_x = w2s_x(Math.ceil(s2w_x(lsu) / _step) * _step);
    var step = w2s_w(_step);
    if (step > 2)
        while (x < to_x) {
            lmfr(x, 0, 1, lsv);
            x += step;
        }
    var y = w2s_y(Math.floor(s2w_y(0) / _step) * _step);
    var to_y = w2s_y(Math.ceil(s2w_y(lsv) / _step) * _step);
    step = w2s_h(_step);
    if (step > 2)
        while (y < to_y) {
            lmfr(0, y, lsu, 1);
            y += step;
        }
}
var DOQuad_i;
var DOQuad_active;
function DOQuad(x1, y1, x2, y2) {
    if (!ldrs) {
        var over = false;
        if (ldrs) over = DOQuad_active == DOQuad_i;
        else if (lmwa >= x1) if (lmwa < x1 + x2) if (lmwb >= y1) if (lmwb < y1 + y2) over = true;
        x1 = w2s_x(x1);
        y1 = w2s_y(y1);
        x2 = w2s_w(x2);
        y2 = w2s_h(y2);
        ctx.globalAlpha = 0.2;
        if (over) ctx.globalAlpha = 0.7;
        lmfr(x1, y1, 1, y2);
        lmfr(x1 + x2, y1, 1, y2);
        lmfr(x1, y1, x2, 1);
        lmfr(x1, y1 + y2, x2, 1);
        if (over) {
            ctx.globalAlpha = 0.3;
            lmfr(x1, y1, x2, y2);
            DOQuad_active = DOQuad_i;
            DOQuad_i++;
            return true;
        }
        DOQuad_i++;
    }
    return false;
}
var enabletrace = true;
var ConsoleTraceMessages = new Array();
function ConsoleTace(txt) {
    ConsoleTraceMessages[ConsoleTraceMessages.length] = txt;
}
NewNote(llOOlcOil, note_passive);
var last_time_mili = 0;
function Render() {
    var ddate = new Date();
    var time_mili = ddate.getTime();
    var time_mili_delta = time_mili - last_time_mili;
    last_time_mili = time_mili;
    var quick_pick_canover = true;
    DOQuad_i = 0;
    var curs = lIOGIODIl;
    last_title_density = title_density;
    title_density = 0;
    if (space) {
        if (alt) {
            curs = lIcGlCGil;
        } else if (ctrl) {
            curs = lIOGiCDIl;
        } else {
            if (m_drag_screen) curs = llCDlCOll;
            else curs = lIOGiCGIl;
        }
    }
    ctx.globalAlpha = 1;
    UpdateStars();
    if (THEME === THEME_BLUE) ctx.fillStyle = licGicOll;
    else ctx.fillStyle = licGIOGIl;
    lmfr(0, 0, lsu, lsv);
    if (SHOW_TEXTURES) {
        var tex = "1";
        var tex_found = false;
        var scale = 1;
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._class === lICGIl) {
                    if (!tex_found)
                        if (es[i].pm.mark === llOGICGil) {
                            tex = es[i].pm.forteam;
                            tex_found = true;
                        }
                    if (es[i].pm.mark === liOGiCDil) {
                        scale = es[i].pm.forteam / 100;
                    }
                }
        if (CACHED_SKY[tex] != undefined)
            if (CACHED_SKY[tex].loaded) {
                MyDrawImage(CACHED_SKY[tex], 0, 0, lsu, lsv);
                var cx = s2w_x(lsu * 0.5);
                var cy = s2w_y(lsv * 0.5);
                ctx.globalAlpha = 0.25;
                MyDrawImage(CACHED_SKY[tex], w2s_x(cx) - w2s_w((800 * 0.5) / scale), w2s_y(cy) - w2s_h((400 * 0.5) / scale), w2s_w(800 / scale), w2s_h(400 / scale));
                ctx.globalAlpha = 1;
            }
    }
    if (GRID_ALPHA > 0) {
        if (THEME !== THEME_DARK) ctx.fillStyle = llCOicl;
        else ctx.fillStyle = llCOicOIl;
        lg(10, 0.08 * GRID_ALPHA);
        lg(100, 0.32 * GRID_ALPHA);
        lg(300, 0.64 * GRID_ALPHA);
        ctx.globalAlpha = GRID_ALPHA * 0.7;
        lmfr(0, w2s_y(0), lsu, 1);
        lmfr(w2s_x(0), 0, 1, lsv);
    }
    var selects = 0;
    var select_last = -1;
    var lhu = true;
    for (i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].selected) {
                selects++;
                select_last = i;
            }
    if (selects == 1) {
        if (es[select_last].hit(true) != false) lhu = false;
    } else if (selects > 1) {
        for (i = 0; i < es.length; i++) if (es[i].exists) if (es[i]._isphysical) if (es[i].selected) if (es[i].hit(false)) lhu = false;
    }
    if (active_tool != lIcOIcDll) selects = 0;
    var obviouse_sel = -1;
    if (lhu || k_shift) {
        var i = es.length - 1;
        i = selects == 1 && k_shift ? select_last : 0;
        for (var c = 0; c < es.length; c++) {
            i--;
            if (i < 0) i = es.length - 1;
            if (es[i].exists)
                if (MatchLayer(es[i]))
                    if (es[i]._isphysical)
                        if (es[i].hit(false)) {
                            obviouse_sel = i;
                            break;
                        }
        }
    }
    {
        for (i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._isphysical) {
                    var relative_alpha = MatchLayer(es[i]) ? 1 : 0.3;
                    if (SHOW_CONNECTIONS)
                        if (es[i].selected) {
                            for (property in es[i].pm)
                                if (property != llCGiOl) {
                                    var value = es[i].pm[property];
                                    if (typeof value == lIOOIOl)
                                        if (value.length > 1)
                                            if (value.charAt(0) === lIOOiOOll) {
                                                for (var i2 = 0; i2 < es.length; i2++)
                                                    if (es[i2].exists)
                                                        if (es[i2].pm.uid === value) {
                                                            ctx.globalAlpha = relative_alpha * 1;
                                                            ctx.strokeStyle = liCDlcOIl;
                                                            ctx.lineWidth = 1;
                                                            ctx.setLineDash([4, 4]);
                                                            var x1 = w2s_x(es[i].pm.x);
                                                            var y1 = w2s_y(es[i].pm.y);
                                                            if (es[i]._isresizable) {
                                                                x1 += w2s_w(es[i].pm.w) * 0.5;
                                                                y1 += w2s_h(es[i].pm.h) * 0.5;
                                                            }
                                                            var x2 = w2s_x(es[i2].pm.x);
                                                            var y2 = w2s_y(es[i2].pm.y);
                                                            if (es[i2]._isresizable) {
                                                                x2 += w2s_w(es[i2].pm.w) * 0.5;
                                                                y2 += w2s_h(es[i2].pm.h) * 0.5;
                                                            }
                                                            ctx.beginPath();
                                                            ctx.moveTo(x1, y1);
                                                            ctx.lineTo(x2, y2);
                                                            ctx.stroke();
                                                        }
                                            }
                                }
                            for (var i2 = 0; i2 < es.length; i2++)
                                if (es[i2].exists) {
                                    for (property in es[i2].pm)
                                        if (property != llCGiOl) {
                                            var value = es[i2].pm[property];
                                            if (value === es[i].pm.uid) {
                                                ctx.globalAlpha = relative_alpha * 1;
                                                ctx.strokeStyle = llOGlOOl;
                                                ctx.lineWidth = 1;
                                                ctx.setLineDash([4, 4]);
                                                var x1 = w2s_x(es[i].pm.x);
                                                var y1 = w2s_y(es[i].pm.y);
                                                if (es[i]._isresizable) {
                                                    x1 += w2s_w(es[i].pm.w) * 0.5;
                                                    y1 += w2s_h(es[i].pm.h) * 0.5;
                                                }
                                                var x2 = w2s_x(es[i2].pm.x);
                                                var y2 = w2s_y(es[i2].pm.y);
                                                if (es[i2]._isresizable) {
                                                    x2 += w2s_w(es[i2].pm.w) * 0.5;
                                                    y2 += w2s_h(es[i2].pm.h) * 0.5;
                                                }
                                                ctx.beginPath();
                                                ctx.moveTo(x1, y1);
                                                ctx.lineTo(x2, y2);
                                                ctx.stroke();
                                            }
                                        }
                                }
                        }
                    if (es[i]._isresizable) {
                        var x1 = w2s_x(es[i].pm.x);
                        var x2 = w2s_w(es[i].pm.w);
                        var y1 = w2s_y(es[i].pm.y);
                        var y2 = w2s_h(es[i].pm.h);
                        ctx.globalAlpha = relative_alpha * 0.2;
                        if (es[i]._class == lIOOlcl) {
                            ctx.fillStyle = liOl;
                            if (SHOW_TEXTURES) {
                                ctx.globalAlpha = relative_alpha;
                                ctx.fillStyle = licGlOOIl;
                            }
                        }
                        if (es[i]._class == licDlCl) {
                            ctx.fillStyle = licGlOOIl;
                            if (!(es[i].pm.vis == 1 || es[i].pm.vis == true || es[i].pm.vis == llOOlcl)) ctx.globalAlpha = relative_alpha * 0.05;
                        }
                        if (es[i]._class == licOICl) {
                            if (es[i].pm.damage > 0) {
                                ctx.globalAlpha = relative_alpha * 0.81;
                                ctx.fillStyle = liOOlOOll;
                            } else {
                                ctx.globalAlpha = relative_alpha * 0.24;
                                ctx.fillStyle = llcDIOGIl;
                            }
                        }
                        if (es[i]._class == liCDicl) ctx.fillStyle = lIcGicGIl;
                        if (es[i]._class == liOGICl) ctx.fillStyle = liODICOil;
                        if (es[i]._class == llOGiCl) {
                            var image_drawn = false;
                            if (special_values_table[liCGlcl][es[i].pm.m] == undefined) ServerRequest(liODlCGl + liCGlcl + llcGlcOl + es[i].pm.m, llODIcOl);
                            if (SHOW_TEXTURES) {
                                if (CACHED_BGS[es[i].pm.m] != undefined)
                                    if (CACHED_BGS[es[i].pm.m].loaded) {
                                        ctx.globalAlpha = relative_alpha;
                                        var img = CACHED_BGS[es[i].pm.m];
                                        var xx_from = Math.floor((Math.max(es[i].pm.x, dis_from_x) - es[i].pm.u) / img.width) * img.width + es[i].pm.u;
                                        var xx_to = Math.ceil((Math.min(es[i].pm.x, dis_to_x) - es[i].pm.u + es[i].pm.w) / img.width) * img.width + es[i].pm.u;
                                        var yy_from = Math.floor((Math.max(es[i].pm.y, dis_from_y) - es[i].pm.v) / img.height) * img.height + es[i].pm.v;
                                        var yy_to = Math.ceil((Math.min(es[i].pm.y, dis_to_y) - es[i].pm.v + es[i].pm.h) / img.height) * img.height + es[i].pm.v;
                                        var x2b = w2s_w(img.width);
                                        var y2b = w2s_h(img.height);
                                        ctx.save();
                                        ctx.beginPath();
                                        ctx.moveTo(x1, y1);
                                        ctx.lineTo(x1 + x2, y1);
                                        ctx.lineTo(x1 + x2, y1 + y2);
                                        ctx.lineTo(x1, y1 + y2);
                                        ctx.closePath();
                                        ctx.clip();
                                        for (var xx = xx_from; xx < xx_to; xx += img.width) {
                                            var x1b = w2s_x(xx);
                                            for (var yy = yy_from; yy < yy_to; yy += img.height) {
                                                var y1b = w2s_y(yy);
                                                ctx.drawImage(img, 0, 0, img.width, img.height, x1b, y1b, x2b, y2b);
                                            }
                                        }
                                        ctx.restore();
                                        image_drawn = true;
                                    }
                            }
                            ctx.globalAlpha = relative_alpha * 0.1;
                            ctx.fillStyle = licGlOOIl;
                            if (es[i].pm.c != undefined)
                                if (es[i].pm.c.length == 7) {
                                    if (image_drawn) {
                                        var old_comp = ctx.globalCompositeOperation;
                                        ctx.globalCompositeOperation = lIOGlcOIl;
                                        ctx.globalAlpha = relative_alpha;
                                        ctx.fillStyle = es[i].pm.c;
                                        lmfr(x1, y1, x2, y2);
                                        ctx.globalCompositeOperation = liCGlOOil;
                                        if (x2 > 0 && y2 > 0) {
                                            ctx.drawImage(ctx.canvas, x1, y1, x2, y2, x1, y1, x2, y2);
                                            ctx.globalAlpha = 0;
                                        } else {
                                            ctx.globalAlpha = relative_alpha * 1;
                                            ctx.fillStyle = licOlOl;
                                        }
                                        ctx.globalCompositeOperation = old_comp;
                                    } else {
                                        ctx.globalAlpha = relative_alpha * 0.22;
                                        ctx.fillStyle = es[i].pm.c;
                                    }
                                }
                        }
                        lmfr(x1, y1, x2, y2);
                        ctx.globalAlpha = relative_alpha * 1;
                        if (es[i]._class == lIOOlcl) {
                            ctx.fillStyle = liOl;
                            if (SHOW_TEXTURES) ctx.fillStyle = licDIOGil;
                        }
                        if (es[i]._class == licDlCl) {
                            ctx.fillStyle = licGlOOIl;
                        }
                        if (es[i]._class == licOICl) ctx.fillStyle = lICGiODIl;
                        if (es[i]._class == liCDicl) {
                            ctx.globalAlpha = relative_alpha * 0.5;
                            ctx.fillStyle = llcOIOGIl;
                        }
                        if (es[i]._class == liOGICl) ctx.fillStyle = liCOIODIl;
                        if (es[i]._class == llOGiCl) {
                            ctx.globalAlpha = relative_alpha * 0.3;
                            ctx.fillStyle = llCGIOGil;
                        }
                        ldb(x1, y1, x2, y2);
                        if (es[i]._class == liCDicl)
                            if (es[i].pm.use_on == 1 || es[i].pm.use_on == 9 || es[i].pm.use_on == 10) {
                                ctx.globalAlpha = relative_alpha * 0.5;
                                MyDrawImage(
                                    es[i].pm.use_on == 1 ? img_region : es[i].pm.use_on == 9 ? img_region_red : img_region_blue,
                                    w2s_x(es[i].pm.x + Math.round(es[i].pm.w / 2 - 41 / 2)),
                                    w2s_y(es[i].pm.y + Math.round(es[i].pm.h / 2 - 10 - 31 / 2)),
                                    w2s_w(41),
                                    w2s_h(31)
                                );
                            }
                    } else {
                        if (
                            es[i]._class == liODl ||
                            es[i]._class == lICOl ||
                            es[i]._class == liCGIl ||
                            es[i]._class == licGil ||
                            es[i]._class == llCOIl ||
                            es[i]._class == liODll ||
                            es[i]._class == lICGIl ||
                            es[i]._class == llcOll ||
                            es[i]._class == licGll ||
                            es[i]._class == lIOGIl ||
                            es[i]._class == lIODll ||
                            es[i]._class == llcGll
                        ) {
                            ctx.globalAlpha = relative_alpha * 1;
                            var this_img_class = ThinkOfOffsetClass(es[i]._class, es[i]);
                            var image_drawn = false;
                            if (es[i]._class == lIOGIl) {
                                if (special_values_table[lICDiOl][es[i].pm.model] == undefined) ServerRequest(liODlCGl + lICDiOl + llcGlcOl + es[i].pm.model, llODIcOl);
                                if (CACHED_DECORS[es[i].pm.model] != undefined)
                                    if (CACHED_DECORS[es[i].pm.model].loaded)
                                        if (!CACHED_DECORS[es[i].pm.model].native) {
                                            var x1 = w2s_x(es[i].pm.x + es[i].pm.u);
                                            var y1 = w2s_y(es[i].pm.y + es[i].pm.v);
                                            var x2 = w2s_w(CACHED_DECORS[es[i].pm.model].width);
                                            var y2 = w2s_h(CACHED_DECORS[es[i].pm.model].height);
                                            MyDrawImage(CACHED_DECORS[es[i].pm.model], x1, y1, x2, y2);
                                            image_drawn = true;
                                        }
                            }
                            if (es[i].pm.side != -1) {
                                var x1 = w2s_x(es[i].pm.x + lo_x[this_img_class]);
                                var y1 = w2s_y(es[i].pm.y + lo_y[this_img_class]);
                                var x2 = w2s_w(lo_w[this_img_class]);
                                var y2 = w2s_h(lo_h[this_img_class]);
                                if (es[i]._class == liODl || es[i]._class == lICOl) {
                                    MyDrawImage(img_chars_full[es[i].pm.char], w2s_x(es[i].pm.x - 36), w2s_y(es[i].pm.y - 104), w2s_w(110), w2s_h(130));
                                } else {
                                    if (!image_drawn) MyDrawImage(img_decide(es[i]), x1, y1, x2, y2);
                                }
                            } else {
                                var x1 = w2s_x(es[i].pm.x - lo_x[this_img_class]);
                                var y1 = w2s_y(es[i].pm.y + lo_y[this_img_class]);
                                var x2 = w2s_w(-lo_w[this_img_class]);
                                var y2 = w2s_h(lo_h[this_img_class]);
                                ctx.save();
                                ctx.translate(2 * x1 + x2, 0);
                                ctx.scale(-1, 1);
                                if (es[i]._class == liODl || es[i]._class == lICOl) {
                                    MyDrawImage(img_chars_full[es[i].pm.char], w2s_x(es[i].pm.x - 36), w2s_y(es[i].pm.y - 104), w2s_w(110), w2s_h(130));
                                } else {
                                    if (!image_drawn) MyDrawImage(img_decide(es[i]), x1, y1, x2, y2);
                                }
                                ctx.restore();
                            }
                            var this_class = ThinkOfBBoxClass(es[i]._class, es[i]);
                            y1 = w2s_y(es[i].pm.y + bo_y[this_class]);
                            y2 = w2s_h(bo_h[this_class]);
                            if (es[i].pm.side != -1) {
                                x1 = w2s_x(es[i].pm.x + bo_x[this_class]);
                                x2 = w2s_w(bo_w[this_class]);
                            } else {
                                x1 = w2s_x(es[i].pm.x - bo_x[this_class]);
                                x2 = w2s_w(-bo_w[this_class]);
                                x1 += x2;
                                x2 = -x2;
                            }
                            ctx.globalAlpha = relative_alpha * 0.1;
                            ctx.fillStyle = licGlOOIl;
                            ldb(x1, y1, x2, y2);
                        }
                    }
                }
    }
    var font_time = 0;
    for (i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i]._isphysical) {
                if (es[i]._isresizable) {
                    var x1 = w2s_x(es[i].pm.x);
                    var x2 = w2s_w(es[i].pm.w);
                    var y1 = w2s_y(es[i].pm.y);
                    var y2 = w2s_h(es[i].pm.h);
                } else {
                    var this_class = ThinkOfBBoxClass(es[i]._class, es[i]);
                    var y1 = w2s_y(es[i].pm.y + bo_y[this_class]);
                    var y2 = w2s_h(bo_h[this_class]);
                    if (es[i].pm.side != -1) {
                        var x1 = w2s_x(es[i].pm.x + bo_x[this_class]);
                        var x2 = w2s_w(bo_w[this_class]);
                    } else {
                        var x1 = w2s_x(es[i].pm.x - bo_x[this_class]);
                        var x2 = w2s_w(-bo_w[this_class]);
                        x1 += x2;
                        x2 = -x2;
                    }
                }
                if (es[i].selected) {
                    ctx.globalAlpha = 0.2;
                    ctx.fillStyle = selgrd2;
                    lmfr(x1, y1, x2, y2);
                }
                x1 -= 2;
                y1 -= 2;
                x2 += 4;
                y2 += 4;
                if (es[i].selected) {
                    ctx.globalAlpha = 1;
                    ctx.fillStyle = liOl;
                    MyDrawSelection(x1, y1, x2, y2);
                }
                if (!space)
                    if (!quick_pick)
                        if (obviouse_sel == i || ((ctrl || alt || m_drag_selection) && (es[i].hit(false) || es[i].hitSelect())))
                            if (MatchLayer(es[i])) {
                                ctx.fillStyle = selgrd3;
                                if (ctrl) ctx.fillStyle = licGiOOil;
                                else if (alt) ctx.fillStyle = liOOicGll;
                                ctx.globalAlpha = 0.5;
                                ldb(x1, y1, x2, y2);
                            }
                x1 += 2;
                y1 += 2;
                x2 -= 4;
                y2 -= 4;
                var can_qp = quick_pick && lqpc.indexOf(es[i]._class) != -1;
                if (can_qp) {
                    ctx.globalAlpha = 0.75 - Math.sin(time_mili / 100) / 4;
                    var size = 32 - 5 + Math.sin(time_mili / 100) * 5;
                    var over = false;
                    if (quick_pick_canover) {
                        if (quick_pick_fake_over == i) over = true;
                        else over = Math.sqrt(Math.pow(x1 + x2 / 2 - mouse_x, 2) + Math.pow(y1 + y2 / 2 - mouse_y, 2)) < 20 * quick_pick_hit_scale;
                    }
                    if (over && quick_pick_canover) quick_pick_canover = false;
                    MyDrawImage(over ? img_quickpick2 : img_quickpick, x1 + x2 / 2 - size, y1 + y2 / 2 - size, size * 2, size * 2);
                    need_redraw = true;
                }
                if (es[i].pm.uid != undefined)
                    if (MatchLayer(es[i]) || can_qp) {
                        if (ENABLE_TEXT) {
                            var capx = x1 + x2 / 2;
                            var capy = y1 + y2 / 2;
                            if (capx < -100) continue;
                            if (capx > lsu) continue;
                            if (capy < -100) continue;
                            if (capy > lsv) continue;
                            if (ENABLE_SHADOWS) {
                                ctx.shadowColor = llOGiCGIl;
                                ctx.shadowBlur = 2;
                                ctx.shadowOffsetX = 1;
                                ctx.shadowOffsetY = 1;
                            }
                            var gothit = (!can_qp && (i == obviouse_sel || (es[i].selected && es[i].hit(false)))) || (can_qp && over);
                            ctx.font = lICGlOOIl;
                            var fillText = es[i].pm.uid;
                            var dim = ctx.measureText(fillText);
                            dim.height = 10;
                            if (gothit) dim.height = 12;
                            if (mouse_x > capx - 30)
                                if (mouse_x < capx + 30)
                                    if (mouse_y > capy - 30)
                                        if (mouse_y < capy + 30) {
                                            title_density++;
                                        }
                            ctx.globalAlpha = 1;
                            if (last_title_density > 1 && !gothit) {
                                var di = Math.sqrt(Math.pow(mouse_x - capx, 2) + Math.pow(mouse_y - capy, 2));
                                if (di < 60) {
                                    if (!es[i].selected) {
                                        capx = capx - (mouse_x - capx) * Math.pow((60 - di) / 60, 2) * (4 + Math.min(6, last_title_density * 0.1));
                                        capy = capy - (mouse_y - capy) * Math.pow((60 - di) / 60, 2) * (4 + Math.min(6, last_title_density * 0.1));
                                        if (last_title_density > 1) ctx.globalAlpha = Math.max(0.4, 1 - last_title_density * 0.1);
                                    } else {
                                        ctx.globalAlpha = Math.max(0.3, 1 / last_title_density);
                                    }
                                }
                            }
                            var x3 = Math.round(capx - dim.width / 2);
                            var y3 = Math.round(capy - dim.height / 2);
                            if (!ENABLE_SHADOWS) {
                                ctx.fillStyle = liODIOOil;
                                ctx.fillRect(x3 - 2, y3 - 2, dim.width + 4, dim.height + 4);
                                ctx.fillRect(x3 - 4, y3 - 4, dim.width + 8, dim.height + 8);
                            }
                            ctx.fillStyle = liOl;
                            if (gothit) ctx.fillStyle = llcOIOGil;
                            if (es[i].selected) ctx.fillStyle = licl;
                            var tim = new Date().getTime();
                            ctx.fillText(fillText, x3, y3 + 8 + (dim.height - 10) / 2);
                            font_time += new Date().getTime() - tim;
                            if (ENABLE_SHADOWS) {
                                ctx.shadowColor = licDlcGIl;
                                ctx.shadowBlur = 0;
                                ctx.shadowOffsetX = 0;
                                ctx.shadowOffsetY = 0;
                            }
                        }
                    }
            }
    if (font_time > 20) {
        ENABLE_SHADOWS = false;
    }
    if (check_mode) {
        ctx.globalAlpha = 1;
        need_redraw = true;
        var w = w2s_w(1);
        for (var i = 0; i < waypoints.length; i++) {
            ctx.globalAlpha = 1;
            var x = w2s_x(waypoints[i].x);
            var y = w2s_y(waypoints[i].y);
            ctx.beginPath();
            ctx.arc(x, y, w * 6, 0, 2 * Math.PI, false);
            if (waypoints[i].spawn_dm) {
                if (waypoints[i].spawn_coop) {
                    ctx.fillStyle = llOOlOOll;
                    ctx.strokeStyle = liODlcGil;
                } else {
                    ctx.fillStyle = llOOiODil;
                    ctx.strokeStyle = lICDiOGil;
                }
            } else if (waypoints[i].spawn_coop) {
                ctx.fillStyle = llCOiCOIl;
                ctx.strokeStyle = lIOOlcDil;
            } else {
                if (waypoints[i].damage > 0) {
                    ctx.fillStyle = liODicDll;
                    ctx.strokeStyle = llCGIOGll;
                } else {
                    ctx.fillStyle = lIODiCDl;
                    ctx.strokeStyle = liODicDll;
                }
            }
            ctx.fill();
            ctx.lineWidth = w * 2;
            ctx.stroke();
            ctx.fillStyle = licDiOl;
            lmfr(x - 1, y - 10, 2, -1 - waypoints[i].risk_level_dm * w * 2);
            ctx.globalAlpha = waypoints[i].risk_level_dm / 150;
            ctx.fillStyle = licOlOl;
            lmfr(x - 1, y - 10, 2, -1 - waypoints[i].risk_level_dm * w * 2);
        }
        ctx.globalAlpha = 1;
        ctx.lineWidth = w * 2;
        ctx.strokeStyle = llCOicl;
        var perc = (time_mili / 1000) % 1;
        for (var i = 0; i < connections.length; i++) {
            var x1 = w2s_x(waypoints[connections[i].b].x * perc + waypoints[connections[i].a].x * (1 - perc));
            var y1 = w2s_y(waypoints[connections[i].b].y * perc + waypoints[connections[i].a].y * (1 - perc));
            if (connections[i].method == CONNECTION_WALK) ctx.fillStyle = llCOicl;
            else if (connections[i].method == CONNECTION_SAFEFALL) ctx.fillStyle = licDiOl;
            else if (connections[i].method == CONNECTION_JUMP) ctx.fillStyle = llOOicl;
            else if (connections[i].method == CONNECTION_RUN_JUMP) ctx.fillStyle = llODicDll;
            else if (connections[i].method == CONNECTION_JUMP_SWORDS) ctx.fillStyle = licOlcDil;
            else if (connections[i].method == CONNECTION_JUMP_BOOST) ctx.fillStyle = licOlOl;
            else if (connections[i].method == CONNECTION_UNSAFE_FALL) ctx.fillStyle = llOOiODil;
            else ctx.fillStyle = llOGlcGIl;
            lmfr(x1 - 1, y1 - 1, 2, 2);
        }
    }
    if (!paint_draw_mode)
        if (selects == 1)
            if (!ldis)
                if (!ctrl && !alt)
                    if (!space)
                        if (!k_shift)
                            if (es[select_last]._isresizable) {
                                i = select_last;
                                var h = true;
                                if (!ldrs) h = es[i].hit(true);
                                if (h != false)
                                    if (es[i].exists)
                                        if (MatchLayer(es[i])) {
                                            ctx.fillStyle = liOl;
                                            if (DOQuad(es[i].pm.x - borderwidth, es[i].pm.y - borderwidth, borderwidth * 2, borderwidth * 2)) curs = lICGIOGIl;
                                            if (DOQuad(es[i].pm.x + es[i].pm.w - borderwidth, es[i].pm.y - borderwidth, borderwidth * 2, borderwidth * 2)) curs = liCGICGil;
                                            if (DOQuad(es[i].pm.x - borderwidth, es[i].pm.y + es[i].pm.h - borderwidth, borderwidth * 2, borderwidth * 2)) curs = liCGICGil;
                                            if (DOQuad(es[i].pm.x + es[i].pm.w - borderwidth, es[i].pm.y + es[i].pm.h - borderwidth, borderwidth * 2, borderwidth * 2)) curs = lICGIOGIl;
                                            if (DOQuad(es[i].pm.x + borderwidth, es[i].pm.y - borderwidth, es[i].pm.w - borderwidth * 2, borderwidth * 2)) curs = licOiCOil;
                                            if (DOQuad(es[i].pm.x + borderwidth, es[i].pm.y + es[i].pm.h - borderwidth, es[i].pm.w - borderwidth * 2, borderwidth * 2)) curs = licOiCOil;
                                            if (DOQuad(es[i].pm.x - borderwidth, es[i].pm.y + borderwidth, borderwidth * 2, es[i].pm.h - borderwidth * 2)) curs = llCOiOGil;
                                            if (DOQuad(es[i].pm.x + es[i].pm.w - borderwidth, es[i].pm.y + borderwidth, borderwidth * 2, es[i].pm.h - borderwidth * 2)) curs = llCOiOGil;
                                        }
                            }
    if (active_tool != lIcOIcDll) {
        ctx.globalAlpha = 1;
        MyDrawImage(img_put, w2s_x(Math.round(lmwa / GRID_SNAPPING) * GRID_SNAPPING) - 15, w2s_y(Math.round(lmwb / GRID_SNAPPING) * GRID_SNAPPING) - 15, 31, 31);
    }
    if (m_drag_selection)
        if (!lmd) {
            var x1 = w2s_x(Math.min(lmdrwa, lmwa));
            var x2 = w2s_w(Math.abs(lmdrwa - lmwa));
            var y1 = w2s_y(Math.min(lmdrwb, lmwb));
            var y2 = w2s_h(Math.abs(lmdrwb - lmwb));
            ctx.fillStyle = liOl;
            if (ctrl) ctx.fillStyle = licGiOOil;
            else if (alt) ctx.fillStyle = liOOicGll;
            ctx.globalAlpha = 0.1;
            lmfr(x1, y1, x2, y2);
            ctx.globalAlpha = 0.8;
            lmfr(x1, y1, 1, y2);
            lmfr(x1 + x2, y1, 1, y2);
            lmfr(x1, y1, x2, 1);
            lmfr(x1, y1 + y2, x2, 1);
        }
    if (enabletrace) {
        ctx.font = lICGlOOIl;
        ctx.globalAlpha = 1;
        ctx.fillStyle = liOl;
        var from_y = 15;
        if (ConsoleTraceMessages.length * 10 + 15 > lsv - 15) from_y = lsv - 15 - ConsoleTraceMessages.length * 10;
        for (var i = 0; i < ConsoleTraceMessages.length; i++) {
            var fillText = ConsoleTraceMessages[i];
            ctx.fillText(fillText, 15, from_y + i * 10);
        }
    }
    if (!space) {
        var offs = 22;
        if (ctrl) {
            ctx.drawImage(img_ctrl, mouse_x + 12, mouse_y + offs);
            offs += 8;
        }
        if (alt) {
            ctx.drawImage(img_alt, mouse_x + 12, mouse_y + offs);
            offs += 8;
        }
        if (k_shift) ctx.drawImage(img_shift, mouse_x + 12, mouse_y + offs);
    }
    var parts_total = ActionArray.length;
    if (history_runer_timer > 0)
        if (parts_total > 0) {
            var width_each = (2 * Math.PI) / (parts_total + 1);
            var power = 1 - Math.pow(1 - history_runer_timer, 4);
            ctx.lineWidth = 10;
            ctx.strokeStyle = liOl;
            for (var xx = 0; xx < parts_total; xx++) {
                if (xx == ActionCurrent) ctx.globalAlpha = power * 0.3;
                else ctx.globalAlpha = power * 0.15;
                ctx.beginPath();
                ctx.arc(mouse_x, mouse_y, 20, -width_each * xx - width_each * 0.45 - Math.PI / 2, -width_each * xx + width_each * 0.45 - Math.PI / 2);
                ctx.stroke();
            }
            history_runer_timer -= time_mili_delta * 0.0005;
            need_redraw = true;
        }
    if (canv.style.cursor != curs) canv.style.cursor = curs;
}
function zoom_validate() {
    cx = (dis_from_x + dis_to_x) / 2;
    cy = (dis_from_y + dis_to_y) / 2;
    dis_from_x = cx - (lsu * zoom) / 2;
    dis_to_x = cx + (lsu * zoom) / 2;
    dis_from_y = cy - (lsv * zoom) / 2;
    dis_to_y = cy + (lsv * zoom) / 2;
    dis_from_x = Math.round(dis_from_x / zoom) * zoom;
    dis_to_x = Math.round(dis_to_x / zoom) * zoom;
    dis_from_y = Math.round(dis_from_y / zoom) * zoom;
    dis_to_y = Math.round(dis_to_y / zoom) * zoom;
    borderwidth = Math.max(3, 5 * zoom);
}
function ResetView() {
    dis_from_x = 0;
    dis_to_x = 0;
    dis_from_y = 0;
    dis_to_y = 0;
    zoom = 1;
    zoom_validate();
}
var mouse_x = 0;
var lmwa = 0;
var mouse_y = 0;
var lmwb = 0;
var ActionArray = new Array();
var ActionCurrent = 0;
var history_runer_timer = 0;
var forundo_str = liOGIcl;
var forredo_str = liOGIcl;
function ClearUndos() {
    forundo_str = liOGIcl;
    forredo_str = liOGIcl;
    ActionArray = new Array();
    ActionCurrent = 0;
}
function lnd(str) {
    forundo_str = str + forundo_str;
}
function ldn(str) {
    forredo_str += str;
}
function lfz(doredo) {
    if (forredo_str != liOGIcl || forundo_str != liOGIcl) {
        history_runer_timer = 0;
        if (ActionCurrent > 0) {
            ActionArray.splice(0, ActionCurrent);
            ActionCurrent = 0;
        }
        ActionArray.unshift({ redo: forredo_str, undo: forundo_str });
        forredo_str = forundo_str = liOGIcl;
        if (doredo) eval(ActionArray[0].redo);
        changes_made = true;
    }
}
function lcz() {
    forredo_str = forundo_str = liOGIcl;
}
function DO_UNDO() {
    if (ActionCurrent < ActionArray.length) {
        eval(ActionArray[ActionCurrent].undo);
        ActionCurrent++;
        history_runer_timer = 1;
        need_redraw = true;
        need_GUIParams_update = true;
        NewNote(lIOGlCOIl, note_passive);
    } else NewNote(lIOGlCOll, note_passive);
}
function DO_REDO() {
    if (ActionCurrent > 0) {
        ActionCurrent--;
        eval(ActionArray[ActionCurrent].redo);
        history_runer_timer = 1;
        need_redraw = true;
        need_GUIParams_update = true;
        NewNote(llCGlcDil, note_passive);
    } else NewNote(llcDlCGIl, note_passive);
}
function m_update(event) {
    event = event || window.event;
    var el = canv,
        pos = { x: 0, y: 0 };
    while (el) {
        pos.x += el.offsetLeft;
        pos.y += el.offsetTop;
        el = el.offsetParent;
    }
    mouse_x = event.pageX - pos.x;
    mouse_y = event.pageY - pos.y;
    lmwa = s2w_x(mouse_x);
    lmwb = s2w_y(mouse_y);
}
var ctrl = false;
var k_shift = false;
var space = false;
var alt = false;
var mid_btn = false;
var m_drag = false;
var m_drag_x = 0;
var m_drag_y = 0;
var lmdrwa = 0;
var lmdrwb = 0;
var m_drag_screen = false;
var ldis = false;
var m_drag_selection = false;
var ldrs = false;
var ldms = llODicGll;
var lmd = true;
function m_move(e) {
    if (e != undefined) m_update(e);
    if (lmd) {
        if (Math.abs(mouse_x - m_drag_x) > GRID_SNAPPING * 0.5 || Math.abs(mouse_y - m_drag_y) > GRID_SNAPPING * 0.5) {
            lmd = false;
        }
    } else {
        if (m_drag_screen) {
            var x1, y1;
            x1 = s2w_w(m_drag_x - mouse_x);
            y1 = s2w_h(m_drag_y - mouse_y);
            m_drag_x = mouse_x;
            m_drag_y = mouse_y;
            dis_from_x += x1;
            dis_to_x += x1;
            dis_from_y += y1;
            dis_to_y += y1;
        }
        if (ldis) {
            var x1, y1;
            x1 = Math.round((lmwa - lmdrwa) / GRID_SNAPPING) * GRID_SNAPPING;
            y1 = Math.round((lmwb - lmdrwb) / GRID_SNAPPING) * GRID_SNAPPING;
            for (var i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (MatchLayer(es[i]) || paint_draw_mode)
                        if (es[i].selected)
                            if (es[i]._isphysical) {
                                es[i].pm.x += x1;
                                es[i].pm.y += y1;
                            }
            lmdrwa += x1;
            lmdrwb += y1;
        }
        if (ldrs) {
            var x1, y1;
            x1 = Math.round((lmwa - lmdrwa) / GRID_SNAPPING) * GRID_SNAPPING;
            y1 = Math.round((lmwb - lmdrwb) / GRID_SNAPPING) * GRID_SNAPPING;
            for (var i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (MatchLayer(es[i]) || paint_draw_mode)
                        if (es[i].selected)
                            if (es[i]._isphysical)
                                if (es[i]._isresizable) {
                                    if (ldms == lIOGlcOil || ldms == llCOlCOil || ldms == lIcGICDil) {
                                        es[i].pm.x += x1;
                                        es[i].pm.w -= x1;
                                    }
                                    if (ldms == lICOiOGil || ldms == lIODIcGll || ldms == llcDlcDll) {
                                        es[i].pm.w += x1;
                                    }
                                    if (ldms == lIOGlcOil || ldms == llcOicOIl || ldms == lICOiOGil) {
                                        es[i].pm.y += y1;
                                        es[i].pm.h -= y1;
                                    }
                                    if (ldms == lIcGICDil || ldms == llCOiOOIl || ldms == llcDlcDll) {
                                        es[i].pm.h += y1;
                                    }
                                    es[i].fixPos();
                                }
            lmdrwa += x1;
            lmdrwb += y1;
        }
    }
    need_redraw = true;
    UpdateOpacities();
}
function MouseWheelScrollFunction(event) {
    var wheel = event.wheelDelta / 120 || -event.detail / 6;
    if (wheel > 0) zoom_in(wheel);
    else zoom_out(wheel);
    zoom_validate();
    lmwa = s2w_x(mouse_x);
    lmwb = s2w_y(mouse_y);
    need_redraw = true;
    return false;
}
canv.onmousewheel = MouseWheelScrollFunction;
if (canv.addEventListener) {
    canv.addEventListener(liCGIcDIl, MouseWheelScrollFunction, false);
    canv.addEventListener(lIcGlODll, MouseWheelScrollFunction, false);
} else canv.attachEvent(lIOGIOOll, MouseWheelScrollFunction);
function zoom_out(wheel) {
    if (zoom < 100) {
        zoom = Math.min(100, zoom - zoom * (wheel != null ? wheel : -2) * 0.3);
    }
}
function zoom_in(wheel) {
    if (zoom > 0.1) {
        zoom = Math.max(0.1, zoom - zoom * (wheel != null ? wheel : 2) * 0.3);
    }
}
var paint_draw_mode = false;
function m_down(e) {
    setTimeout(function () {
        context_menu = false;
    }, 10);
    if (quick_pick_ignore_one_click && e.which == 1) {
        quick_pick_ignore_one_click = false;
        unfocusedit();
    } else {
        if (e.which == 2 || e.which == 3) mid_btn = true;
        m_update(e);
        lmd = true;
        m_drag_x = mouse_x;
        m_drag_y = mouse_y;
        lmdrwa = lmwa;
        lmdrwb = lmwb;
        m_drag = true;
        m_drag_screen = false;
        m_drag_selection = false;
        ldis = false;
        ldrs = false;
        paint_draw_mode = false;
        if (space || mid_btn) {
            m_drag_screen = true;
            if (alt) {
                zoom_out();
            } else if (ctrl) {
                zoom_in();
            }
            zoom_validate();
        } else {
            if (active_tool != lIcOIcDll) {
                lcz();
                paint_draw_mode = true;
                for (var i = 0; i < es.length; i++)
                    if (es[i].exists)
                        if (es[i].selected) {
                            lnd(llcDiOGll + i + llOOlCDIl);
                            ldn(llcDiOGll + i + llCOlCDll);
                            es[i].selected = false;
                        }
                var newid = es.length;
                lnd(llcDiOGll + newid + licOIODil);
                ldn(llcDiOGll + newid + liCGlcOil);
                var newbie = (es[es.length] = new E(active_tool));
                if (llCGiOl in newbie.pm) {
                    newbie.pm.uid = RandomizeName(newbie.pm.uid);
                }
                if (llcOICl in newbie.pm) {
                    ldn(llcDiOGll + newid + lICOICDIl + lmwa + lIOOlOOIl);
                    ldn(llcDiOGll + newid + lICDlcDIl + lmwb + lIOOlOOIl);
                    ldn(llcDiOGll + newid + llOOlCDIl);
                    ldn(llcDiOGll + newid + licDlcDIl);
                    newbie.pm.x = lmwa;
                    newbie.pm.y = lmwb;
                    newbie.selected = true;
                    newbie.fixPos();
                    lmdrwa = newbie.pm.x;
                    lmdrwb = newbie.pm.y;
                    if (newbie._isresizable) {
                        ldn(llcDiOGll + newid + liCGIOOil);
                        ldn(llcDiOGll + newid + llODiODil);
                        newbie.pm.w = 0;
                        newbie.pm.h = 0;
                        ldrs = true;
                        ldms = llcDlcDll;
                    } else {
                        ldis = true;
                    }
                }
                lfz(false);
                lnd(llcDiOGll + newid + lICOICDIl + lmwa + lIOOlOOIl);
                lnd(llcDiOGll + newid + lICDlcDIl + lmwb + lIOOlOOIl);
                if (newbie._isresizable) {
                    lnd(llcDiOGll + newid + liCGIOOil);
                    lnd(llcDiOGll + newid + llODiODil);
                }
                need_GUIParams_update = true;
                UpdateGUIObjectsList();
            } else {
                var selects = 0;
                var select_last = -1;
                var lhu = true;
                for (var i = 0; i < es.length; i++)
                    if (es[i].exists)
                        if (MatchLayer(es[i]))
                            if (es[i].selected) {
                                selects++;
                                select_last = i;
                            }
                if (!ctrl && !alt) {
                    if (selects == 1) {
                        var h = es[select_last].hit(true);
                        if (h != false) {
                            lhu = false;
                            if (h == llODicGll) {
                                lcz();
                                lnd(llcDiOGll + select_last + lICOICDIl + es[select_last].pm.x + lIOOlOOIl);
                                lnd(llcDiOGll + select_last + lICDlcDIl + es[select_last].pm.y + lIOOlOOIl);
                                ldis = true;
                            } else {
                                lcz();
                                lnd(llcDiOGll + select_last + lICOICDIl + es[select_last].pm.x + lIOOlOOIl);
                                lnd(llcDiOGll + select_last + lICDlcDIl + es[select_last].pm.y + lIOOlOOIl);
                                lnd(llcDiOGll + select_last + llcDicOll + es[select_last].pm.w + lIOOlOOIl);
                                lnd(llcDiOGll + select_last + liOOiODil + es[select_last].pm.h + lIOOlOOIl);
                                ldrs = true;
                                ldms = h;
                            }
                            if (k_shift) {
                                lcz();
                                i = select_last - 1;
                                for (var c = 0; c < es.length; c++) {
                                    if (i < 0) i = es.length - 1;
                                    if (es[i].exists)
                                        if (MatchLayer(es[i]))
                                            if (es[i]._isphysical)
                                                if (es[i].hit(false)) {
                                                    for (i2 = 0; i2 < es.length; i2++)
                                                        if (es[i2].exists)
                                                            if (MatchLayer(es[i2]))
                                                                if (es[i2].selected) {
                                                                    lnd(llcDiOGll + i2 + llOOlCDIl);
                                                                    ldn(llcDiOGll + i2 + llCOlCDll);
                                                                    es[i2].selected = false;
                                                                }
                                                    selects = 0;
                                                    lnd(llcDiOGll + i + llCOlCDll);
                                                    ldn(llcDiOGll + i + llOOlCDIl);
                                                    lnd(llcDiOGll + i + lICOICDIl + es[i].x + lIOOlOOIl);
                                                    lnd(llcDiOGll + i + lICDlcDIl + es[i].y + lIOOlOOIl);
                                                    es[i].selected = true;
                                                    need_GUIParams_update = true;
                                                    ldis = true;
                                                    ldrs = false;
                                                    lhu = false;
                                                    break;
                                                }
                                    i--;
                                }
                            }
                        }
                    } else if (selects > 1) {
                        for (var i = 0; i < es.length; i++)
                            if (es[i].exists)
                                if (MatchLayer(es[i]))
                                    if (es[i]._isphysical)
                                        if (es[i].selected) {
                                            if (es[i].hit(false)) {
                                                lhu = false;
                                                ldis = true;
                                                ldrs = false;
                                                lhu = false;
                                                lcz();
                                                for (var i2 = 0; i2 < es.length; i2++)
                                                    if (es[i2].exists)
                                                        if (MatchLayer(es[i2]))
                                                            if (es[i2]._isphysical)
                                                                if (es[i2].selected) {
                                                                    lnd(llcDiOGll + i2 + lICOICDIl + es[i2].x + lIOOlOOIl);
                                                                    lnd(llcDiOGll + i2 + lICDlcDIl + es[i2].y + lIOOlOOIl);
                                                                }
                                                break;
                                            }
                                        }
                    }
                    if (selects > 0)
                        if (ldis || ldrs) {
                            lcz();
                            for (var i = 0; i < es.length; i++)
                                if (es[i].exists)
                                    if (MatchLayer(es[i]))
                                        if (es[i]._isphysical)
                                            if (es[i].selected) {
                                                lnd(llcDiOGll + i + lICOICDIl + es[i].pm.x + lIOOlOOIl);
                                                lnd(llcDiOGll + i + lICDlcDIl + es[i].pm.y + lIOOlOOIl);
                                                if (ldrs) {
                                                    lnd(llcDiOGll + i + llcDicOll + es[i].pm.w + lIOOlOOIl);
                                                    lnd(llcDiOGll + i + liOOiODil + es[i].pm.h + lIOOlOOIl);
                                                }
                                            }
                        }
                }
                if (lhu) {
                    if (!ctrl && !alt) {
                        lcz();
                        for (var i = 0; i < es.length; i++)
                            if (es[i].exists)
                                if (MatchLayer(es[i]))
                                    if (es[i]._isphysical) {
                                        var s = es[i].hit(false);
                                        if (s != false) {
                                            if (!es[i].selected) {
                                                for (i2 = 0; i2 < es.length; i2++)
                                                    if (es[i2].exists)
                                                        if (es[i2].selected) {
                                                            lnd(llcDiOGll + i2 + llOOlCDIl);
                                                            ldn(llcDiOGll + i2 + llCOlCDll);
                                                            es[i2].selected = false;
                                                        }
                                                selects = 0;
                                                lnd(llcDiOGll + i + lICOICDIl + es[i].pm.x + lIOOlOOIl);
                                                lnd(llcDiOGll + i + lICDlcDIl + es[i].pm.y + lIOOlOOIl);
                                                lnd(llcDiOGll + i + llCOlCDll);
                                                ldn(llcDiOGll + i + llOOlCDIl);
                                                es[i].selected = true;
                                                need_GUIParams_update = true;
                                            }
                                            ldis = true;
                                        }
                                    }
                        lfz(false);
                    }
                    if (!ldis)
                        if (!ldrs) {
                            ldis = false;
                            m_drag_selection = true;
                        }
                }
            }
        }
        need_redraw = true;
    }
}
function m_failed(e) {
    if (ldis || ldrs)
        if (!lmd) {
            for (var i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (MatchLayer(es[i]))
                        if (es[i].selected)
                            if (es[i]._isresizable) {
                                es[i].fixWidths();
                                es[i].fixPos();
                                ldn(llcDiOGll + i + lICOICDIl + es[i].pm.x + lIOOlOOIl);
                                ldn(llcDiOGll + i + lICDlcDIl + es[i].pm.y + lIOOlOOIl);
                                if (ldrs) {
                                    ldn(llcDiOGll + i + llcDicOll + es[i].pm.w + lIOOlOOIl);
                                    ldn(llcDiOGll + i + liOOiODil + es[i].pm.h + lIOOlOOIl);
                                }
                            }
            lfz(false);
            need_GUIParams_update = true;
        }
    paint_draw_mode = false;
    m_drag_screen = false;
    m_drag_selection = false;
    m_drag = false;
    ldis = false;
    ldrs = false;
    alt = false;
    ctrl = false;
    k_shift = false;
    space = false;
    mid_btn = false;
    need_redraw = true;
}
function m_up(e) {
    if (e.which == 2 || e.which == 3) mid_btn = false;
    m_update(e);
    if (m_drag_selection) {
        lcz();
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (MatchLayer(es[i])) {
                    if (ctrl) {
                        if (es[i].hitSelect()) {
                            if (!es[i].selected) {
                                lnd(llcDiOGll + i + llCOlCDll);
                                ldn(llcDiOGll + i + llOOlCDIl);
                            }
                            es[i].selected = true;
                            need_GUIParams_update = true;
                        }
                    } else if (alt) {
                        if (es[i].hitSelect()) {
                            if (es[i].selected) {
                                lnd(llcDiOGll + i + llOOlCDIl);
                                ldn(llcDiOGll + i + llCOlCDll);
                            }
                            es[i].selected = false;
                            need_GUIParams_update = true;
                        }
                    } else {
                        var set = es[i].hitSelect();
                        if (es[i].selected != set) {
                            lnd(llcDiOGll + i + llcGicDil + es[i].selected + lIOOlOOIl);
                            ldn(llcDiOGll + i + llcGicDil + set + lIOOlOOIl);
                        }
                        need_GUIParams_update = need_GUIParams_update || es[i].selected != set;
                        es[i].selected = set;
                    }
                }
        lfz(false);
    }
    if (ldis)
        if (!lmd) {
            for (var i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (MatchLayer(es[i]))
                        if (es[i].selected)
                            if (es[i]._isphysical) {
                                es[i].fixPos();
                                ldn(llcDiOGll + i + lICOICDIl + es[i].pm.x + lIOOlOOIl);
                                ldn(llcDiOGll + i + lICDlcDIl + es[i].pm.y + lIOOlOOIl);
                            }
            lfz(false);
            need_GUIParams_update = true;
        }
    ldis = false;
    m_drag_screen = false;
    m_drag_selection = false;
    m_drag = false;
    paint_draw_mode = false;
    if (ldrs) {
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i].selected)
                    if (MatchLayer(es[i]))
                        if (es[i]._isphysical)
                            if (es[i]._isresizable) {
                                es[i].fixWidths();
                                es[i].fixPos();
                                ldn(llcDiOGll + i + lICOICDIl + es[i].pm.x + lIOOlOOIl);
                                ldn(llcDiOGll + i + lICDlcDIl + es[i].pm.y + lIOOlOOIl);
                                ldn(llcDiOGll + i + llcDicOll + es[i].pm.w + lIOOlOOIl);
                                ldn(llcDiOGll + i + liOOiODil + es[i].pm.h + lIOOlOOIl);
                            }
        lfz(false);
        ldrs = false;
        need_GUIParams_update = true;
    }
    need_redraw = true;
}
function k_up(e) {
    if (OVERLAY_BLOCK) return true;
    var c = e.keyCode ? e.keyCode : e.charCode;
    if (!letediting) {
        if (c == 16) k_shift = false;
        {
            if (c == 17) ctrl = false;
        }
        if (c == 32) space = false;
        if (c == 18) alt = false;
        if (c == 87) {
            unboost_y = false;
            recalc_speed_y();
        }
        if (c == 83) {
            boost_y = false;
            recalc_speed_y();
        }
        if (c == 65) {
            unboost_x = false;
            recalc_speed_x();
        }
        if (c == 68) {
            boost_x = false;
            recalc_speed_x();
        }
        need_redraw = true;
    }
}
var boost_x = false;
var unboost_x = false;
var boost_y = false;
var unboost_y = false;
function recalc_speed_x() {
    speed_x = boost_x && unboost_x ? 0 : boost_x ? 1 : unboost_x ? -1 : 0;
}
function recalc_speed_y() {
    speed_y = boost_y && unboost_y ? 0 : boost_y ? 1 : unboost_y ? -1 : 0;
}
function DeleteSelection() {
    lcz();
    for (var i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].selected)
                if (MatchLayer(es[i])) {
                    ldn(llcDiOGll + i + liOOlOGil + i + licOIODil);
                    lnd(llcDiOGll + i + llcGicDil + es[i].selected + lIcOicDIl + i + liCOiCOIl + es[i].exists + lIOOlOOIl);
                }
    lfz(true);
    need_GUIParams_update = true;
    need_redraw = true;
}
function k_down(e) {
    if (OVERLAY_BLOCK) return true;
    var c = e.keyCode ? e.keyCode : e.charCode;
    if (!ignore_keys) {
        if (!letediting && e.target.nodeName != liODiOOIl) {
            if (c == 16) k_shift = true;
            {
                if (c == 17) ctrl = true;
            }
            if (c == 32) space = true;
            if (c == 18) alt = true;
            if (c == 87) {
                unboost_y = true;
                recalc_speed_y();
            }
            if (c == 83) {
                boost_y = true;
                recalc_speed_y();
            }
            if (c == 65) {
                unboost_x = true;
                recalc_speed_x();
            }
            if (c == 68) {
                boost_x = true;
                recalc_speed_x();
            }
            if (c == 8) {
                var to_del = false;
                for (var i = 0; i < es.length; i++)
                    if (es[i].exists)
                        if (es[i].selected)
                            if (MatchLayer(es[i])) {
                                to_del = true;
                                break;
                            }
                if (to_del) if (confirm(llOGlODil) == true) c = 46;
            }
            if (c == 46) {
                DeleteSelection();
            }
            if (c == 90)
                if (ctrl) {
                    DO_UNDO();
                }
            if (c == 89)
                if (ctrl) {
                    DO_REDO();
                }
            if (c == 27) {
                SetActiveTool(0);
            }
            if (c >= 48 && c <= 57) {
                var clip_slot = c - 48;
                if (typeof Storage !== lICOIOGil) {
                    if (ctrl) {
                        CopyToClipBoard(llCGiCOIl + clip_slot);
                        NewNote(liCOlOGll + clip_slot + llOGlCDil, note_passive);
                    } else {
                        if (PasteFromClipBoard(llCGiCOIl + clip_slot)) NewNote(llODlCOll + clip_slot + llOGlCDil, note_passive);
                        else NewNote(lIOOicOll + clip_slot + llOOiCDll, note_passive);
                    }
                    e.preventDefault();
                } else {
                    NewNote(llOOlcOIl, note_bad);
                }
            }
            if (ctrl) {
                if (c == 67) {
                    if (typeof Storage !== lICOIOGil) {
                        CopyToClipBoard(lICGIcOll);
                        NewNote(llCDlOGIl, note_passive);
                    } else {
                        NewNote(llOOlcOIl, note_bad);
                    }
                }
                if (c == 86) {
                    if (typeof Storage !== lICOIOGil) {
                        if (PasteFromClipBoard(lICGIcOll)) NewNote(lIODlcOll, note_passive);
                        else NewNote(lIOGicDil, note_passive);
                    } else {
                        NewNote(llOOlcOIl, note_bad);
                    }
                }
            } else {
                if (c == 81) {
                    expert_view = !expert_view;
                    UpdateOpacities();
                }
                if (c == 72) {
                    var range_min = 0;
                    var range_max = 0;
                    var first = true;
                    for (var i = 0; i < es.length; i++)
                        if (es[i].exists)
                            if (es[i].selected)
                                if (MatchLayer(es[i])) {
                                    if (es[i]._isresizable) {
                                        if (first) {
                                            range_min = es[i].pm.x;
                                            range_max = es[i].pm.x + es[i].pm.w;
                                            first = false;
                                        } else {
                                            if (es[i].pm.x < range_min) range_min = es[i].pm.x;
                                            if (es[i].pm.x + es[i].pm.w > range_max) range_max = es[i].pm.x + es[i].pm.w;
                                        }
                                    } else {
                                        if (first) {
                                            range_min = es[i].pm.x;
                                            range_max = es[i].pm.x;
                                            first = false;
                                        } else {
                                            if (es[i].pm.x < range_min) range_min = es[i].pm.x;
                                            if (es[i].pm.x > range_max) range_max = es[i].pm.x;
                                        }
                                    }
                                }
                    var around = (range_max + range_min) / 2;
                    for (var i = 0; i < es.length; i++)
                        if (es[i].exists)
                            if (es[i].selected)
                                if (MatchLayer(es[i])) {
                                    lnd(llcDiOGll + i + lICOICDIl + es[i].pm.x + lIOOlOOIl);
                                    es[i].pm.x = around + (around - es[i].pm.x);
                                    ldn(llcDiOGll + i + lICOICDIl + around + (around - es[i].pm.x) + lIOOlOOIl);
                                    if (es[i]._isresizable) {
                                        lnd(llcDiOGll + i + llcDicOll + es[i].pm.w + lIOOlOOIl);
                                        es[i].pm.w = -es[i].pm.w;
                                        es[i].fixWidths();
                                        ldn(llcDiOGll + i + llcDicOll + es[i].pm.w + lIOOlOOIl);
                                    } else if (es[i].pm.side != undefined) {
                                        lnd(llcDiOGll + i + lIOOicGIl + es[i].pm.side + lIOOlOOIl);
                                        es[i].pm.side = es[i].pm.side == 1 ? -1 : 1;
                                        ldn(llcDiOGll + i + lIOOicGIl + es[i].pm.side + lIOOlOOIl);
                                    }
                                }
                    lfz(false);
                }
                if (c == 86) {
                    var range_min = 0;
                    var range_max = 0;
                    var first = true;
                    for (var i = 0; i < es.length; i++)
                        if (es[i].exists)
                            if (es[i].selected)
                                if (MatchLayer(es[i])) {
                                    if (es[i]._isresizable) {
                                        if (first) {
                                            range_min = es[i].pm.y;
                                            range_max = es[i].pm.y + es[i].pm.h;
                                            first = false;
                                        } else {
                                            if (es[i].pm.y < range_min) range_min = es[i].pm.y;
                                            if (es[i].pm.y + es[i].pm.h > range_max) range_max = es[i].pm.y + es[i].pm.h;
                                        }
                                    } else {
                                        if (first) {
                                            range_min = es[i].pm.y;
                                            range_max = es[i].pm.y;
                                            first = false;
                                        } else {
                                            if (es[i].pm.y < range_min) range_min = es[i].pm.y;
                                            if (es[i].pm.y > range_max) range_max = es[i].pm.y;
                                        }
                                    }
                                }
                    var around = (range_max + range_min) / 2;
                    for (var i = 0; i < es.length; i++)
                        if (es[i].exists)
                            if (es[i].selected)
                                if (MatchLayer(es[i])) {
                                    lnd(llcDiOGll + i + lICDlcDIl + es[i].pm.y + lIOOlOOIl);
                                    es[i].pm.y = around + (around - es[i].pm.y);
                                    ldn(llcDiOGll + i + lICDlcDIl + around + (around - es[i].pm.y) + lIOOlOOIl);
                                    if (es[i]._isresizable) {
                                        lnd(llcDiOGll + i + liOOiODil + es[i].pm.h + lIOOlOOIl);
                                        es[i].pm.h = -es[i].pm.h;
                                        es[i].fixWidths();
                                        ldn(llcDiOGll + i + liOOiODil + es[i].pm.h + lIOOlOOIl);
                                    }
                                }
                    lfz(false);
                }
            }
            need_redraw = true;
        }
    } else {
        if (c == 13) {
            eval(dim_enter_event);
        }
        if (c == 27) {
            CancelDim();
        }
    }
}
function CopyToClipBoard(ClipName) {
    var str = liOGIcl;
    var clipboard = new Array();
    for (var i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].selected)
                if (MatchLayer(es[i])) {
                    clipboard[clipboard.length] = es[i];
                }
    str = serialize(clipboard);
    sessionStorage[ClipName] = str;
}
function PasteFromClipBoard(ClipName) {
    var clipboard = new Object();
    if (sessionStorage[ClipName] == undefined) {
        return false;
    }
    clipboard = unserialize(sessionStorage[ClipName]);
    lcz();
    for (var i = 0; i < es.length; i++)
        if (es[i].exists) {
            if (es[i].selected) {
                ldn(llcDiOGll + i + llCOlCDll);
                lnd(llcDiOGll + i + llOOlCDIl);
                es[i].selected = false;
            }
        }
    var min_x = 0;
    var max_x = 0;
    var min_y = 0;
    var max_y = 0;
    i = 0;
    var from_obj = es.length;
    while (typeof clipboard[i] !== lICOIOGil) {
        var newparam = es.length;
        ldn(llcDiOGll + newparam + liCGlcOil);
        lnd(llcDiOGll + newparam + licOIODil);
        es[newparam] = new E(clipboard[i]._class);
        for (param in clipboard[i]) {
            es[newparam][param] = clipboard[i][param];
        }
        if (typeof es[newparam].pm.x !== lICOIOGil)
            if (typeof es[newparam].pm.y !== lICOIOGil) {
                if (i == 0) {
                    min_x = es[newparam].pm.x;
                    min_y = es[newparam].pm.y;
                    max_x = es[newparam].pm.x;
                    max_y = es[newparam].pm.y;
                    if (typeof es[newparam].pm.w !== lICOIOGil)
                        if (typeof es[newparam].pm.h !== lICOIOGil) {
                            min_x += es[newparam].pm.w / 2;
                            max_x += es[newparam].pm.w / 2;
                            min_y += es[newparam].pm.h / 2;
                            max_y += es[newparam].pm.h / 2;
                        }
                } else {
                    min_x = Math.min(min_x, es[newparam].pm.x);
                    min_y = Math.min(min_y, es[newparam].pm.y);
                    max_x = Math.max(max_x, es[newparam].pm.x);
                    max_y = Math.max(max_y, es[newparam].pm.y);
                    if (typeof es[newparam].pm.w !== lICOIOGil)
                        if (typeof es[newparam].pm.h !== lICOIOGil) {
                            max_x = Math.max(max_x, es[newparam].pm.x + es[newparam].pm.w);
                            max_y = Math.max(max_y, es[newparam].pm.y + es[newparam].pm.h);
                        }
                }
            }
        i++;
    }
    ldn(llOGlCOil);
    ldn(llcDlOOil);
    ldn(lIcOlOOll);
    lnd(lICGiODil);
    lnd(lIOOIcOil);
    lnd(liCOicGll);
    ldis = true;
    paint_draw_mode = true;
    quick_pick_ignore_one_click = true;
    m_drag_x = mouse_x;
    m_drag_y = mouse_y;
    lmdrwa = lmwa;
    lmdrwb = lmwb;
    var lo_x = lmwa - (max_x + min_x) / 2;
    var lo_y = lmwb - (max_y + min_y) / 2;
    for (var i2 = from_obj; i2 < es.length; i2++) {
        if (typeof es[i2].pm.uid !== lICOIOGil) {
            var old_uid = es[i2].pm.uid;
            es[i2].exists = false;
            es[i2].pm.uid = RandomizeName(es[i2].pm.uid);
            es[i2].exists = true;
            for (var i3 = from_obj; i3 < es.length; i3++) {
                for (param in es[i3].pm) {
                    if (typeof es[i3].pm[param] == lIOOIOl) {
                        if (es[i3].pm[param] == old_uid) {
                            es[i3].pm[param] = es[i2].pm.uid;
                        }
                    }
                }
            }
        }
        if (typeof es[i2].pm.x !== lICOIOGil)
            if (typeof es[i2].pm.y !== lICOIOGil) {
                lnd(llcDiOGll + i2 + lICOICDIl + es[i2].pm.x + lIOOlOOIl);
                lnd(llcDiOGll + i2 + lICDlcDIl + es[i2].pm.y + lIOOlOOIl);
                es[i2].pm.x += lo_x;
                es[i2].pm.y += lo_y;
                es[i2].fixPos();
                ldn(llcDiOGll + i2 + lICOICDIl + es[i2].pm.x + lIOOlOOIl);
                ldn(llcDiOGll + i2 + lICDlcDIl + es[i2].pm.y + lIOOlOOIl);
            }
    }
    lfz(false);
    return true;
}
function canv_blur() {
    unboost_y = false;
    boost_y = false;
    unboost_x = false;
    boost_x = false;
    recalc_speed_y();
    recalc_speed_x();
    k_shift = false;
    ctrl = false;
    space = false;
    alt = false;
}
function MatchLayer(elem) {
    return lacl[class_to_layer[elem._class]];
}
var letediting = false;
var lettarget = null;
var letediting_mode = liOGIcl;
var ff = document.getElementById(liODIOGIl);
var ff_drop = document.getElementById(lIcDicGIl);
var over_obj = null;
var over_enablemode = 0;
var let_focused = false;
function letout() {
    if (!letediting) {
        ff.style.display = lIcGiODil;
        if (let_focused) ff.blur();
        let_focused = false;
    }
}
function lapa(enablemode) {
    switch (enablemode) {
        case lIOOIOl:
        case lICDICl:
        case lIcOiOl:
        case lIOGICl:
        case llODicl:
        case llOGICl:
        case llcDIcl:
        case llCDICOll:
        case llCDlOGil:
        case llcOIODll:
            return false;
    }
    return true;
}
function letover(obj, enablemode) {
    if (!letediting) {
        ff.blur();
        if (enablemode != lICDIOl)
            if (!lapa(enablemode)) {
                var rect = obj.getBoundingClientRect();
                ff.style.left = rect.left + licOlcDll;
                ff.style.top = rect.top + licOlcDll;
                ff.style.width = rect.width + licOlcDll;
                ff.style.height = rect.height + licOlcDll;
                ff.className = lIOGIODll + obj.className;
                ff.style.backgroundColor = liOOICGil;
                ff.style.borderTop = ff.style.borderLeft = ff.style.borderRight = liOOlcGIl;
                ff.style.borderBottom = liOOIODIl;
                var strinput = obj.innerHTML.replace(/<\/?[^>]+(>|$)/g, liOGIcl);
                strinput = strinput.split(lICDiODIl).join(lIODIcDil);
                ff.value = strinput;
                ff.style.display = llCOIODll;
                over_obj = obj;
                over_enablemode = enablemode;
            }
    }
}
function letonfocus() {
    if (!letediting) {
        letedit(over_obj, over_enablemode);
    }
    let_focused = true;
}
function setletedit(val1, val2, defval) {
    quick_pick = false;
    quick_pick_ignore_one_click = false;
    if (val1.indexOf(llOOlCOl) != -1) {
        defval = Math.abs(Number(defval));
        var txt = prompt(licOlCDil, defval);
        var gotval;
        if (txt == null || txt == liOGIcl) {
            gotval = Math.abs(defval);
        } else {
            gotval = Math.abs(txt);
        }
        val1 = eval(val1.replace(llOOlCOl, gotval));
        val2 = val2.replace(lIOOiOOll, gotval);
    } else if (val1.indexOf(lIcDiCDil) != -1) {
        defval = Math.abs(Number(defval));
        var gotval = prompt(llcDiCDil, defval);
        if (gotval.charAt(0) != lIOOiOOll) {
            gotval = lIOOiOOll + gotval;
        }
        if (gotval.length != 7) alert(licOiOGll + gotval + llODiOOll);
        val1 = val1.replace(lIcDiCDil, gotval);
        val2 = val2.replace(lIOOiOOll, gotval);
    }
    ff.value = lIOGlOGIl + val1 + lIcGlOGll + val2 + lIcDIOGil;
    lettarget.innerHTML = ff.value;
    ff.style.display = lIcGiODil;
    ff_drop.style.display = lIcGiODil;
    letediting = false;
    UpdatePhysicalParam(lettarget.id.replace(liCDIcGll, liOGIcl), val1);
    var parameter_updated = lettarget.id.replace(liCDIcGll, liOGIcl);
    if (parameter_updated == lIcGicl || (parameter_updated.indexOf(licDicDl) != -1 && parameter_updated.indexOf(llCOlOGl) != -1)) StreetMagic();
}
function lgprv(pobject) {
    try {
        var text = pobject.innerHTML;
        if (window.DOMParser) {
            parser = new DOMParser();
            xmlDoc = parser.parseFromString(text, llCOlOOll);
        } else {
            xmlDoc = new ActiveXObject(llCOICGll);
            xmlDoc.async = false;
            xmlDoc.loadXML(text);
        }
        return xmlDoc.childNodes.item(0).getAttribute(llCOICDil);
    } catch (err) {
        return undefined;
    }
}
function lcrpl(_str, _what, _with) {
    return String(_str).split(_what).join(_with);
}
function letedit(obj, enablemode) {
    ff_drop.style.display = lIcGiODil;
    if (enablemode != lICDIOl) {
        var rect = obj.getBoundingClientRect();
        ff.style.left = rect.left + licOlcDll;
        ff.style.top = rect.top + licOlcDll;
        ff.style.width = rect.width + licOlcDll;
        ff.style.height = rect.height + licOlcDll;
        ff.className = lIOGIODll + obj.className;
        ff.style.backgroundColor = liODIcGll;
        ff.style.borderColor = llCGICGil;
        var strinput = obj.innerHTML;
        if (strinput == liCDlcDIl) ff.value = lICOlOGll;
        else if (strinput == llOGiOGll) ff.value = liOGIcl;
        else ff.value = strinput.split(lICDiODIl).join(lIODIcDil);
        letediting_mode = enablemode;
        lettarget = obj;
        letediting = true;
        var islapa = lapa(enablemode);
        if (islapa) {
            var post_set_html_callback = null;
            ff.style.display = lIcGiODil;
            var addonw = 0;
            switch (enablemode) {
                case llOGlCl:
                    addonw = 60;
                    break;
                case llODicGl:
                    addonw = 450;
                    break;
                case llODIODl:
                    addonw = 150;
                    break;
            }
            ff_drop.style.display = llODiOGil;
            ff_drop.style.left = rect.left - addonw + licOlcDll;
            ff_drop.style.top = rect.top + rect.height + licOlcDll;
            ff_drop.style.width = rect.width + addonw + licOlcDll;
            var paramsout = liOGIcl;
            var active_param = lgprv(obj);
            quick_pick = false;
            quick_pick_ignore_one_click = false;
            lqpc = new Array();
            quick_pick_active_param = liOGIcl;
            var he = 3 + 3 + 2;
            for (i in special_values_table[enablemode]) {
                if (i == lIOGlODl || i == lIcGICDl) {
                    lqpc.push(special_values_table[enablemode][i]);
                    quick_pick = true;
                    quick_pick_ignore_one_click = true;
                    quick_pick_active_param = active_param;
                    quick_pick_fake_over = -1;
                    need_redraw = true;
                    for (i2 = 0; i2 < es.length; i2++)
                        if (es[i2].exists)
                            if (es[i2]._class == special_values_table[enablemode][i]) {
                                he += 3 + 16 + 3;
                                paramsout +=
                                    llcOIcOil +
                                    es[i2].pm.uid +
                                    llCDlOGll +
                                    lcrpl(es[i2].pm.uid, llCOlCDIl, licGICGIl) +
                                    llCDlOGll +
                                    active_param +
                                    llCDlCOil +
                                    i2 +
                                    liCGicDll +
                                    (active_param == es[i2].pm.uid ? llODiCDIl : llCGIODIl) +
                                    lIOGlcGIl +
                                    lrp(i2) +
                                    liCGlOGil;
                            }
                } else {
                    he += 3 + 16 + 3;
                    paramsout +=
                        llcOIcOil +
                        i +
                        llCDlOGll +
                        lcrpl(special_values_table[enablemode][i], llCOlCDIl, licGICGIl) +
                        llCDlOGll +
                        active_param +
                        liCDIcOIl +
                        (active_param == i ? llODiCDIl : llCGIODIl) +
                        lIOGlcGIl +
                        special_values_table[enablemode][i] +
                        liCGlOGil;
                }
            }
            he = Math.max(20, Math.min(he, 500));
            if (rect.top + rect.height + he > window.innerHeight) {
                he = window.innerHeight - (rect.top + rect.height);
            }
            if (enablemode == llODicGl) {
                addonw = 700;
                ff_drop.style.top = liCGIODIl;
                he = window.innerHeight;
                ff_drop.style.left = rect.left - addonw + licOlcDll;
                ff_drop.style.width = addonw + licOlcDll;
                var group_code = licGiCOil + (addonw - 32) + llCOiCDil;
                group_code += lIOGicOIl + tr_type_tags[i] + lICDlcGIl;
                for (i in tr_type_tags) group_code += liCGIOGll + tr_type_tags[i] + liODIcOIl + i + liODiOOil + tr_type_tags[i] + licOlODIl + i + liCGlOGil;
                group_code += llCGlOOIl + tr_type_tags[i] + licDicDIl;
                group_code += llcOlCDil;
                group_code += licGiCOil + (addonw - 32) + llCOiCDil;
                group_code += llCDicGIl;
                group_code += llcOlCDil;
                paramsout = group_code + paramsout;
                post_set_html_callback = function (ff_drop) {
                    document.getElementById(lICOlODil).focus();
                };
            }
            if (paramsout == liOGIcl) {
                paramsout += licGiCGll;
                switch (Math.floor(Math.random() * 11)) {
                    case 0:
                        paramsout += lIODIOGIl + special_values_table[enablemode][lIOGlODl] + llODlODIl;
                        break;
                    case 1:
                        paramsout += llcOiCOil + special_values_table[enablemode][lIOGlODl] + lICOIcDil;
                        break;
                    case 2:
                        paramsout += llODiCOil + special_values_table[enablemode][lIOGlODl] + lICOIcDil;
                        break;
                    case 3:
                        paramsout += lIOOlOGll + special_values_table[enablemode][lIOGlODl] + lICOIcDil;
                        break;
                    case 4:
                        paramsout += llCDIOGil + special_values_table[enablemode][lIOGlODl] + llcGlOOIl;
                        break;
                    case 5:
                        paramsout += llCOiCGIl + special_values_table[enablemode][lIOGlODl] + lICOIcDil;
                        break;
                    case 6:
                        paramsout += licOlcGll + special_values_table[enablemode][lIOGlODl] + llCOiCOil;
                        break;
                    case 7:
                        paramsout += licDIcGIl + special_values_table[enablemode][lIOGlODl] + llODlODIl;
                        break;
                    case 8:
                        paramsout += liCOiCDil + special_values_table[enablemode][lIOGlODl] + liCOlcDil;
                        break;
                    case 9:
                        paramsout += liCGicOil + special_values_table[enablemode][lIOGlODl] + licGicDll + special_values_table[enablemode][lIOGlODl] + licOICOIl;
                        break;
                    default:
                        paramsout += lICOlcOll + special_values_table[enablemode][lIOGlODl] + lICGIcDIl;
                        break;
                }
                paramsout += lICDIcDl;
                he += 30;
            }
            ff_drop.style.height = he + licOlcDll;
            ff_drop.innerHTML = paramsout;
            ff_drop.focus();
            if (enablemode == liCGlcl || enablemode == lICDiOl) {
                ff_drop.innerHTML = liOGIcl;
                ff.style.display = lIcGiODil;
                BrowseImages(enablemode, active_param, function (new_value, new_value_title) {
                    setletedit(new_value, new_value_title, active_param);
                });
            }
            if (post_set_html_callback !== null) post_set_html_callback(ff_drop);
        } else {
            ff.style.display = llCOIODll;
            if (!let_focused) ff.focus();
        }
        stopedit(null);
    }
}
function MaskTriggerActions(hex, extra_mentions) {
    var extra_word = extra_mentions;
    if (hex == llcGlCDll) extra_word = extra_word.toLowerCase();
    else extra_word = lIcGiOl + extra_word.toLowerCase();
    for (var i = 0; i < ff_drop.childNodes.length; i++) {
        var html = ff_drop.childNodes[i].innerHTML;
        if (hex != liOGIcl && html.indexOf(hex) == -1 && html.toLowerCase().indexOf(extra_word) == -1 && html.indexOf(lIOOIcGl) == -1) {
            ff_drop.childNodes[i].style.display = lIcGiODil;
        } else {
            ff_drop.childNodes[i].style.display = llODiOGil;
        }
    }
}
var allowed_string_chars = llCOICGil;
var allowed_value_chars = lIODlOGIl;
function stopedit(event) {
    var keyCode;
    if (event == null) keyCode = -1;
    else keyCode = lIOOiCGll in event ? event.which : event.keyCode;
    if (letediting) {
        var valid = true;
        var fixable = true;
        var chvalue = ff.value;
        if (chvalue != lICOlOGll) {
            switch (letediting_mode) {
                case lIOOIOl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_string_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            break;
                        }
                    }
                    break;
                case lICDICl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_value_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            fixable = false;
                            break;
                        }
                    }
                    if (Math.round(Number(chvalue) / 10) != Number(chvalue) / 10) {
                        valid = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case lIcOiOl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_value_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            fixable = false;
                            break;
                        }
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case lIOGICl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_value_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            fixable = false;
                            break;
                        }
                    }
                    if (Math.round(Number(chvalue)) != Number(chvalue)) {
                        valid = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case llOGICl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_value_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            fixable = false;
                            break;
                        }
                    }
                    if (Number(chvalue) >= 0) {
                    } else {
                        valid = false;
                        fixable = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case llODicl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_value_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            fixable = false;
                            break;
                        }
                    }
                    if (Number(chvalue) == 0) {
                        valid = false;
                        fixable = false;
                    }
                    if (Math.round(Number(chvalue) / 10) != Number(chvalue) / 10) {
                        valid = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case llCDlOGil:
                    if (Number(chvalue) < 0) {
                        valid = false;
                        fixable = false;
                    }
                    if (Math.round(Number(chvalue)) != Number(chvalue)) {
                        valid = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case llcOIODll:
                    if (Number(chvalue) <= 0) {
                        valid = false;
                        fixable = false;
                    }
                    if (Math.round(Number(chvalue)) != Number(chvalue)) {
                        valid = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
            }
        }
        if (fixable) {
            if (valid) {
                ff.style.backgroundColor = liODIcGll;
                ff.style.borderColor = llCGICGil;
            } else {
                ff.style.backgroundColor = lIcDicDil;
                ff.style.borderColor = licGlODIl;
            }
        } else {
            ff.style.backgroundColor = liOGlCDll;
            ff.style.borderColor = lICDICDll;
        }
        if (keyCode == 13) {
            if (fixable) {
                if (chvalue == lICOlOGll) {
                } else {
                    switch (letediting_mode) {
                        case lIOOIOl:
                            var new_string = liOGIcl;
                            for (var i = 0; i < chvalue.length; i++) {
                                if (allowed_string_chars.indexOf(chvalue.charAt(i)) != -1) {
                                    new_string += chvalue.charAt(i);
                                }
                            }
                            chvalue = new_string;
                            break;
                        case lICDICl:
                            chvalue = Math.round(Number(chvalue) / 10) * 10;
                            break;
                        case lIcOiOl:
                            chvalue = Number(chvalue);
                            break;
                        case lIOGICl:
                            chvalue = Math.round(Number(chvalue));
                            break;
                        case llOGICl:
                            if (Number(chvalue) < 0) chvalue = 0;
                            else chvalue = Number(chvalue);
                            break;
                        case llODicl:
                            if (Number(chvalue) < 10) chvalue = 10;
                            else chvalue = Math.round(Number(chvalue) / 10) * 10;
                            break;
                        case llcOIODll:
                            if (Number(chvalue) < 1) chvalue = 1;
                            else chvalue = Math.round(Number(chvalue));
                            break;
                        case llCDlOGil:
                            if (Number(chvalue) < 0) chvalue = 0;
                            else chvalue = Math.round(Number(chvalue));
                            break;
                    }
                    if (isNaN(chvalue) && chvalue == liOGIcl) lettarget.innerHTML = llOGiOGll;
                    else lettarget.innerHTML = chvalue;
                    UpdatePhysicalParam(lettarget.id.replace(liCDIcGll, liOGIcl), chvalue);
                }
                ff.style.display = lIcGiODil;
                letediting = false;
            } else {
            }
        }
    }
}
function UpdatePhysicalParam(paramname, chvalue) {
    lcz();
    var layer_mismatch = false;
    var list_changes = liOGIcl;
    for (var elems = 0; elems < es.length; elems++)
        if (es[elems].exists)
            if (es[elems].selected) {
                if (es[elems].pm.hasOwnProperty(paramname)) {
                    if (MatchLayer(es[elems])) {
                        var lup = typeof paramname == lIOOIOl ? llCGIcGIl + paramname + llCGIcGIl : paramname;
                        if (typeof chvalue == liOGicDll || chvalue == 0) {
                            lnd(llcDiOGll + elems + liODIcGil + lup + lICOicDll + es[elems].pm[paramname] + lIOOlOOIl);
                            ldn(llcDiOGll + elems + liODIcGil + lup + lICOicDll + chvalue + lIOOlOOIl);
                            es[elems].pm[paramname] = Number(chvalue);
                        } else if (typeof chvalue == lIOOIOl) {
                            lnd(llcDiOGll + elems + liODIcGil + lup + liCDlCDIl + es[elems].pm[paramname] + liCGIcOIl);
                            ldn(llcDiOGll + elems + liODIcGil + lup + liCDlCDIl + chvalue + liCGIcOIl);
                            es[elems].pm[paramname] = chvalue;
                        } else {
                            alert(llCOiODil + typeof chvalue);
                        }
                        list_changes += lICDlODil + paramname + liOGlODil + (es[elems].pm.uid != null ? es[elems].pm.uid : es[elems]._class) + liCOicOll + chvalue + liCGiCGll;
                    } else layer_mismatch = true;
                }
            }
    need_redraw = true;
    NewNote(llODicOil + list_changes, note_passive);
    if (layer_mismatch) NewNote(liCDlCDll, note_neutral);
    lfz(false);
}
function UpdatePhysicalParams(paramname_arr, chvalue_arr, forcefully_create_params) {
    lcz();
    var layer_mismatch = false;
    var list_changes = liOGIcl;
    for (var elems = 0; elems < es.length; elems++)
        if (es[elems].exists)
            if (es[elems].selected)
                for (var par = 0; par < paramname_arr.length; par++) {
                    var paramname = paramname_arr[par];
                    var chvalue = chvalue_arr[par];
                    if (forcefully_create_params || es[elems].pm.hasOwnProperty(paramname)) {
                        if (MatchLayer(es[elems])) {
                            var lup = typeof paramname == lIOOIOl ? llCGIcGIl + paramname + llCGIcGIl : paramname;
                            if (typeof chvalue == liOGicDll || chvalue == 0) {
                                lnd(llcDiOGll + elems + liODIcGil + lup + lICOicDll + es[elems].pm[paramname] + lIOOlOOIl);
                                ldn(llcDiOGll + elems + liODIcGil + lup + lICOicDll + chvalue + lIOOlOOIl);
                                es[elems].pm[paramname] = Number(chvalue);
                                if (chvalue === delete_addr) ldn(lICGiOOil + elems + liODIcGil + lup + liCOlcGIl);
                            } else if (typeof chvalue == lIOOIOl) {
                                lnd(llcDiOGll + elems + liODIcGil + lup + liCDlCDIl + es[elems].pm[paramname] + liCGIcOIl);
                                ldn(llcDiOGll + elems + liODIcGil + lup + liCDlCDIl + chvalue + liCGIcOIl);
                                es[elems].pm[paramname] = chvalue;
                                if (chvalue === delete_addr) ldn(lICGiOOil + elems + liODIcGil + lup + liCOlcGIl);
                            } else {
                                alert(llCOiODil + typeof chvalue);
                            }
                            list_changes += lICDlODil + paramname + liOGlODil + (es[elems].pm.uid != null ? es[elems].pm.uid : es[elems]._class) + liCOicOll + chvalue + liCGiCGll;
                        } else layer_mismatch = true;
                    }
                }
    need_redraw = true;
    NewNote(llODicOil + list_changes, note_passive);
    if (layer_mismatch) NewNote(liCDlCDll, note_neutral);
    lfz(false);
}
var timeout_unfocusedit = -1;
function cancelable_unfocusedit() {
    timeout_unfocusedit = setTimeout(function () {
        unfocusedit();
    }, 2);
}
function cancel_unfocusedit() {
    setTimeout(function () {
        if (timeout_unfocusedit != -1) window.clearTimeout(timeout_unfocusedit);
        timeout_unfocusedit = -1;
    }, 1);
}
function unfocusedit() {
    if (quick_pick) {
        for (i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._isphysical) {
                    if (es[i]._isresizable) {
                        var x1 = w2s_x(es[i].pm.x);
                        var x2 = w2s_w(es[i].pm.w);
                        var y1 = w2s_y(es[i].pm.y);
                        var y2 = w2s_h(es[i].pm.h);
                    } else {
                        var this_class = ThinkOfBBoxClass(es[i]._class, es[i]);
                        var y1 = w2s_y(es[i].pm.y + bo_y[this_class]);
                        var y2 = w2s_h(bo_h[this_class]);
                        if (es[i].pm.side != -1) {
                            var x1 = w2s_x(es[i].pm.x + bo_x[this_class]);
                            var x2 = w2s_w(bo_w[this_class]);
                        } else {
                            var x1 = w2s_x(es[i].pm.x - bo_x[this_class]);
                            var x2 = w2s_w(-bo_w[this_class]);
                            x1 += x2;
                            x2 = -x2;
                        }
                    }
                    if (lqpc.indexOf(es[i]._class) != -1) {
                        if (Math.sqrt(Math.pow(x1 + x2 / 2 - mouse_x, 2) + Math.pow(y1 + y2 / 2 - mouse_y, 2)) < 20 * quick_pick_hit_scale) {
                            setletedit(es[i].pm.uid, lcrpl(es[i].pm.uid), quick_pick_active_param);
                            break;
                        }
                    }
                }
        need_redraw = true;
        quick_pick = false;
    }
    if (letediting) {
        letediting_mode = liOGIcl;
        ff.style.display = lIcGiODil;
        letediting = false;
        ff_drop.style.display = lIcGiODil;
    }
    let_focused = false;
}
var ERROR_VALUE = lIODicDIl;
var gui_params = document.getElementById(liOOICOIl);
var gui_objbox = document.getElementById(liCGlOOll);
var tools_box = document.getElementById(llOOlCOll);
var objboxhider = document.getElementById(llCGlOGil);
function tonumerous(str, num) {
    if (num == 1) return str;
    if (
        str.charAt(str.length - 1) == llcOlCGl ||
        str.charAt(str.length - 1) == lIcGiCDIl ||
        str.charAt(str.length - 1) == llcOICl ||
        (str.charAt(str.length - 1) == liOGicl && (str.charAt(str.length - 2) == llcOlCGl || str.charAt(str.length - 2) == llOGlOl))
    )
        return str + lIODlOOll;
    if (str.charAt(str.length - 1) == licOicl && str.charAt(str.length - 2) != licGlCl) return str.substring(0, str.length - 1) + lIOGICDll;
    if (str.charAt(str.length - 1) == lIOGIOGIl && str.charAt(str.length - 2) != llCOICOil) return str + llcOlCGl;
    return str + llcOlCGl;
}
function FindMachingParameterID(fm_parameter, fm_class) {
    for (var i2 = 0; i2 < param_type.length; i2++) {
        if (param_type[i2][4] == liOOIOl || param_type[i2][4] == fm_class) {
            if (param_type[i2][0] == fm_parameter) return i2;
        }
    }
    return -1;
}
function special_value(base, val) {
    if (base == liCGlcl || base == lICDiOl) {
        if (special_values_table[base][val] == undefined) ServerRequest(liODlCGl + base + llcGlcOl + val, llODIcOl);
        if (special_values_table[base][val] != undefined) return (CUSTOM_IMAGES_APPROVED[val] ? liOGlcDll : liCOiCGll) + lIcGiOl + special_values_table[base][val];
        return llCDlcDil + val;
    }
    switch (base) {
        case lIcGlcl:
        case lIcDiCl: {
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            return liODICGll + val;
        }
        case liOOiCl:
        case licGiCOl:
        case llOGlCl:
        case lICOIcl:
        case llCDlcl:
        case liCGlcl:
        case lIOOIcl:
        case lIODlcGl:
        case lICDlOl:
        case lICDiOl:
        case licOlcl:
        case llCOiOl:
        case lIcGlCDil:
        case llODicGl:
        case licGIOl:
        case lICDlcl:
        case llODIODl:
        case lICGIODll:
        case lIOGICGil: {
            if (base == lIODlcGl) {
                if (val === true) val = 1;
                if (val === false) val = 0;
            }
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            if (base == lICGIODll) {
                if (val.charAt(0) == lIOOiOOll && val.length == 7) return liCGlODll + val;
            }
            ConsoleTace(llCDlCGIl + val + licOicGll + base + llODIOOll);
            return ERROR_VALUE;
        }
        case lICGIOl: {
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            if (val > 0) return val + lICDlCDil;
            return -val + llcOIOOIl;
        }
        case lIOOlCl: {
            if (val == 1) val = llOOlcl;
            if (val == 0) val = lICDIODl;
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            return ERROR_VALUE;
        }
        case llCGICl:
        case llCOIl:
        case lIcGIOl:
        case llCOICDl:
        case llcGll:
        case liODll:
        case liOGICl:
        case licDlCl:
        case llCDIcl:
        case lIODll:
        case lIOGIl:
        case licGil:
        case liCGIl:
        case liCDicl:
        case liCGiODl: {
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            if (special_values_table[base][lIOGlODl] != undefined) {
                if (isNaN(val) && val.charAt(0) == lIOOiOOll) {
                    for (var si = 0; si < es.length; si++)
                        if (es[si].exists)
                            if (es[si]._class == special_values_table[base][lIOGlODl] || es[si]._class == special_values_table[base][lIcGICDl]) {
                                if (es[si].pm.uid == val) return es[si].pm.uid;
                            }
                } else {
                    var inco = 0;
                    for (var si = 0; si < es.length; si++)
                        if (es[si].exists)
                            if (es[si]._class == special_values_table[base][lIOGlODl] || es[si]._class == special_values_table[base][lIcGICDl]) {
                                if (inco == val) return es[si].pm.uid;
                                inco++;
                            }
                }
            }
            ConsoleTace(llCDlCGIl + val + licOicGll + base + llCOlOOil);
            return ERROR_VALUE;
        }
        case lIcGIcl: {
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            if (val == 1) return val + lIcGiOGll;
            if (val > 1 || val == 0) return val + llCGICOll;
        }
        default: {
            ConsoleTace(lICDlODil + base + llCDlOOll);
            return ERROR_VALUE;
        }
    }
}
function GenParamVal(base, val) {
    if (base == lIOOIOl || base == lICDICl || base == lIcOiOl || base == llcDIcl || base == lIOGICl || base == llODicl || base == llOGICl || base == llcOIODll || base == llCDlOGil) return val;
    if (base == lICDIOl) return lIOGlOGIl + val + liOGlCOil;
    return lIOGlOGIl + val + lIcGlOGll + special_value(base, val) + lIcDIOGil;
}
var current_gui_params = new Array();
function ForceDeselect() {
    for (i = 0; i < es.length; i++) if (es[i].selected) es[i].selected = false;
    need_GUIParams_update = true;
    need_redraw = true;
}
var edit_triggers_as_text = false;
var delete_addr = { val: liODICGIl };
function CompileTrigger() {
    var opcode_field = document.getElementById(licGiODil);
    var code = opcode_field.value;
    var code_lines = code.split(licOlCGll);
    var new_trigger_actions = [];
    var direct_update_params = [];
    var direct_update_values = [];
    function ScheduleParamSet(a, b) {
        direct_update_params.push(a);
        direct_update_values.push(b);
    }
    function getAllIndexes(arr, val) {
        var indexes = [],
            i = -1;
        while ((i = arr.indexOf(val, i + 1)) != -1) {
            indexes.push(i);
        }
        return indexes;
    }
    for (var i = 0; i < code_lines.length; i++) {
        var line = code_lines[i];
        var paramA_start = line.indexOf(llCGlcGil);
        var separator = line.indexOf(llcOlcOil);
        var end = line.indexOf(lIODICGil);
        var semicolon = line.indexOf(liCDlODil);
        if (paramA_start != -1 && separator != -1 && end != -1) {
            var first_c = line.indexOf(llCDIcGil);
            var opcode = line.substring(0, first_c);
            var action_type = -1;
            if (opcode.substring(0, 2) == lIOGIcGil && !isNaN(opcode.slice(2))) action_type = parseInt(opcode.slice(2));
            else {
                action_type = trigger_opcode_aliases.indexOf(opcode);
                if (action_type == -1) {
                    NewNote(licGlCDil + opcode + liCOIcDll, note_neutral);
                    return;
                }
            }
            var valueA = liOGIcl;
            var valueB = liOGIcl;
            if (action_type != -1) {
                valueA = line.substring(paramA_start + 3, separator);
                valueB = line.substring(separator + 4, end);
            }
            if (new_trigger_actions.length < 10) new_trigger_actions.push([action_type, valueA, valueB]);
            else {
                NewNote(llODICOil, note_neutral);
                return;
            }
        } else if (semicolon != -1) {
            var left_part = line.substring(0, semicolon);
            var right_part = line.slice(semicolon + 1);
            while (left_part.charAt(0) == lIcGiOl) left_part = left_part.slice(1);
            while (left_part.charAt(left_part.length - 1) == lIcGiOl) left_part = left_part.slice(0, -1);
            while (right_part.charAt(0) == lIcGiOl) right_part = right_part.slice(1);
            while (right_part.charAt(right_part.length - 1) == lIcGiOl) right_part = right_part.slice(0, -1);
            if (left_part == llCGiOl || left_part == lIcGiCl || left_part == lIcGIcl) ScheduleParamSet(left_part, right_part);
            else NewNote(licGlCDil + left_part + llOGiCGll, note_neutral);
        } else if (line != liOGIcl) {
            NewNote(llCOiOOll + line + llODicGil, note_neutral);
            return;
        }
    }
    var action = 1;
    for (var i = 0; i < new_trigger_actions.length; i++) {
        ScheduleParamSet(licDicDl + action + llCOlOGl, new_trigger_actions[i][0]);
        ScheduleParamSet(licDicDl + action + licDlcGl, new_trigger_actions[i][1]);
        ScheduleParamSet(licDicDl + action + liODICOl, new_trigger_actions[i][2]);
        action++;
    }
    var last_action = 10;
    while (action <= last_action) {
        ScheduleParamSet(licDicDl + action + llCOlOGl, -1);
        ScheduleParamSet(licDicDl + action + licDlcGl, liOGIcl);
        ScheduleParamSet(licDicDl + action + liODICOl, liOGIcl);
        action++;
    }
    UpdatePhysicalParams(direct_update_params, direct_update_values, false);
    return true;
}
function UpdateGUIParams() {
    current_gui_params = new Array();
    unfocusedit();
    ff.style.display = lIcGiODil;
    var str = liOGIcl;
    var selects = 0;
    var sel_by_class = new Array();
    for (i = 0; i < known_class.length; i++) {
        sel_by_class[i] = 0;
    }
    var uids_list = liOGIcl;
    for (i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].selected) {
                selects++;
                sel_by_class[known_class.indexOf(es[i]._class)]++;
                if (es[i].pm.uid != undefined) {
                    if (uids_list.length > 0) uids_list += llOGlcOll;
                    uids_list += llCGIcGIl + es[i].pm.uid + llCGIcGIl;
                }
            }
    var full_list = liOGIcl;
    var classes_selected = 0;
    for (i = 0; i < known_class.length; i++)
        if (sel_by_class[i] > 0) {
            if (full_list.length > 0) full_list += llOGlcOll;
            classes_selected++;
            full_list += sel_by_class[i] + lIcGiOl + tonumerous(known_class_title[i], sel_by_class[i]);
        }
    if (classes_selected > 0) {
        if (classes_selected == 1)
            if (uids_list.length > 0) {
                full_list += llOOIcGIl + uids_list;
            }
        full_list = licOICDIl + full_list + liCDlOl;
        full_list += llcDicOil;
    }
    if (selects == 0) str += lIOOlcOIl;
    else if (selects == 1) str += llCOlOGil + selects + lIcGIcOIl + full_list + lIcOiOGIl;
    else str += llCOlOGil + selects + lICGlcDIl + full_list + lIcOiOGIl;
    var first_selected_object = null;
    var params_to_display = new Array();
    var paramscount_to_display = new Array();
    var paramsvalue_to_display = new Array();
    var param_associated = new Array();
    for (var i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].selected) {
                if (first_selected_object == null) first_selected_object = es[i];
                var parameter;
                for (parameter in es[i].pm) {
                    var ind2 = FindMachingParameterID(parameter, es[i]._class);
                    var ind = params_to_display.indexOf(ind2);
                    if (ind == -1) {
                        if (ind2 != -1) {
                            params_to_display.push(ind2);
                            paramscount_to_display.push(1);
                            paramsvalue_to_display.push(es[i].pm[parameter]);
                            param_associated.push(parameter);
                        }
                    } else {
                        paramscount_to_display[ind]++;
                    }
                }
            }
    if (edit_triggers_as_text && selects == 1 && first_selected_object._class == llCOIl) {
        str += lIODicGil;
        str += lIcDICDil;
        str += lICDICOll;
        var code_lines = liOGIcl;
        code_lines += licDiCGIl + first_selected_object.pm.uid + licOlCGll;
        code_lines += lICDlCGll + first_selected_object.pm.enabled + licOlCGll;
        code_lines += lICDIODil + first_selected_object.pm.maxcalls + licOlCGll;
        code_lines += licOlCGll;
        for (var i = 1; first_selected_object.pm[licDicDl + i + llCOlOGl] != undefined; i++) {
            if (first_selected_object.pm[licDicDl + i + llCOlOGl] == -1) continue;
            if (trigger_opcode_aliases[first_selected_object.pm[licDicDl + i + llCOlOGl]] == undefined) code_lines += lIOGIcGil + first_selected_object.pm[licDicDl + i + llCOlOGl];
            else code_lines += trigger_opcode_aliases[first_selected_object.pm[licDicDl + i + llCOlOGl]];
            code_lines += llCOlODll;
            code_lines += llCGIcGIl + first_selected_object.pm[licDicDl + i + licDlcGl] + llCGIcGIl;
            code_lines += llOGlcOll;
            code_lines += llCGIcGIl + first_selected_object.pm[licDicDl + i + liODICOl] + llCGIcGIl;
            code_lines += llOGlcDIl;
        }
        str += code_lines.split(liOOiOOIl).join(liCOIcDil).split(liOGiCOl).join(llcDiCOll);
        str += llcDiOOll;
        str += llcDICOIl;
    } else {
        var pre_temp = licGIcDil;
        var post_temp = lIOGiODil;
        var last_i = params_to_display.length - 2;
        if (params_to_display.length == 1) {
            pre_temp = liOGlcDil;
            post_temp = liODiCGIl;
        }
        var value;
        for (i = 0; i < params_to_display.length; i++) {
            if (paramscount_to_display[i] == 1) {
                value = GenParamVal(param_type[params_to_display[i]][1], paramsvalue_to_display[i]);
            } else value = liCDlcDIl;
            current_gui_params.push(param_associated[i]);
            str +=
                pre_temp +
                param_type[params_to_display[i]][2] +
                post_temp +
                param_type[params_to_display[i]][1] +
                liCDlODIl +
                param_type[params_to_display[i]][1] +
                lIODlcDIl +
                liCDIcGll +
                param_type[params_to_display[i]][0] +
                lIcGlOGll +
                value +
                liCGicGil;
            if (first_selected_object._class == llCOIl)
                if (i >= 4 && (i - 4) % 3 == 0) {
                    str += llcGICOil;
                }
            if (i == last_i) {
                pre_temp = liCGlCDil;
                post_temp = lICGicGIl;
            } else if (i == 0) {
                pre_temp = llcOIcOIl;
                post_temp = llcGIOGll;
            }
        }
    }
    if (selects == 1 && first_selected_object._class == llCOIl) {
        if (edit_triggers_as_text) str += lIcOicOIl;
        else str += llOGlCGil;
    }
    str += llcOlCDil;
    gui_params.innerHTML = str;
    StreetMagic();
}
function innerHTML_to_value(_html) {
    if (_html.indexOf(llcGiOOil) != -1) {
        return liCDlcDIl;
    }
    var _from = _html.indexOf(lIOGlOGIl);
    var _to = _html.indexOf(lIcGlOGll);
    if (_from != -1) if (_to != -1) return _html.substr(_from + 14, _to - (_from + 14));
    return _html;
}
function StreetMagic() {
    var mark_obj = document.getElementById(llCOlcDll);
    if (mark_obj != null) {
        var our_case = mark_pairs[llcGlOOll + innerHTML_to_value(mark_obj.innerHTML)];
        var valobj = document.getElementById(licDlCOIl);
        if (our_case == undefined) our_case = lICDIOl;
        eval(liOOIODil + our_case + llcDlCGll);
        eval(licGicGll + our_case + llcDlCGll);
        valobj.innerHTML = GenParamVal(our_case, innerHTML_to_value(valobj.innerHTML));
    }
    for (var i = 1; i <= 10; i++) {
        var mark_obj = document.getElementById(llCGICGIl + i + llCOlOGl);
        if (mark_obj != null) {
            var cases = llcGlCOil;
            for (var i2 = 0; i2 < 2; i2++) {
                var our_case = mark_pairs[liODlCDIl + cases + innerHTML_to_value(mark_obj.innerHTML)];
                var valobj = document.getElementById(llCGICGIl + i + liODicGil + cases);
                if (our_case == undefined) our_case = lICDIOl;
                eval(liOOIODil + our_case + llcDlCGll);
                eval(licGicGll + our_case + llcDlCGll);
                valobj.innerHTML = GenParamVal(our_case, innerHTML_to_value(valobj.innerHTML));
                cases = llCOiOOIl;
            }
        } else break;
    }
}
function lrpc(class_id) {
    return lICDicOil + class_id + lIOOICDIl;
}
function lrp(obj_i) {
    return lrpc(es[obj_i]._class) + lIcGiOl + (es[obj_i].pm.uid == undefined ? known_class2known_class_title(es[obj_i]._class) : es[obj_i].pm.uid);
}
function UpdateGUIObjectsList() {
    if (ObjectBox_visible) {
        var pos = gui_objbox.scrollTop;
        var str = liOGIcl;
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (MatchLayer(es[i])) {
                    str += lIcOICOll + i + llCDicOll + (es[i].selected ? "1" : "0") + llcOicOll + i + liCOICOll + lrp(i);
                    if (es[i]._class == lICGIl) str += licOICDIl + special_values_table[llCOiOl][es[i].pm.mark] + liCDlOl;
                    str += llcOlCDil;
                }
        gui_objbox.innerHTML = str;
        gui_objbox.scrollTop = pos;
    }
}
var lacl = new Array();
var name_layers = new Array();
var class_to_layer = new Array();
var possible_tools = new Array();
var possible_tools_descr = new Array();
possible_tools[0] = lIcOIcDll;
possible_tools_descr[0] = llOGlCDIl;
for (var i = 0; i < known_class.length; i++) {
    if (known_class[i] != licGll) {
        possible_tools[possible_tools.length] = known_class[i];
        possible_tools_descr[possible_tools_descr.length] = lIcGIOGll + known_class_title[i].substring(0, 1).toUpperCase() + known_class_title[i].substring(1);
    }
    lacl[i] = true;
    name_layers[i] = lrpc(known_class[i]) + lIcGiOl + tonumerous(known_class_title[i].substring(0, 1).toUpperCase() + known_class_title[i].substring(1));
    class_to_layer[known_class[i]] = i;
}
possible_tools[possible_tools.length] = liCDiCDll;
possible_tools_descr[possible_tools_descr.length] = llcDiCGil;
var active_tool;
var last_clicked_layer = 100;
function layerClicked(i) {
    lcz();
    lnd(llcDiOOIl);
    lnd(lIcGiOGil + last_clicked_layer + lIOOlOOIl);
    for (var i2 = 0; i2 < known_class.length; i2++) lnd(lICDlcOll + i2 + lICOlOOll + lacl[i2] + lIOOlOOIl);
    last_clicked_layer = i;
    if (i == -1) {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = true;
    } else if (i == -2) {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = false;
    } else if (i == -3) {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = false;
        lacl[class_to_layer[llOGiCl]] = true;
        lacl[class_to_layer[lIOOlcl]] = true;
        lacl[class_to_layer[licGil]] = true;
        lacl[class_to_layer[licOICl]] = true;
        lacl[class_to_layer[liOGICl]] = true;
    } else if (i == -4) {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = false;
        lacl[class_to_layer[llCOIl]] = true;
        lacl[class_to_layer[liODll]] = true;
        lacl[class_to_layer[lICGIl]] = true;
        lacl[class_to_layer[liCDicl]] = true;
        lacl[class_to_layer[licDlCl]] = true;
        lacl[class_to_layer[liOGICl]] = true;
    } else if (i == -5) {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = false;
        lacl[class_to_layer[liODl]] = true;
        lacl[class_to_layer[lICOl]] = true;
        lacl[class_to_layer[llcGll]] = true;
        lacl[class_to_layer[lIOGIl]] = true;
        lacl[class_to_layer[liCGIl]] = true;
        lacl[class_to_layer[lIODll]] = true;
        lacl[class_to_layer[lICGIl]] = true;
    } else if (i == -6) {
        ADVANCED_LAYERS = true;
    } else if (i == -7) {
        ADVANCED_LAYERS = false;
    } else if (ctrl && !alt) {
        lacl[i] = true;
    } else if (alt && !ctrl) {
        lacl[i] = false;
    } else {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = false;
        lacl[i] = true;
    }
    for (var i = 0; i < es.length; i++)
        if (es[i].exists)
            if (!MatchLayer(es[i])) {
                if (es[i].selected) {
                    lnd(llcDiOGll + i + llOOlCDIl);
                    ldn(llcDiOGll + i + llCOlCDll);
                    es[i].selected = false;
                }
            }
    for (var i2 = 0; i2 < known_class.length; i2++) ldn(lICDlcOll + i2 + lICOlOOll + lacl[i2] + lIOOlOOIl);
    ldn(llcDiOOIl);
    ldn(lIcGiOGil + last_clicked_layer + lIOOlOOIl);
    lfz(false);
    need_redraw = true;
    need_GUIParams_update = true;
    UpdateTools();
    UpdateGUIObjectsList();
    SaveBrowserSettings();
}
function GridAlphaSet(value) {
    GRID_ALPHA = value;
    need_redraw = true;
    UpdateTools();
    SaveBrowserSettings();
}
function GridSnappingSet(value) {
    if (value < 0.0001) {
        console.warn(llOOlCGll + value + licGlOGIl);
        return;
    }
    if (value < 10 || value % 10 !== 0) console.warn(llOOlCGll + value + lICOICDll);
    GRID_SNAPPING = value;
    UpdateTools();
    SaveBrowserSettings();
}
function ConnectionShowSet(value) {
    SHOW_CONNECTIONS = value;
    need_redraw = true;
    UpdateTools();
    SaveBrowserSettings();
}
function ShowTexturesSet(value) {
    SHOW_TEXTURES = value;
    need_redraw = true;
    UpdateTools();
    SaveBrowserSettings();
}
function PreviewQualitySet(value) {
    ctx.imageSmoothingEnabled = value;
    need_redraw = true;
    UpdateTools();
    SaveBrowserSettings();
}
if (typeof document.createStyleSheet === lICOIOGil) {
    document.createStyleSheet = (function () {
        function createStyleSheet(href) {
            if (typeof href !== lICOIOGil) {
                var element = document.createElement(licGIOOIl);
                element.type = liCOiCDll;
                element.rel = llOOIOGIl;
                element.href = href;
            } else {
                var element = document.createElement(liOOICl);
                element.type = liCOiCDll;
            }
            document.getElementsByTagName(lIcGIODll)[0].appendChild(element);
            var sheet = document.styleSheets[document.styleSheets.length - 1];
            if (typeof sheet.addRule === lICOIOGil) sheet.addRule = addRule;
            if (typeof sheet.removeRule === lICOIOGil) sheet.removeRule = sheet.deleteRule;
            return sheet;
        }
        function addRule(selectorText, cssText, index) {
            if (typeof index === lICOIOGil) index = this.cssRules.length;
            this.insertRule(selectorText + lIODiCGil + cssText + lIOGlCDll, index);
        }
        return createStyleSheet;
    })();
}
document.write(lICOicGil);
var stars_old_x = 0;
var stars_old_y = 0;
function UpdateStars() {
    if (THEME == THEME_PURPLE || THEME == THEME_GREEN) {
        if (THEME == THEME_PURPLE) {
            stars.style.filter = llcOiOGIl;
        } else if (THEME == THEME_GREEN) {
            stars.style.filter = licGiCGIl;
        }
        if (zoom < 2) {
            stars_old_x = ((dis_from_x + dis_to_x) / 2) * 0.666;
            stars_old_y = ((dis_from_y + dis_to_y) / 2) * 0.666;
        } else {
            stars_old_x = (((dis_from_x + dis_to_x) / 2) * 0.666 + stars_old_x * 20 * (zoom - 2)) / (20 * (zoom - 2) + 1);
            stars_old_y = (((dis_from_y + dis_to_y) / 2) * 0.666 + stars_old_y * 20 * (zoom - 2)) / (20 * (zoom - 2) + 1);
        }
        stars.style.backgroundPositionX = stars_old_x + licOlcDll;
        stars.style.backgroundPositionY = stars_old_y + licOlcDll;
        if (Math.abs(stars_old_x - ((dis_from_x + dis_to_x) / 2) * 0.666) > 1 || Math.abs((stars_old_y = ((dis_from_y + dis_to_y) / 2) * 0.666)) > 1) need_redraw = true;
        stars.style.visibility = liOGIcl;
    } else {
        stars.style.visibility = lICOlcGil;
    }
}
function ThemeSet(value) {
    THEME = value;
    need_redraw = true;
    UpdateTools();
    var sheet_original = document.styleSheets[0];
    var sheet2;
    try {
        sheet2 = new CSSStyleSheet();
    } catch (e) {
        sheet2 = document.createStyleSheet();
    }
    if (THEME == THEME_BLUE) {
    } else if (THEME == THEME_DARK || THEME == THEME_PURPLE || THEME == THEME_GREEN) {
        for (var i = 0; i < sheet_original.cssRules.length; i++) {
            var rule_original = sheet_original.cssRules[i];
            var insert_at = sheet2.cssRules.length;
            var css = rule_original.cssText;
            var css_parts = css.split(lIOGlCGll);
            var hover = css_parts[0].indexOf(lIODiOGIl) != -1 || css_parts[0].indexOf(lIcOIcOil) != -1;
            css_parts[1] = css_parts[1].split(lIOGlCDll);
            var props = css_parts[1][0].split(lIOOlOOIl);
            for (var p = 0; p < props.length; p++) {
                var parts = props[p].split(liCDlODil);
                if (parts.length === 2) {
                    parts[0] = parts[0].split(licOlCGll).join(lIcGiOl).split(liODiODil).join(lIcGiOl).trim();
                    parts[1] = parts[1].split(licOlCGll).join(lIcGiOl).split(liODiODil).join(lIcGiOl).trim();
                    if (parts[1].indexOf(llcDIOGil) != -1) {
                        var value = parts[1];
                        var border = parts[0].indexOf(licDlOOIl) != -1;
                        var pos_open = value.indexOf(llCDIcGil);
                        var pos_close = value.indexOf(liCDlOl);
                        var numbers_str = value.substring(pos_open + 1, pos_close);
                        var numbers_arr = numbers_str.split(llOGlcOll);
                        var sum = 0;
                        for (var n = 0; n < 3; n++) sum += parseFloat(numbers_arr[n]);
                        sum /= 3;
                        sum /= 255;
                        sum = Math.pow(sum, 1.5);
                        sum *= 200;
                        if (hover && border) {
                            sum = (255 + sum) / 2;
                            numbers_arr[0] = Math.floor(sum * 1);
                            numbers_arr[1] = Math.floor(sum * 0.8);
                            numbers_arr[2] = Math.floor(sum * 0.4);
                        } else for (var n = 0; n < 3; n++) numbers_arr[n] = Math.floor(sum);
                        value = value.substring(0, pos_open + 1) + numbers_arr.join(llOGlcOll) + value.substr(pos_close);
                        parts[1] = value;
                    }
                }
                props[p] = parts.join(liCDlODil);
            }
            css_parts[1][0] = props.join(lIOOlOOIl);
            css_parts[1] = css_parts[1].join(lIOGlCDll);
            css = css_parts.join(lIOGlCGll);
            sheet2.insertRule(css, insert_at);
        }
        sheet2.insertRule(llOGlCOIl);
        sheet2.insertRule(lICDlCGIl);
        sheet2.insertRule(llcGlCGil);
    }
    for (var i = 1; i < document.styleSheets.length - 1; i++) document.styleSheets[i].disabled = true;
    document.adoptedStyleSheets = [sheet2];
    SaveBrowserSettings();
}
var THEME_BLUE = 0;
var THEME_DARK = 1;
var THEME_PURPLE = 2;
var THEME_GREEN = 3;
var GRID_ALPHA = 1;
var GRID_SNAPPING = 10;
var SHOW_CONNECTIONS = true;
var ADVANCED_LAYERS = false;
var THEME = THEME_BLUE;
var SHOW_TEXTURES = false;
ctx.imageSmoothingEnabled = true;
var storage_error_once = true;
try {
    if (localStorage.getItem(lIOGlODll) !== null) GRID_ALPHA = parseFloat(localStorage.getItem(lIOGlODll));
    if (localStorage.getItem(liOOICGIl) !== null) GRID_SNAPPING = parseFloat(localStorage.getItem(liOOICGIl));
    if (localStorage.getItem(lIcDicOll) !== null) SHOW_CONNECTIONS = localStorage.getItem(lIcDicOll) === llOOlcl;
    if (localStorage.getItem(llCDlcDIl) !== null) ADVANCED_LAYERS = localStorage.getItem(llCDlcDIl) === llOOlcl;
    if (localStorage.getItem(llcOlcDll) !== null) THEME = parseFloat(localStorage.getItem(llcOlcDll));
    if (localStorage.getItem(liCDicOll) !== null) SHOW_TEXTURES = localStorage.getItem(liCDicOll) === llOOlcl;
    if (localStorage.getItem(lICDICGil) !== null) ctx.imageSmoothingEnabled = localStorage.getItem(lICDICGil) === llOOlcl;
} catch (e) {
    if (storage_error_once) storage_error_once = false;
    NewNote(liOGiODll, note_bad);
}
ThemeSet(THEME);
function SaveBrowserSettings() {
    try {
        localStorage.setItem(lIOGlODll, GRID_ALPHA);
        localStorage.setItem(liOOICGIl, GRID_SNAPPING);
        localStorage.setItem(lIcDicOll, SHOW_CONNECTIONS);
        localStorage.setItem(llCDlcDIl, ADVANCED_LAYERS);
        localStorage.setItem(llcOlcDll, THEME);
        localStorage.setItem(liCDicOll, SHOW_TEXTURES);
        localStorage.setItem(lICDICGil, ctx.imageSmoothingEnabled);
    } catch (e) {
        if (storage_error_once) storage_error_once = false;
        else return;
        NewNote(liCDiCOIl, note_bad);
    }
}
function UpdateTools() {
    var str = liCDlcGll;
    str += llCDIOOll;
    for (var i = 0; i < possible_tools.length; i++) {
        if (possible_tools[i] == active_tool) str += lIODIOOIl + possible_tools_descr[i] + lIcGlOGll + lrpc(possible_tools[i]) + liCGlOGil;
        else str += liOGicGIl + possible_tools_descr[i] + liODiOOll + i + liCOICOll + lrpc(possible_tools[i]) + liCGlOGil;
        if (i % 2 == 1) str += liCDiOGil;
    }
    str += lIcOlOOIl;
    str += llCDIOOll;
    if (ADVANCED_LAYERS) str += llcOlcGll;
    else str += llOGIcOIl;
    var seltot = 0;
    for (var i = 0; i < known_class.length; i++) {
        if (lacl[i]) seltot++;
        if (ADVANCED_LAYERS) str += llOGicDil + (lacl[i] ? "2" : liOGIcl) + lIcGlCDll + i + llCOICDIl + name_layers[i] + llcGICDIl;
    }
    str += llOGicDil + (seltot == known_class.length ? "2" : liOGIcl) + llcDIODIl;
    str += llOGicDil + (seltot == 0 ? "2" : liOGIcl) + lIcGICOll;
    if (!ADVANCED_LAYERS) {
        str += llOGicDil + (last_clicked_layer == -3 ? "2" : liOGIcl) + lIcOiCDll;
        str += llOGicDil + (last_clicked_layer == -4 ? "2" : liOGIcl) + llcOIODIl;
        str += llOGicDil + (last_clicked_layer == -5 ? "2" : liOGIcl) + llcGicOll;
    }
    str += lICGlOOil;
    str += llCDIOOll;
    str += llOGicDil + (GRID_ALPHA == 0 ? "2" : liOGIcl) + llCDlOOIl;
    str += llOGicDil + (GRID_ALPHA == 0.5 ? "2" : liOGIcl) + lIcDiCDll;
    str += llOGicDil + (GRID_ALPHA == 1 ? "2" : liOGIcl) + llCDiCDIl;
    str += llcDICDll;
    str += llCDIOOll;
    str += llOGicDil + (GRID_SNAPPING == 10 ? "2" : liOGIcl) + lIcOIOOIl;
    str += llOGicDil + (GRID_SNAPPING == 50 ? "2" : liOGIcl) + lICGlcOll;
    str += llOGicDil + (GRID_SNAPPING == 100 ? "2" : liOGIcl) + llcOlCOIl;
    str += llCOlcDIl;
    str += llCDIOOll;
    str += llOGicDil + (SHOW_CONNECTIONS == false ? "2" : liOGIcl) + llOGIODIl;
    str += llOGicDil + (SHOW_CONNECTIONS == true ? "2" : liOGIcl) + licGlCDll;
    str += liOOlcOll;
    str += llCDIOOll;
    str += llOGicDil + (THEME == THEME_BLUE ? "2" : liOGIcl) + lIOOlCOIl;
    str += llOGicDil + (THEME == THEME_DARK ? "2" : liOGIcl) + liODlCGIl;
    str += llOGicDil + (THEME == THEME_PURPLE ? "2" : liOGIcl) + lIODIODll;
    str += llOGicDil + (THEME == THEME_GREEN ? "2" : liOGIcl) + lICGicDil;
    str += liCGIODil;
    str += llCDIOOll;
    str += llOGicDil + (SHOW_TEXTURES == false ? "2" : liOGIcl) + llcGIcGll;
    str += llOGicDil + (SHOW_TEXTURES == true ? "2" : liOGIcl) + lIODicGIl;
    str += llOOlODIl;
    str += llCDIOOll;
    str += llOGicDil + (ctx.imageSmoothingEnabled == false ? "2" : liOGIcl) + liCGICGll;
    str += llOGicDil + (ctx.imageSmoothingEnabled == true ? "2" : liOGIcl) + lICGIcOIl;
    tools_box.innerHTML = str;
}
function SetActiveTool(val) {
    if (possible_tools[val] == liCDiCDll) {
        DoWorldScale();
    } else {
        active_tool = possible_tools[val];
        need_redraw = true;
        UpdateTools();
    }
}
SetActiveTool(0);
function DoWorldScale() {
    var newscale = prompt(lIcDicDll, 100);
    if (newscale == null || newscale == 100) {
    } else {
        var factor = Math.floor(newscale) / 100;
        {
            var roundwell = true;
            lcz();
            for (i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (es[i].selected)
                        if (MatchLayer(es[i])) {
                            if (es[i].pm.w != undefined) {
                                ldn(llcDiOGll + i + llCGlCGIl + i + llCOicOil + factor + lIODlCGll);
                                lnd(llcDiOGll + i + llcDicOll + es[i].pm.w + lIOOlOOIl);
                                if (es[i].pm.w * factor != Math.round((es[i].pm.w * factor) / 10) * 10) roundwell = false;
                            }
                            if (es[i].pm.h != undefined) {
                                ldn(llcDiOGll + i + licDiODIl + i + licGiOOll + factor + lIODlCGll);
                                lnd(llcDiOGll + i + liOOiODil + es[i].pm.h + lIOOlOOIl);
                                if (es[i].pm.h * factor != Math.round((es[i].pm.h * factor) / 10) * 10) roundwell = false;
                            }
                            if (es[i].pm.x != undefined) {
                                ldn(llcDiOGll + i + llCOlcGIl + i + liCDIcOil + factor + lIODlCGll);
                                lnd(llcDiOGll + i + lICOICDIl + es[i].pm.x + lIOOlOOIl);
                                if (es[i].pm.x * factor != Math.round((es[i].pm.x * factor) / 10) * 10) roundwell = false;
                            }
                            if (es[i].pm.y != undefined) {
                                ldn(llcDiOGll + i + lIODicGll + i + lICGICGll + factor + lIODlCGll);
                                lnd(llcDiOGll + i + lICDlcDIl + es[i].pm.y + lIOOlOOIl);
                                if (es[i].pm.y * factor != Math.round((es[i].pm.y * factor) / 10) * 10) roundwell = false;
                            }
                        }
            lfz(true);
            NewNote(lIcDlOGll + factor + licOICDIl + newscale + lIcDicGll, note_passive);
            if (!roundwell) NewNote(lICOIODil, note_neutral);
            need_redraw = true;
            UpdateTools();
        }
    }
}
var lsc = -1;
function selclick(e, instance) {
    e = e || window.event;
    if ((e.keyCode || e.which) == 1) {
        if (ctrl || alt) {
            if (ctrl) es[instance].selected = true;
            else if (alt) es[instance].selected = false;
        } else {
            if (k_shift) {
                var from_s = Math.min(instance, lsc);
                var to_s = Math.max(instance, lsc);
                for (var i = 0; i < es.length; i++) {
                    if (i >= from_s && i <= to_s) {
                        es[i].selected = true;
                    } else {
                        es[i].selected = false;
                    }
                }
            } else {
                for (var i = 0; i < es.length; i++) {
                    es[i].selected = false;
                }
                es[instance].selected = true;
            }
        }
        need_GUIParams_update = true;
        need_redraw = true;
        if (!k_shift) lsc = instance;
    }
}
var ObjectBox_visible = false;
ShowHideObjectBox();
function ShowHideObjectBox() {
    ObjectBox_visible = !ObjectBox_visible;
    if (ObjectBox_visible) {
        objboxhider.innerHTML = lICDIcGll;
        gui_objbox.style.display = liOGIcl;
        UpdateGUIObjectsList();
    } else {
        objboxhider.innerHTML = llODiCDll;
        gui_objbox.style.display = lIcGiODil;
    }
}
left_panel.style.WebkitTransition = lIODIODil;
right_panel.style.WebkitTransition = lIcGicOil;
top_panel.style.WebkitTransition = llcDicDil;
var opacities_active = true;
function UpdateOpacities() {
    if (expert_view) {
        if (mouse_x < 120 || mouse_x > lsu - 120 || mouse_y < 90) {
            left_panel.style.left = liCGIODIl;
            right_panel.style.right = liCGIODIl;
            top_panel.style.top = liCGIODIl;
            left_panel.style.top = lICGIOGil;
            right_panel.style.top = lICGIOGil;
        } else {
            left_panel.style.left = lICDlcDll;
            right_panel.style.right = lIcDlcGil;
            top_panel.style.top = lIcDlcGIl;
            left_panel.style.top = liCGIODIl;
            right_panel.style.top = liCGIODIl;
        }
        opacities_active = true;
    } else {
        if (opacities_active) {
            opacities_active = false;
            left_panel.style.left = liCGIODIl;
            right_panel.style.right = liCGIODIl;
            top_panel.style.top = liCGIODIl;
            left_panel.style.top = lICGIOGil;
            right_panel.style.top = lICGIOGil;
        }
    }
}
UpdateOpacities();
var gaov = document.getElementById(llcGICGll);
var OVERLAY_BLOCK = false;
function checkWebKit() {
    var result = /AppleWebKit\/([\d.]+)/.exec(navigator.userAgent);
    if (result) {
        return parseFloat(result[1]);
    }
    return null;
}
var context_menu = true;
if (document.addEventListener) {
    document.addEventListener(
        licDicOll,
        function (e) {
            if (!context_menu) e.preventDefault();
        },
        false
    );
} else {
    document.attachEvent(liCDiCGIl, function () {
        window.event.returnValue = false;
    });
}
function ThrowError(text) {
    alert(text);
}
window.onresize = resize;
function resize() {
    _lsu = window.innerWidth;
    _lsv = window.innerHeight;
    ctx.canvas.width = _lsu;
    ctx.canvas.height = _lsv;
    lsu = _lsu;
    lsv = _lsv;
    zoom_validate();
    need_redraw = true;
}
ResetView();
resize();
canv.onselectstart = function () {
    return false;
};
var canvas_focus = false;
var mapid_field = document.getElementById(llODICGil);
var maprights = document.getElementById(llcOiCGil);
var isOSX = navigator.appVersion.indexOf(liCDIOGIl) != -1;
var knownmaps = new Array();
var mapid = liOGIcl;
var source_lost = false;
var quick_pick_hit_scale = 1;
document.onmousedown = function () {
    context_menu = true;
};
function SetUpMouseControls() {
    quick_pick_hit_scale = 1;
    canv.onmousemove = function (e) {
        canvas_focus = true;
        m_move(e);
        return false;
    };
    canv.onmousedown = function (e) {
        canvas_focus = true;
        m_down(e);
        return false;
    };
    canv.onmouseup = function (e) {
        m_up(e);
        return false;
    };
    canv.onmouseout = function (e) {
        canvas_focus = false;
        m_failed(e);
    };
    canv.onmouseover = function (e) {
        canvas_focus = true;
    };
    canv.onblur = function (e) {
        canv_blur();
        return false;
    };
    canv.mousewheel = function (e) {
        m_wheel(event);
        return false;
    };
    document.getElementById(licGIcDll).style.display = lIcGiODil;
}
SetUpMouseControls();
canv.ontouchstart = function () {
    SetUpTouchControls();
};
var drag_toggle = false;
function SetUpTouchControls() {
    {
        quick_pick_hit_scale *= 3;
        note_place.style.bottom = lICOiCDil;
        var old_onmousedown = canv.onmousedown;
        var old_onmousemove = canv.onmousemove;
        var old_onmouseup = canv.onmouseup;
        canv.onmousedown = null;
        canv.onmousemove = null;
        canv.onmouseup = null;
        var ongoingTouches = new Array();
        function copyTouch(touch, which = -1) {
            if (which === -1) which = touch.which;
            return { identifier: touch.identifier, pageX: touch.pageX, pageY: touch.pageY, which: which };
        }
        function ongoingTouchIndexById(idToFind) {
            for (var i = 0; i < ongoingTouches.length; i++) {
                var id = ongoingTouches[i].identifier;
                if (id == idToFind) {
                    return i;
                }
            }
            return -1;
        }
        canv.ontouchstart = function (e) {
            var touches = e.changedTouches;
            for (var i = 0; i < touches.length; i++) {
                if (ongoingTouches.length > 0) return;
                var which = drag_toggle ? 2 : 1;
                var t = copyTouch(touches[i], which);
                ongoingTouches.push(t);
                old_onmousedown({ which: t.which, pageX: t.pageX, pageY: t.pageY });
            }
        };
        canv.ontouchmove = function (e) {
            var touches = e.changedTouches;
            for (var i = 0; i < touches.length; i++) {
                var idx = ongoingTouchIndexById(touches[i].identifier);
                if (idx >= 0) {
                    var t = ongoingTouches[idx];
                    old_onmousemove({ pageX: t.pageX, pageY: t.pageY });
                    ongoingTouches.splice(idx, 1, copyTouch(touches[i], t.which));
                }
            }
        };
        canv.ontouchend = canv.touchcancel = function (e) {
            var touches = e.changedTouches;
            for (var i = 0; i < touches.length; i++) {
                var idx = ongoingTouchIndexById(touches[i].identifier);
                if (idx >= 0) {
                    var t = ongoingTouches[idx];
                    old_onmouseup({ which: t.which, pageX: t.pageX, pageY: t.pageY });
                    ongoingTouches.splice(idx, 1);
                }
            }
        };
        document.getElementById(licGIcDll).style.display = liOGIcl;
    }
}
window.addEventListener(llOGiOGil, k_down, true);
window.addEventListener(lIODlODIl, k_up, true);
window.onbeforeunload = confirmExit;
function confirmExit() {
    if (changes_made) return licDiCDIl;
    return null;
}
var need_redraw = true;
var need_GUIParams_update = true;
var timer_panic = 0;
var speed_x = 0;
var speed_y = 0;
function ani() {
    var start = +new Date();
    if (speed_x != 0) {
        var speed_power = zoom * 10 * (k_shift ? 5 : 1);
        dis_from_x += speed_x * speed_power;
        dis_to_x += speed_x * speed_power;
        zoom_validate();
        need_redraw = true;
        lmwa = s2w_x(mouse_x);
        lmwb = s2w_y(mouse_y);
        lmd = false;
        m_move();
    }
    if (speed_y != 0) {
        var speed_power = zoom * 10 * (k_shift ? 5 : 1);
        dis_from_y += speed_y * speed_power;
        dis_to_y += speed_y * speed_power;
        zoom_validate();
        need_redraw = true;
        lmwa = s2w_x(mouse_x);
        lmwb = s2w_y(mouse_y);
        lmd = false;
        m_move();
    }
    if (need_redraw) {
        need_redraw = false;
        Render();
    }
    if (need_GUIParams_update) {
        need_GUIParams_update = false;
        UpdateGUIParams();
        UpdateGUIObjectsList();
    }
    var end = +new Date();
    var diff = end - start;
    timer_panic = (timer_panic + diff) * 0.7;
    if (false)
        if (timer_panic > 100) {
            if (ENABLE_SHADOWS) {
                ENABLE_SHADOWS = false;
                timer_panic = 0;
            } else if (ENABLE_TEXT) {
                ENABLE_TEXT = false;
                timer_panic = 0;
            }
        }
    setTimeout(ani, 10);
}
setTimeout(ani, 50);
Render();
function die(msg) {
    document.getElementById(liCGlODIl).innerHTML = llcOiCDIl + msg + liCGlCOll;
}
function LoadThisMap() {
    ServerRequest(lIcDiOGil + mapid + liCDlCOIl, liCDiCl);
}
function get(name) {
    if ((name = new RegExp(liCGiOGil + encodeURIComponent(name) + llCOicDIl).exec(location.search))) return decodeURIComponent(name[1]);
}
function compi_obj(i) {
    var loco_2 = liOGIcl;
    loco_2 += liOOiOOIl + es[i]._class;
    for (var p in es[i].pm) {
        var pars = es[i].pm[p];
        if (es[i]._class == llOGiCl) {
            if (p == llOGlOl) if (pars == liOGIcl) continue;
            if (p == licGlCl) if (pars == "-1" || pars == liOGIcl) continue;
            if (p == licGICGl || p == liOGlOOl) if (pars == "0" || pars == liOGIcl) continue;
            if (p == liOOiODl) {
                if (pars === "0" || pars === liOGIcl || pars === lICDIODl || pars === false || pars === 0 || pars === undefined) continue;
            }
            if (p == llcOlCGl) {
                if (pars == llOOlcl || pars === liOGIcl || pars == true) continue;
            }
        }
        if (es[i]._class == licOICl) {
            if (p == lIcOlOl) if (pars === liOGIcl || pars == "1" || pars == true) continue;
        }
        if (es[i]._class == lIOGIl || es[i]._class == liOGICl || es[i]._class == liCDicl) {
            if (p == licGICl) if (pars == "-1" || pars == liOGIcl) continue;
        }
        if (es[i]._class == lIOGIl) {
            if (p == licGICGl || p == liOGlOOl) if (pars == "0" || pars == liOGIcl) continue;
            if (p == liOOiODl) {
                if (pars === "0" || pars === liOGIcl || pars === lICDIODl || pars === false || pars === 0 || pars === undefined) continue;
            }
        }
        if (typeof pars == lIOOIOl) pars = es[i].pm[p].split(llCGIcGIl).join(lIcDIcGll);
        loco_2 += lIcGiOl + p + llCDiOGIl + pars + llCGIcGIl;
    }
    loco_2 += llODlOOil;
    return loco_2;
}
function lcc_(_class) {
    var loco_ = liOGIcl;
    if (_class == liODl) {
        var teams = new Array();
        var teams_of = new Array();
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._class == _class) {
                    teams[es[i].pm.team] = new Array();
                    teams_of[es[i].pm.team] = 0;
                }
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._class == _class) {
                    teams[es[i].pm.team].push(i);
                }
        var ok = true;
        while (ok) {
            ok = false;
            for (team in teams) {
                if (teams_of[team] != -1) {
                    ok = true;
                    loco_ += compi_obj(teams[team][teams_of[team]]);
                    teams_of[team] += 1;
                    if (teams_of[team] >= teams[team].length) teams_of[team] = -1;
                }
            }
        }
    } else {
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._class == _class) {
                    loco_ += compi_obj(i);
                }
    }
    return loco_;
}
var last_awaiting_images = liOGIcl;
function PrepareCustomImages() {
    last_awaiting_images = liOGIcl;
    var ret = true;
    var available_images = [];
    var final_images = [];
    var avail_ptr = 0;
    function UseNextOrNew() {
        if (avail_ptr < available_images.length) {
            final_images[final_images.length] = available_images[avail_ptr++];
            return final_images[final_images.length - 1];
        }
        final_images[final_images.length] = new E(licGll);
        es.push(final_images[final_images.length - 1]);
        return final_images[final_images.length - 1];
    }
    var visite_values = {};
    function ConsiderValue(v) {
        v = v + liOGIcl;
        if (v.length >= 2)
            if (v.charAt(0) == llOGlOl) {
                var num = parseInt(v.substr(1));
                if (!isNaN(num)) {
                    if (visite_values[num] === undefined) {
                        visite_values[num] = true;
                        var e = UseNextOrNew();
                        e.pm.id = num;
                        e.exists = true;
                        if (e.pm.x) delete e.pm.x;
                        if (e.pm.y) delete e.pm.y;
                        if (CACHED_BGS[llOGlOl + num] != undefined && CACHED_BGS[llOGlOl + num].loaded) {
                            e.pm.width = CACHED_BGS[llOGlOl + num].width;
                            e.pm.height = CACHED_BGS[llOGlOl + num].height;
                        } else {
                            ServerRequest(liODlCGl + liCGlcl + llcGlcOl + llOGlOl + num, llODIcOl);
                            if (CACHED_BGS[llOGlOl + num] != undefined) {
                                ret = false;
                                if (last_awaiting_images.length != 0) last_awaiting_images += llOGlcOll;
                                last_awaiting_images += llOGlOl + num;
                            }
                        }
                    }
                }
            }
    }
    for (var i = 0; i < es.length; i++)
        if (es[i]._class == licGll) {
            available_images.push(es[i]);
            es[i].exists = false;
        }
    for (var i = 0; i < es.length; i++)
        if (es[i].exists) {
            if (es[i]._class == llOGiCl) {
                ConsiderValue(es[i].pm.m);
            }
            if (es[i]._class == lIOGIl) {
                ConsiderValue(es[i].pm.model);
            }
            if (es[i]._class == llCOIl) {
                for (var t = 1; es[i].pm[licDicDl + t + llCOlOGl] !== undefined; t++) {
                    var trigger_type_id = es[i].pm[licDicDl + t + llCOlOGl];
                    if (mark_pairs[lIcGlcDl + trigger_type_id] == lICDiOl) ConsiderValue(es[i].pm[licDicDl + t + licDlcGl]);
                    if (mark_pairs[llOOIcOl + trigger_type_id] == lICDiOl) ConsiderValue(es[i].pm[licDicDl + t + liODICOl]);
                }
            }
        }
    UpdateGUIObjectsList();
    return ret;
}
function SaveThisMap(temp_to_real_compile_data = liOGIcl, callback = null) {
    if (mapid != liOGIcl) {
        if (!PrepareCustomImages()) {
            NewNote(liCOlCOil + last_awaiting_images + lIcGlCDIl, note_neutral);
            setTimeout(function () {
                SaveThisMap(temp_to_real_compile_data, callback);
            }, 1000);
            return;
        }
        var compiled = liOGIcl;
        if (temp_to_real_compile_data == liOGIcl) {
            for (var i = 0; i < known_class_savepriorities.length; i++) compiled += lcc_(known_class_savepriorities[i]);
            if (compiled == liOGIcl) compiled = liODlcGIl;
            try {
                localStorage.setItem(licOIcDil + mapid + liCGIOGil + new Date().getTime(), compiled);
            } catch (e) {
                NewNote(lIOOiODll, note_bad);
            }
        } else compiled = temp_to_real_compile_data;
        ServerRequest(lIcDiOGil + mapid + lIcGlOGIl + liCDiCDIl + encodeURIComponent(compiled), lICGiCl, callback);
    } else {
        SaveThisMapAs();
    }
}
var mrdimlights = document.getElementById(licOICDil);
var mrsave = document.getElementById(lIcGicOll);
var mrcustom_image = document.getElementById(liODlOGil);
var image_list = document.getElementById(liCOlOOil);
var ignore_keys = false;
var dim_undo = liOGIcl;
var dim_enter_event = liOGIcl;
function SaveThisMapAs() {
    mrdimlights.style.display = llCOIODll;
    mrsave.style.display = llCOIODll;
    document.getElementById(licGiCOll).focus();
    document.getElementById(licGiCOll).value = mapid;
    dim_enter_event = llOOiCOil;
    ignore_keys = true;
    PutMapsList(lIODICGll, licGiCOll, llOOiCOil, lICGiCl);
    dim_undo = licDlcGll;
}
function mrSave() {
    if (knownmaps.indexOf(document.getElementById(licGiCOll).value) == -1 || confirm(liOGIcOll + document.getElementById(licGiCOll).value + lIOGlCGIl) == true) {
        mapid = document.getElementById(licGiCOll).value;
        SaveThisMap();
        CancelDim();
    }
}
var browse_images_callback = null;
var last_for_class = llCOIcGil;
var last_current_value = llCOIcGil;
var search_phrase = liOGIcl;
function UpdateImageList() {
    ServerRequest(liODlCGl + last_for_class + llOGicGIl + last_current_value + lICOIcGIl + search_phrase, lIcDiCOIl);
}
function BrowseImages(for_class = liCGlcl, current_value = liOGIcl, callback = null) {
    awaiting_image_paste = true;
    mrdimlights.style.display = llCOIODll;
    mrcustom_image.style.display = llCOIODll;
    dim_enter_event = liOGIcl;
    ignore_keys = true;
    image_list.innerHTML = liOGIcl;
    setTimeout(function () {
        last_for_class = for_class;
        last_current_value = current_value;
        ServerRequest(liODlCGl + for_class + llOGicGIl + current_value + lICOIcGIl + search_phrase, lIcDiCOIl);
    }, 1);
    dim_undo = licGiODIl;
    browse_images_callback = callback;
}
function CustomImageSelected(new_value, new_value_title) {
    browse_images_callback(new_value, new_value_title);
    CancelDim();
}
function retrieveImageFromClipboardAsBase64(pasteEvent, callback, imageFormat) {
    if (pasteEvent.clipboardData == false) {
        if (typeof callback == lIcOiCDil) {
            callback(undefined);
        }
    }
    var items = pasteEvent.clipboardData.items;
    if (items == undefined) {
        if (typeof callback == lIcOiCDil) {
            callback(undefined);
        }
    }
    var nothing = true;
    for (var i = 0; i < items.length; i++) {
        if (items[i].type.indexOf(licGll) == -1) {
            continue;
        }
        nothing = false;
        var blob = items[i].getAsFile();
        var mycanvas = document.createElement(llCGiOOIl);
        var ctx = mycanvas.getContext(lll);
        var img = new Image();
        img.onload = function () {
            mycanvas.width = this.width;
            mycanvas.height = this.height;
            ctx.drawImage(img, 0, 0);
            if (typeof callback == lIcOiCDil) {
                callback(mycanvas.toDataURL(imageFormat || llcGIcDil));
            }
        };
        var URLObj = window.URL || window.webkitURL;
        img.src = URLObj.createObjectURL(blob);
    }
    if (nothing) {
        if (items.length == 0) NewNote(liCOicGil, note_passive);
        else NewNote(licDicDll, note_passive);
    }
}
var imageLoader = document.getElementById(llcDICOll);
imageLoader.addEventListener(liCGIOOIl, handleImage, false);
var canvas_img = document.getElementById(lICOICGil);
var ctx_img = canvas_img.getContext(lll);
function handleImage(e) {
    var reader = new FileReader();
    reader.onload = function (event) {
        var img = new Image();
        img.onload = function () {
            canvas_img.width = img.width;
            canvas_img.height = img.height;
            ctx_img.drawImage(img, 0, 0);
            var imageDataBase64 = canvas_img.toDataURL(llcGIcDil);
            ServerRequest(liODlCGl + liCGlcl + llOOIODil + imageDataBase64, lIcGlODIl);
        };
        img.src = event.target.result;
    };
    reader.readAsDataURL(e.target.files[0]);
}
window.addEventListener(
    liCDIcDll,
    function (e) {
        if (mrcustom_image.style.display == llCOIODll) {
            retrieveImageFromClipboardAsBase64(e, function (imageDataBase64) {
                if (imageDataBase64) {
                    ServerRequest(liODlCGl + liCGlcl + llOOIODil + imageDataBase64, lIcGlODIl);
                } else alert(lIOOiCDll);
            });
        }
    },
    false
);
function CancelDim() {
    eval(dim_undo);
    mrdimlights.style.display = lIcGiODil;
    ignore_keys = false;
}
function UpdateMapsList() {
    ServerRequest(lIcDlcOil, lIOGicGil);
}
function getTimer() {
    return new Date().getTime();
}
var max_temp_maps = 64;
UpdateMapsList();
var last_dbl = 0;
var last_id = -1;
function PutMapsList(where, fieldobj, proceed_fnct, uniq) {
    var meta = liOGIcl;
    for (el in knownmaps) {
        meta +=
            liCGIcOil +
            el +
            liODicl +
            uniq +
            llCDicOll +
            (mapid == knownmaps[el] ? "1" : "0") +
            llOOiOOIl +
            where +
            llCDlOGll +
            fieldobj +
            llCDlOGll +
            proceed_fnct +
            llCDlOGll +
            uniq +
            lIOGICOil +
            el +
            liODicl +
            uniq +
            lIcDlCDil +
            fieldobj +
            lIOGIcOIl +
            knownmaps[el] +
            licDlcOIl +
            fieldobj +
            lICOicGll +
            el +
            lICDlcGil +
            proceed_fnct +
            liOGiCGIl +
            el +
            lIOGIcOil +
            knownmaps[el];
        meta += llcOlCDil;
    }
    el = knownmaps.length;
    try {
        var temp_maps = 0;
        for (var i = 0, len = localStorage.length; i < len; ++i) {
            var storage_key = localStorage.key(i);
            if (storage_key.substring(0, licOIcDil.length) == licOIcDil) {
                var key_parts = storage_key.substr(licOIcDil.length);
                key_parts = key_parts.split(liCGIOGil);
                var iterated_map_id = llODIcDIl + i + liCDlODil + key_parts[0];
                var map_id_pure = key_parts[0];
                var edit_time = key_parts[1];
                var date = new Date();
                date.setTime(edit_time);
                if (temp_maps == 0) {
                    meta += llcOiCDll + max_temp_maps + lIOGiCGll;
                }
                function LeadZero(v) {
                    if (v < 10) return "0" + v;
                    return v;
                }
                var monthNames = [llcDlODll, llcDIcOll, lIODlCOil, llCGIcDIl, llcDlOGil, lIOOIOGll, lIcDiCDIl, llCGicDll, llOOicGil, llODiOGIl, liOGlCOIl, liCOIcGIl];
                meta +=
                    liCGIcOil +
                    el +
                    liODicl +
                    uniq +
                    llCDiCOll +
                    (mapid == iterated_map_id ? "1" : "0") +
                    llOOiOOIl +
                    where +
                    llCDlOGll +
                    fieldobj +
                    llCDlOGll +
                    proceed_fnct +
                    llCDlOGll +
                    uniq +
                    lIOGICOil +
                    el +
                    liODicl +
                    uniq +
                    lIcDlCDil +
                    fieldobj +
                    lIOGIcOIl +
                    iterated_map_id +
                    licDlcOIl +
                    fieldobj +
                    lICOicGll +
                    el +
                    lICDlcGil +
                    proceed_fnct +
                    liOGiCGIl +
                    el +
                    lIOOIOOIl +
                    map_id_pure +
                    liOOlOGll +
                    LeadZero(date.getHours()) +
                    liCDlODil +
                    LeadZero(date.getMinutes()) +
                    liCDlODil +
                    LeadZero(date.getSeconds()) +
                    llOGlcOll +
                    date.getDate() +
                    lIcGiOl +
                    monthNames[date.getMonth()] +
                    lIcGiOl +
                    date.getFullYear() +
                    lICDiOOIl;
                meta += llcOlCDil;
                el++;
                temp_maps++;
            }
        }
    } catch (e) {
        NewNote(liCDlOGll, note_bad);
    }
    document.getElementById(where).innerHTML = meta;
}
function RemoveOldTempMaps() {
    try {
        var delete_these = [];
        for (var i = 0, len = localStorage.length; i < len; ++i) {
            var storage_key = localStorage.key(i);
            if (storage_key.substring(0, licOIcDil.length) == licOIcDil) {
                var key_parts = storage_key.substr(licOIcDil.length);
                key_parts = key_parts.split(liCGIOGil);
                var iterated_map_id = llODIcDIl + i + liCDlODil + key_parts[0];
                var map_id_pure = key_parts[0];
                var edit_time = key_parts[1];
                delete_these.unshift({ key: storage_key, time: Number(edit_time) });
            }
        }
        function compare(a, b) {
            if (a.time < b.time) return -1;
            if (a.time > b.time) return 1;
            return 0;
        }
        if (delete_these.length - max_temp_maps > 0) {
            delete_these.sort(compare);
            delete_these = delete_these.slice(0, delete_these.length - max_temp_maps);
            console.log(delete_these);
            for (var i = 0; i < delete_these.length; i++) {
                var storage_key = delete_these[i].key;
                localStorage.removeItem(storage_key);
            }
        }
    } catch (e) {
        NewNote(llOOIcOil, note_bad);
    }
}
RemoveOldTempMaps();
var changes_made = false;
function StartNewMap() {
    if (!changes_made || confirm(licOiODll) == true) {
        es = new Array();
        mapid = liOGIcl;
        changes_made = false;
        need_redraw = true;
        need_GUIParams_update = true;
        ResetView();
        ClearUndos();
    }
}
function RevertThisMap() {
    if (mapid == liOGIcl) {
        NewNote(lICOlCGIl, note_neutral);
    } else if (confirm(llcDlcDIl) == true) {
        ServerRequest(lIcDiOGil + mapid + liCDlCOIl, liCDiCl);
    }
}
function OpenMap() {
    {
        mrdimlights.style.display = llCOIODll;
        mrload.style.display = llCOIODll;
        document.getElementById(lIcGicGll).focus();
        dim_enter_event = liODIcGIl;
        ignore_keys = true;
        PutMapsList(lIcOicDll, lIcGicGll, liODIcGIl, liCDiCl);
        dim_undo = lIOOlCGil;
    }
}
function mrLoad() {
    CancelDim();
    if (!changes_made || confirm(licOiODll) == true) {
        mapid = document.getElementById(lIcGicGll).value;
        if (mapid.indexOf(llODIcDIl) == 0) {
            var map_id_parts = mapid.split(liCDlODil);
            var local_storage_id = map_id_parts[1];
            var storage_key = localStorage.key(local_storage_id);
            var compiled_temp_map = localStorage.getItem(storage_key);
            document.getElementById(lIcGicGll).value = mapid = curlogin + llCGiOGIl;
            SaveThisMap(compiled_temp_map, function () {
                mrLoad();
            });
        } else {
            ServerRequest(lIcDiOGil + mapid + liCDlCOIl, liCDiCl);
        }
    }
}
function mrReloadLoad() {
    UpdateMapsList();
    PutMapsList(lIcOicDll, lIcGicGll, liODIcGIl, liCDiCl);
}
function mrReloadSave() {
    UpdateMapsList();
    PutMapsList(lIODICGll, licGiCOll, llOOiCOil, lICGiCl);
}
function OpenPreferences() {
    NewNote(liCOiOGll, note_neutral);
}
function TestMap() {
    if (!changes_made) {
        ServerRequest(lIcDiOGil + mapid + lIcGlcDIl, llcGICGll);
    } else NewNote(llcOiODIl, note_neutral);
}
var check_mode = false;
function CheckMap() {
    NewNote(lICDICGIl, note_neutral);
    check_mode = !check_mode;
    if (check_mode) NewNote(liCDlcGIl, note_passive);
    else NewNote(lIOGiCOil, note_passive);
    if (check_mode) BuildCheckTraces();
    else ClearCheckTraces();
    need_redraw = true;
}
var redirect_once = true;
function RedirectTester() {
    if (redirect_once) {
        redirect_once = false;
        var flashMovie = getFlashMovieObject(lICGicGll);
        flashMovie.sendTextToFlash(liOGIOOIl + mapid + liOGIcGIl);
    }
}
function PreviewDone() {}
window.onload = maxWindow;
function maxWindow() {
    need_redraw = true;
    window.moveTo(0, 0);
    if (document.all) {
        top.window.resizeTo(screen.availWidth, screen.availHeight);
    } else if (document.layers || document.getElementById) {
        if (top.window.outerHeight < screen.availHeight || top.window.outerWidth < screen.availWidth) {
            top.window.outerHeight = screen.availHeight;
            top.window.outerWidth = screen.availWidth;
        }
    }
}
function ClearCheckTraces() {
    waypoints = new Array();
    connections = new Array();
    box = new Array();
    water = new Array();
    pusher = new Array();
    player = new Array();
    teleport = new Array();
}
var waypoints = new Array();
var connections = new Array();
var box = new Array();
var water = new Array();
var pusher = new Array();
var player = new Array();
var teleport = new Array();
var CONNECTION_NOT_REACHABLE = 0;
var CONNECTION_WALK = 1;
var CONNECTION_JUMP = 2;
var CONNECTION_JUMP_SWORDS = 3;
var CONNECTION_JUMP_BOOST = 4;
var CONNECTION_TELEPORT = 5;
var CONNECTION_SAFEFALL = 6;
var CONNECTION_RUN_JUMP = 7;
var CONNECTION_UNSAFE_FALL = 8;
function Dist2D(x1, y1, x2, y2) {
    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}
function FindObject(val, search_class) {
    if (isNaN(val) && val.charAt(0) == lIOOiOOll) {
        for (var si = 0; si < es.length; si++)
            if (es[si].exists)
                if (es[si]._class == search_class) {
                    if (es[si].pm.uid == val) return si;
                }
    } else {
        var inco = 0;
        for (var si = 0; si < es.length; si++)
            if (es[si].exists)
                if (es[si]._class == search_class) {
                    if (inco == val) return si;
                    inco++;
                }
    }
    return -1;
}
function BuildCheckTraces() {
    ClearCheckTraces();
    var step_size = 20;
    for (var i = 0; i < es.length; i++)
        if (es[i].exists) {
            if (es[i]._class == lIOOlcl || es[i]._class == licDlCl) {
                box[box.length] = { x1: es[i].pm.x, y1: es[i].pm.y, x2: es[i].pm.x + es[i].pm.w, y2: es[i].pm.y + es[i].pm.h };
            } else if (es[i]._class == liOGICl) {
                pusher[pusher.length] = { x1: es[i].pm.x, y1: es[i].pm.y, x2: es[i].pm.x + es[i].pm.w, y2: es[i].pm.y + es[i].pm.h, damage: es[i].pm.damage, stable: es[i].pm.stab == 0 && Dist2D(es[i].pm.tox, es[i].pm.toy, 0, 0.5) < 1 };
            } else if (es[i]._class == licOICl) {
                water[water.length] = { x1: es[i].pm.x, y1: es[i].pm.y, x2: es[i].pm.x + es[i].pm.w, y2: es[i].pm.y + es[i].pm.h, damage: es[i].pm.damage };
            } else if (es[i]._class == liODl) {
                player[player.length] = { x: es[i].pm.x, y: es[i].pm.y, team: es[i].pm.team, hea: es[i].pm.hea, hmax: es[i].pm.hmax };
            } else if (es[i]._class == liCDicl) {
                if (es[i].pm.use_on != 0) {
                    var target_trigger = FindObject(es[i].pm.use_target, llCOIl);
                    var destination = -1;
                    if (target_trigger != -1)
                        for (var i2 = 1; i2 <= 10; i2++) {
                            if (es[target_trigger].pm[licDicDl + i2 + llCOlOGl] == 30 || es[target_trigger].pm[licDicDl + i2 + llCOlOGl] == 31) {
                                if (FindObject(es[target_trigger].pm[licDicDl + i2 + licDlcGl], liCDicl) == i) {
                                    destination = FindObject(es[target_trigger].pm[licDicDl + i2 + liODICOl], liCDicl);
                                    break;
                                }
                            }
                        }
                    if (destination != -1) {
                        teleport[teleport.length] = {
                            x1: es[i].pm.x,
                            y1: es[i].pm.y,
                            x2: es[i].pm.x + es[i].pm.w,
                            y2: es[i].pm.y + es[i].pm.h,
                            target_x: es[destination].pm.x + es[i].pm.w / 2,
                            target_y: es[destination].pm.y + es[i].pm.h / 2,
                        };
                    }
                }
            }
        }
    if (box.length == 0) {
        NewNote(licOiCDll, note_neutral);
        return;
    }
    var min_x = box[0].x1;
    var min_y = box[0].y1;
    var max_x = box[0].x2;
    var max_y = box[0].y2;
    for (var i = 1; i < box.length; i++) {
        if (box[i].x1 < min_x) min_x = box[i].x1;
        if (box[i].y1 < min_y) min_y = box[i].y1;
        if (box[i].x2 > max_x) max_x = box[i].x2;
        if (box[i].y2 > max_y) max_y = box[i].y2;
    }
    function TracePointAccess(x, y) {
        for (var i = box.length - 1; i >= 0; i--) if (x >= box[i].x1) if (x <= box[i].x2) if (y >= box[i].y1) if (y <= box[i].y2) return false;
        return true;
    }
    function TracePointAccessNoBorders(x, y) {
        for (var i = box.length - 1; i >= 0; i--) if (x > box[i].x1) if (x < box[i].x2) if (y > box[i].y1) if (y < box[i].y2) return false;
        return true;
    }
    function CanSpawnAt(x, y) {
        if (x > min_x + 100)
            if (x < max_x - 100)
                if (y > min_y + 100)
                    if (y < max_y - 100) {
                        if (TracePointAccess(x, y - 50))
                            if (TracePointAccess(x - 10, y - 50))
                                if (TracePointAccess(x + 10, y - 50))
                                    if (!TracePointAccess(x, y + 50))
                                        if (!TracePointAccess(x - 10, y + 50))
                                            if (!TracePointAccess(x + 10, y + 50)) {
                                                for (var i = 0; i < water.length; i++) if (x > water[i].x1 - 100) if (x < water[i].x2 + 100) if (y > water[i].y1 - 100) if (y < water[i].y2 + 100) return false;
                                                for (var i = 0; i < pusher.length; i++) if (x > pusher[i].x1 - 100) if (x < pusher[i].x2 + 100) if (y > pusher[i].y1 - 100) if (y < pusher[i].y2 + 100) return false;
                                                return true;
                                            }
                        return false;
                    }
        return false;
    }
    function CanStandAt(x, y) {
        for (var i = 0; i < pusher.length; i++) if (!pusher[i].stable) if (x > pusher[i].x1 - 10) if (x < pusher[i].x2 + 10) if (y > pusher[i].y1) if (y < pusher[i].y2 + 80) return false;
        if (TracePointAccess(x, y)) for (var i = 0; i < water.length; i++) if (x >= water[i].x1) if (x <= water[i].x2) if (y >= water[i].y1) if (y <= water[i].y2) return true;
        if (TracePointAccess(x, y - step_size / 2)) if (!TracePointAccess(x, y + step_size / 2)) return true;
        return false;
    }
    function FindPointNear(x, y) {
        var best_i = 0;
        var best_di = Dist2D(x, y, waypoints[0].x, waypoints[0].y);
        for (var i = 1; i < waypoints.length; i++) {
            var new_di = Dist2D(x, y, waypoints[i].x, waypoints[i].y);
            if (new_di < best_di) {
                best_i = i;
                best_di = new_di;
            }
        }
        return best_i;
    }
    function GetDamageAt(x, y) {
        var damage = 0;
        for (var i = 0; i < water.length; i++)
            if (x >= water[i].x1)
                if (x <= water[i].x2)
                    if (y >= water[i].y1)
                        if (y <= water[i].y2) {
                            damage = water[i].damage;
                            break;
                        }
        for (var i = 0; i < pusher.length; i++) if (x >= pusher[i].x1 - 10) if (x <= pusher[i].x2 + 10) if (y >= pusher[i].y1) if (y <= pusher[i].y2 + 80) damage += pusher[i].damage;
        return damage;
    }
    function TraceWay(x1, y1, x2, y2, allowed_hits) {
        if (x1 == x2 && y1 == y2) return TracePointAccessNoBorders(x1, y1);
        allowed_hits = allowed_hits || 1;
        var traces_made = 0;
        var start_x = x1;
        var start_y = y1;
        var speed_x = x2 - x1;
        var speed_y = y2 - y1;
        var end_x = x2;
        var end_y = y2;
        var hits = 0;
        if (Math.abs(speed_x) > Math.abs(speed_y)) {
            speed_y = (speed_y / Math.abs(speed_x)) * 5;
            speed_x = (speed_x / Math.abs(speed_x)) * 5;
        } else {
            speed_x = (speed_x / Math.abs(speed_y)) * 5;
            speed_y = (speed_y / Math.abs(speed_y)) * 5;
        }
        var ok1 = false;
        var ok2 = false;
        while (true) {
            if (TracePointAccessNoBorders(start_x, start_y)) {
                start_x += speed_x;
                start_y += speed_y;
                if (speed_x > 0) {
                    if (start_x >= end_x) ok1 = true;
                } else {
                    if (start_x <= end_x) ok1 = true;
                }
                if (speed_y > 0) {
                    if (start_y >= end_y) ok2 = true;
                } else {
                    if (start_y <= end_y) ok2 = true;
                }
                if (ok1 && ok2) {
                    return true;
                }
            } else {
                hits++;
                if (hits > allowed_hits) return false;
                start_x += speed_x;
                start_y += speed_y;
            }
            traces_made++;
            if (traces_made > 1000) {
                NewNote(licGlcOil + traces_made + lICGiOGll + x1 + llOGlcOll + y1 + llOGlcOll + x2 + llOGlcOll + y2 + licOIODll, note_neutral);
                return false;
            }
        }
    }
    function GetPossibleConnection(a, b) {
        if (!TraceWay(waypoints[a].x, waypoints[a].y, waypoints[a].x, waypoints[a].y - 50)) return CONNECTION_NOT_REACHABLE;
        if (!TraceWay(waypoints[b].x, waypoints[b].y, waypoints[b].x, waypoints[b].y - 50)) return CONNECTION_NOT_REACHABLE;
        if (Math.abs(waypoints[a].x - waypoints[b].x) <= step_size)
            if (Math.abs(waypoints[a].y - waypoints[b].y) <= step_size) {
                if (TraceWay(waypoints[a].x, waypoints[a].y, waypoints[b].x, waypoints[b].y)) if (TraceWay(waypoints[a].x, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50)) return CONNECTION_WALK;
                var high = Math.min(waypoints[a].y, waypoints[b].y);
                if (
                    (TraceWay(waypoints[a].x, waypoints[a].y, waypoints[a].x, high) && TraceWay(waypoints[b].x, waypoints[b].y, waypoints[a].x, high)) ||
                    (TraceWay(waypoints[b].x, waypoints[b].y, waypoints[b].x, high) && TraceWay(waypoints[a].x, waypoints[a].y, waypoints[b].x, high))
                )
                    if (TraceWay(waypoints[a].x, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50)) return CONNECTION_WALK;
            }
        if (waypoints[b].y > waypoints[a].y + step_size)
            if (waypoints[b].y <= waypoints[a].y + 350)
                if (Math.abs(waypoints[a].x - waypoints[b].x) / Math.pow(Math.abs(waypoints[b].y - waypoints[a].y), 0.5) < 20) {
                    if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80))
                        if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50))
                            if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80))
                                if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50)) return CONNECTION_SAFEFALL;
                    if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                        if (TraceWay(waypoints[b].x - 10, waypoints[b].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                            if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                                if (TraceWay(waypoints[b].x + 10, waypoints[b].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50)) {
                                    if (TraceWay(waypoints[a].x + 40 - 15, waypoints[a].y, waypoints[b].x - 15, waypoints[b].y))
                                        if (TraceWay(waypoints[a].x + 40 + 15, waypoints[a].y, waypoints[b].x + 15, waypoints[b].y))
                                            if (TraceWay(waypoints[a].x + 40, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80)) return CONNECTION_SAFEFALL;
                                    if (TraceWay(waypoints[a].x - 40 - 15, waypoints[a].y, waypoints[b].x - 15, waypoints[b].y))
                                        if (TraceWay(waypoints[a].x - 40 + 15, waypoints[a].y, waypoints[b].x + 15, waypoints[b].y))
                                            if (TraceWay(waypoints[a].x - 40, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80)) return CONNECTION_SAFEFALL;
                                }
                }
        if (waypoints[a].y > waypoints[b].y)
            if (waypoints[a].y <= waypoints[b].y + 165 - Math.pow(waypoints[a].x - waypoints[b].x, 2) / 500) {
                if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2 - 10, waypoints[a].y - 120))
                    if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2 + 10, waypoints[a].y - 120))
                        if (
                            TraceWay(waypoints[b].x - 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, waypoints[a].y - 120) ||
                            TraceWay(waypoints[b].x + 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, waypoints[a].y - 120)
                        )
                            return CONNECTION_JUMP;
            }
        if (waypoints[a].y >= waypoints[b].y - 70)
            if (waypoints[a].y <= waypoints[b].y + 70)
                if (Math.abs(waypoints[a].x - waypoints[b].x) <= 200) {
                    if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 80, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                        if (TraceWay(waypoints[b].x - 10, waypoints[b].y - 80, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                            if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                                if (TraceWay(waypoints[b].x - 10, waypoints[b].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                                    if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 80, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                                        if (TraceWay(waypoints[b].x + 10, waypoints[b].y - 80, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                                            if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                                                if (TraceWay(waypoints[b].x + 10, waypoints[b].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160)) return CONNECTION_RUN_JUMP;
                }
        if (waypoints[a].y + 100 > waypoints[b].y)
            if (waypoints[a].y <= waypoints[b].y + 200 - Math.pow(waypoints[a].x - waypoints[b].x, 2) / 500) {
                if (TraceWay(waypoints[a].x - 12, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 180))
                    if (TraceWay(waypoints[a].x + 12, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 180))
                        if (
                            TraceWay(waypoints[b].x - 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 180) ||
                            TraceWay(waypoints[b].x + 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 180)
                        )
                            return CONNECTION_JUMP_SWORDS;
            }
        if (waypoints[a].y + 100 > waypoints[b].y)
            if (waypoints[a].y <= waypoints[b].y + 265 - Math.pow(waypoints[a].x - waypoints[b].x, 2) / 3000) {
                if (TraceWay(waypoints[a].x - 15, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 210))
                    if (TraceWay(waypoints[a].x + 15, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 210))
                        if (
                            TraceWay(waypoints[b].x - 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 210) ||
                            TraceWay(waypoints[b].x + 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 210)
                        )
                            return CONNECTION_JUMP_BOOST;
            }
        if (waypoints[b].y > waypoints[a].y + step_size)
            if (Math.abs(waypoints[a].x - waypoints[b].x) / Math.pow(Math.abs(waypoints[b].y - waypoints[a].y), 0.5) < 20) {
                if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80))
                    if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50))
                        if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80)) if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50)) return CONNECTION_UNSAFE_FALL;
                if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                    if (TraceWay(waypoints[b].x - 10, waypoints[b].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                        if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                            if (TraceWay(waypoints[b].x + 10, waypoints[b].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50)) {
                                if (TraceWay(waypoints[a].x + 40 - 15, waypoints[a].y, waypoints[b].x - 15, waypoints[b].y))
                                    if (TraceWay(waypoints[a].x + 40 + 15, waypoints[a].y, waypoints[b].x + 15, waypoints[b].y))
                                        if (TraceWay(waypoints[a].x + 40, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80)) return CONNECTION_UNSAFE_FALL;
                                if (TraceWay(waypoints[a].x - 40 - 15, waypoints[a].y, waypoints[b].x - 15, waypoints[b].y))
                                    if (TraceWay(waypoints[a].x - 40 + 15, waypoints[a].y, waypoints[b].x + 15, waypoints[b].y))
                                        if (TraceWay(waypoints[a].x - 40, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80)) return CONNECTION_UNSAFE_FALL;
                            }
            }
        return CONNECTION_NOT_REACHABLE;
    }
    for (var _x = min_x; _x < max_x; _x += step_size)
        for (var _y = min_y; _y < max_y; _y += step_size) {
            if (CanStandAt(_x, _y)) waypoints[waypoints.length] = { x: _x, y: _y, spawn_dm: CanSpawnAt(_x, _y), spawn_coop: false, spawn_coop_team: -1, risk_level_dm: 0, risk_level_coop: 0, damage: GetDamageAt(_x, _y) };
        }
    for (var i = 0; i < teleport.length; i++) {
        var _x = (teleport[i].x1 + teleport[i].x2) / 2;
        var _y = teleport[i].y2;
        waypoints[waypoints.length] = { x: _x, y: _y, spawn_dm: CanSpawnAt(_x, _y), spawn_coop: false, spawn_coop_team: -1, risk_level_dm: 0, risk_level_coop: 0, damage: GetDamageAt(_x, _y) };
    }
    for (var i = 0; i < player.length; i++) {
        var my_point = FindPointNear(player[i].x, player[i].y);
        waypoints[my_point].spawn_coop = true;
        if (waypoints[my_point].spawn_coop_team != player[i].team) {
            if (waypoints[my_point].spawn_coop_team == -1) waypoints[my_point].spawn_coop_team = player[i].team;
            else {
                NewNote(licDlOOll, note_neutral);
                return;
            }
        }
    }
    for (var a = 0; a < waypoints.length; a++)
        for (var b = 0; b < waypoints.length; b++)
            if (a != b) {
                var trace_res = GetPossibleConnection(a, b);
                if (trace_res != CONNECTION_NOT_REACHABLE) {
                    connections[connections.length] = { a: a, b: b, method: trace_res };
                }
                if (Math.abs(waypoints[b].x - waypoints[a].x) < 1100)
                    if (Math.abs(waypoints[b].y - waypoints[a].y) < 1100) {
                        var di = Dist2D(waypoints[b].x, waypoints[b].y, waypoints[a].x, waypoints[a].y);
                        if (di < 1100)
                            if (di > 200) {
                                if (TraceWay(waypoints[b].x, waypoints[b].y - 60, waypoints[a].x, waypoints[a].y - 70, 4))
                                    if (!TraceWay(waypoints[a].x, waypoints[a].y - 60, waypoints[b].x, waypoints[b].y - 70, 4))
                                        waypoints[a].risk_level_dm += (100 / (100 + Dist2D(waypoints[b].x, waypoints[b].y, waypoints[a].x, waypoints[a].y))) * 2;
                                if (TraceWay(waypoints[b].x, waypoints[b].y - 60, waypoints[a].x, waypoints[a].y - 40, 4))
                                    if (!TraceWay(waypoints[a].x, waypoints[a].y - 60, waypoints[b].x, waypoints[b].y - 40, 4))
                                        waypoints[a].risk_level_dm += (100 / (100 + Dist2D(waypoints[b].x, waypoints[b].y, waypoints[a].x, waypoints[a].y))) * 2;
                                if (TraceWay(waypoints[b].x, waypoints[b].y - 60, waypoints[a].x, waypoints[a].y - 20, 4))
                                    if (!TraceWay(waypoints[a].x, waypoints[a].y - 60, waypoints[b].x, waypoints[b].y - 20, 4))
                                        waypoints[a].risk_level_dm += (100 / (100 + Dist2D(waypoints[b].x, waypoints[b].y, waypoints[a].x, waypoints[a].y))) * 2;
                            }
                    }
            }
    for (var i = 0; i < teleport.length; i++) {
        connections[connections.length] = { a: FindPointNear((teleport[i].x1 + teleport[i].x2) / 2, (teleport[i].y1 + teleport[i].y2) / 2), b: FindPointNear(teleport[i].target_x, teleport[i].target_y), method: CONNECTION_TELEPORT };
    }
}
window.onerror = function (msg, url, line) {
    if (checkWebKit() === null) alert(lICOICGll);
};
