var parambox_t, parambox_t2;
var canv =
    document.getElementById(lll);
var ctx =
    canv.getContext(lIl);
var right_panel =
    document.getElementById(lil);
var left_panel =
    document.getElementById(llOl);
var top_panel =
    document.getElementById(llcl);
var floattag =
    document.getElementById(llCl);
var _lsu = 10;
var _lsv = 10;
var lsu = 10;
var lsv = 10;
var es =
    new Array();
var expert_view =
    false;
var selgrd =
    lIcl;
var selgrd2 =
    lIcl;
var selgrd3 =
    liOl;
var selgrd_b =
    liCl;
var selgrd2_b =
    liCl;
var img_ctrl =
    new Image();
img_ctrl.src =
    lIOl;
var img_alt =
    new Image();
img_alt.src =
    lICl;
var img_shift =
    new Image();
img_shift.src =
    licl;
var img_player_hero =
    new Image();
img_player_hero.src =
    licDl;
var img_player_red =
    new Image();
img_player_red.src =
    liOGl;
var img_player_blue =
    new Image();
img_player_blue.src =
    liCDl;
var img_player_cs =
    new Image();
img_player_cs.src =
    lIcGl;
var img_unknown =
    new Image();
img_unknown.src =
    liOOl;
var img_weapon =
    new Image();
img_weapon.src =
    liCOl;
var img_inf =
    new Image();
img_inf.src =
    llODl;
var img_song =
    new Image();
img_song.src =
    lIOGl;
var img_image =
    new Image();
img_image.src =
    llCGl;
var img_trigger =
    new Image();
img_trigger.src =
    lIODl;
var img_timer =
    new Image();
img_timer.src =
    licGl;
var img_lamp =
    new Image();
img_lamp.src =
    llcOl;
var img_lamp_ambient =
    new Image();
img_lamp_ambient.src =
    llcDl;
var img_region =
    new Image();
img_region.src =
    lICDl;
var img_region_red =
    new Image();
img_region_red.src =
    lICOl;
var img_region_blue =
    new Image();
img_region_blue.src =
    llOGl;
var img_quickpick =
    new Image();
img_quickpick.src =
    lIcOl;
var img_quickpick2 =
    new Image();
img_quickpick2.src =
    llOOl;
var img_slct =
    new Image();
img_slct.onload =
    function() {
        selgrd =
            ctx.createPattern(img_slct, liODl);
    };
var img_slct2 =
    new Image();
img_slct2.onload =
    function() {
        selgrd2 =
            ctx.createPattern(img_slct2, liODl);
    };
var img_slct3 =
    new Image();
img_slct3.onload =
    function() {
        selgrd3 =
            ctx.createPattern(img_slct3, liODl);
    };
var img_slct_b =
    new Image();
img_slct_b.onload =
    function() {
        selgrd_b =
            ctx.createPattern(img_slct_b, liODl);
    };
var img_slct2_b =
    new Image();
img_slct2_b.onload =
    function() {
        selgrd2_b =
            ctx.createPattern(img_slct2_b, liODl);
    };
var img_put =
    new Image();
img_put.src =
    llCOl;
img_slct.src =
    llcGl;
img_slct2.src =
    llCDl;
img_slct3.src =
    licOl;
img_slct_b.src =
    lICGl;
img_slct2_b.src =
    lIcDl;
var lo_x =
    new Array();
var lo_y =
    new Array();
var lo_w =
    new Array();
var lo_h =
    new Array();
lo_x[liCGl] =
    lo_x[lIOOl] = -32;
lo_y[liCGl] =
    lo_y[lIOOl] = -87;
lo_w[liCGl] =
    lo_w[lIOOl] =
    65;
lo_h[liCGl] =
    lo_h[lIOOl] =
    96;
lo_x[liCOll] = -28;
lo_y[liCOll] = -12;
lo_w[liCOll] =
    100;
lo_h[liCOll] =
    25;
lo_x[lIcOil] = -126;
lo_y[lIcOil] = -66;
lo_w[lIcOil] =
    263;
lo_h[lIcOil] =
    281;
lo_x[lIOOIl] =
    lo_x[lICOil] =
    lo_x[llcDIl] =
    lo_x[lICDll] =
    lo_x[liCGil] =
    lo_x[llcGil] =
    lo_x[lIcGll] = -16;
lo_y[lIOOIl] =
    lo_y[lICOil] =
    lo_y[llcDIl] =
    lo_y[lICDll] =
    lo_y[liCGil] =
    lo_y[llcGil] =
    lo_y[lIcGll] = -16;
lo_w[lIOOIl] =
    lo_w[lICOil] =
    lo_w[llcDIl] =
    lo_w[lICDll] =
    lo_w[liCGil] =
    lo_w[llcGil] =
    lo_w[lIcGll] =
    32;
lo_h[lIOOIl] =
    lo_h[lICOil] =
    lo_h[llcDIl] =
    lo_h[lICDll] =
    lo_h[liCGil] =
    lo_h[llcGil] =
    lo_h[lIcGll] =
    32;
lo_x[llCOIl] = -12;
lo_y[llCOIl] = -20;
lo_w[llCOIl] =
    25;
lo_h[llCOIl] =
    41;
var bo_x =
    new Array();
var bo_y =
    new Array();
var bo_w =
    new Array();
var bo_h =
    new Array();
bo_x[liCGl] =
    bo_x[lIOOl] = -15;
bo_y[liCGl] =
    bo_y[lIOOl] = -82;
bo_w[liCGl] =
    bo_w[lIOOl] =
    30;
bo_h[liCGl] =
    bo_h[lIOOl] =
    82;
bo_x[liCOll] = -25;
bo_y[liCOll] = -7;
bo_w[liCOll] =
    50;
bo_h[liCOll] =
    14;
bo_x[lIOOIl] =
    bo_x[lICOil] =
    bo_x[llcDIl] =
    bo_x[lICDll] =
    bo_x[liCGil] =
    bo_x[llcGil] =
    bo_x[lIcGll] = -16;
bo_y[lIOOIl] =
    bo_y[lICOil] =
    bo_y[llcDIl] =
    bo_y[lICDll] =
    bo_y[liCGil] =
    bo_y[llcGil] =
    bo_y[lIcGll] = -16;
bo_w[lIOOIl] =
    bo_w[lICOil] =
    bo_w[llcDIl] =
    bo_w[lICDll] =
    bo_w[liCGil] =
    bo_w[llcGil] =
    bo_w[lIcGll] =
    32;
bo_h[lIOOIl] =
    bo_h[lICOil] =
    bo_h[llcDIl] =
    bo_h[lICDll] =
    bo_h[liCGil] =
    bo_h[llcGil] =
    bo_h[lIcGll] =
    32;
bo_x[llCOIl] = -15;
bo_y[llCOIl] = -20;
bo_w[llCOIl] =
    30;
bo_h[llCOIl] =
    40;
bo_x[lIcOil] = -21;
bo_y[lIcOil] = -21;
bo_w[lIcOil] =
    42;
bo_h[lIcOil] =
    42;
bo_x[lICDIl] = -99;
bo_y[lICDIl] = -32;
bo_w[lICDIl] =
    222;
bo_h[lICDIl] =
    111;
bo_x[liODIl] = -110;
bo_y[liODIl] = -56;
bo_w[liODIl] =
    233;
bo_h[liODIl] =
    257;
bo_x[licDil] = -30;
bo_y[licDil] = -60;
bo_w[licDil] =
    60;
bo_h[licDil] =
    120;
bo_x[licOll] = -30;
bo_y[licOll] = -30;
bo_w[licOll] =
    60;
bo_h[licOll] =
    60;
bo_x[llcDll] = -13;
bo_y[llcDll] = -11;
bo_w[llcDll] =
    45;
bo_h[llcDll] =
    34;
bo_x[llCOil] = -10;
bo_y[llCOil] =
    0;
bo_w[llCOil] =
    20;
bo_h[llCOil] =
    188;
bo_x[llcGIl] = -49;
bo_y[llcGIl] = -46;
bo_w[llcGIl] =
    182;
bo_h[llcGIl] =
    129;
lo_x[lIODil] = -59;
lo_y[lIODil] = -51;
lo_w[lIODil] =
    118;
lo_h[lIODil] =
    100;
lo_x[llcDil] = -32;
lo_y[llcDil] = -27;
lo_w[llcDil] =
    64;
lo_h[llcDil] =
    53;
lo_x[lIODIl] = -250;
lo_y[lIODIl] = -81;
lo_w[lIODIl] =
    376;
lo_h[lIODIl] =
    92;
lo_x[lIcOIl] =
    0;
lo_y[lIcOIl] =
    0;
lo_w[lIcOIl] =
    0;
lo_h[lIcOIl] =
    0;
lo_x[lIcDIl] = -250;
lo_y[lIcDIl] = -81 - (376 - 92);
lo_w[lIcDIl] =
    376;
lo_h[lIcDIl] =
    376;
lo_x[llOOll] = -57;
lo_y[llOOll] = -16;
lo_w[llOOll] =
    114;
lo_h[llOOll] =
    20;
lo_x[llODil] = -57;
lo_y[llODil] = -16;
lo_w[llODil] =
    114;
lo_h[llODil] =
    20;
lo_x[liOGIl] = -40;
lo_y[liOGIl] = -47;
lo_w[liOGIl] =
    80;
lo_h[liOGIl] =
    58;
lo_x[llcGll] = -40;
lo_y[llcGll] = -13;
lo_w[llcGll] =
    80;
lo_h[llcGll] =
    58;
lo_x[liCDll] = -46;
lo_y[liCDll] = -26;
lo_w[liCDll] =
    237;
lo_h[liCDll] =
    53;
lo_x[licGil] = -189;
lo_y[licGil] = -26;
lo_w[licGil] =
    237;
lo_h[licGil] =
    53;
lo_x[llCOll] = -26;
lo_y[llCOll] = -46;
lo_w[llCOll] =
    53;
lo_h[llCOll] =
    237;
lo_x[llOOIl] = -26;
lo_y[llOOIl] = -189;
lo_w[llOOIl] =
    53;
lo_h[llOOIl] =
    237;
lo_x[llCDil] = -171;
lo_y[llCDil] = -8;
lo_w[llCDil] =
    341;
lo_h[llCDil] =
    20;
lo_x[lICOIl] = -171;
lo_y[lICOIl] = -73;
lo_w[lICOIl] =
    341;
lo_h[lICOIl] =
    84;
lo_x[liOGil] = -40;
lo_y[liOGil] = -12;
lo_w[liOGil] =
    80;
lo_h[liOGil] =
    23;
lo_x[lIcOll] = -40;
lo_y[lIcOll] = -12;
lo_w[lIcOll] =
    80;
lo_h[lIcOll] =
    23;
lo_x[lICDil] = -50;
lo_y[lICDil] = -50;
lo_w[lICDil] =
    100;
lo_h[lICDil] =
    100;
lo_x[lIOGil] = -50;
lo_y[lIOGil] = -50;
lo_w[lIOGil] =
    100;
lo_h[lIOGil] =
    100;
lo_x[liODil] = -50;
lo_y[liODil] = -50;
lo_w[liODil] =
    100;
lo_h[liODil] =
    100;

function
SetDefaultDimensionsOffset(v) {
    v =
        lICGIl + v;
    lo_x[v] = -400;
    lo_y[v] = -400;
    lo_w[v] =
        800;
    lo_h[v] =
        800;
}
SetDefaultDimensionsOffset(liOGll);
SetDefaultDimensionsOffset(llOOil);
SetDefaultDimensionsOffset(liOOil);
SetDefaultDimensionsOffset(lICOll);
SetDefaultDimensionsOffset(liCDil);
SetDefaultDimensionsOffset(liOOll);
SetDefaultDimensionsOffset(licGll);
SetDefaultDimensionsOffset(lIOOll);
SetDefaultDimensionsOffset(lICGil);
SetDefaultDimensionsOffset(lIcGIl);
SetDefaultDimensionsOffset(liCGIl);
SetDefaultDimensionsOffset(lIODll);
SetDefaultDimensionsOffset(lIOGIl);
SetDefaultDimensionsOffset(llOGIl);
SetDefaultDimensionsOffset(llOGil);
SetDefaultDimensionsOffset(liCOil);
SetDefaultDimensionsOffset(licGIl);
SetDefaultDimensionsOffset(llCDll);
SetDefaultDimensionsOffset(llCGil);
SetDefaultDimensionsOffset(llODll);
SetDefaultDimensionsOffset(liCDIl);
SetDefaultDimensionsOffset(lICGll);
SetDefaultDimensionsOffset(licDll);
SetDefaultDimensionsOffset(llODIl);
SetDefaultDimensionsOffset(llcOll);
SetDefaultDimensionsOffset(lIcDll);
SetDefaultDimensionsOffset(lIOOil);
SetDefaultDimensionsOffset(llCDIl);
SetDefaultDimensionsOffset(liODll);
SetDefaultDimensionsOffset(lIcDil);
SetDefaultDimensionsOffset(llCGIl);
SetDefaultDimensionsOffset(llcOil);
SetDefaultDimensionsOffset(lIOGll);
SetDefaultDimensionsOffset(licOIl);
SetDefaultDimensionsOffset(llCGll);
SetDefaultDimensionsOffset(licDIl);
SetDefaultDimensionsOffset(llcOIl);
SetDefaultDimensionsOffset(lIcGil);
SetDefaultDimensionsOffset(liOOIl);
SetDefaultDimensionsOffset(llOGll);
SetDefaultDimensionsOffset(liCGll);
SetDefaultDimensionsOffset(lIOOIOl);
SetDefaultDimensionsOffset(llcOiCl);
SetDefaultDimensionsOffset(lICDlCl);
SetDefaultDimensionsOffset(lIODICl);
SetDefaultDimensionsOffset(lIODicl);
SetDefaultDimensionsOffset(llCGIcl);
SetDefaultDimensionsOffset(lICGIOl);
SetDefaultDimensionsOffset(licOicl);
SetDefaultDimensionsOffset(llOOICl);
SetDefaultDimensionsOffset(lIOOiOl);
SetDefaultDimensionsOffset(llcDiCl);
SetDefaultDimensionsOffset(liCOICl);
SetDefaultDimensionsOffset(liCOIcl);
SetDefaultDimensionsOffset(llCGiCl);
SetDefaultDimensionsOffset(llCOICl);
SetDefaultDimensionsOffset(llcGiCl);
SetDefaultDimensionsOffset(lICGICl);
SetDefaultDimensionsOffset(llcGlCl);
SetDefaultDimensionsOffset(llcOIcl);
SetDefaultDimensionsOffset(llOGIcl);
SetDefaultDimensionsOffset(lICDicl);
lo_x[lICDIOl] = -50;
lo_y[lICDIOl] = -50;
lo_w[lICDIOl] =
    100;
lo_h[lICDIOl] =
    100;
lo_x[llCOiCl] = -50;
lo_y[llCOiCl] = -50;
lo_w[llCOiCl] =
    100;
lo_h[llCOiCl] =
    100;
lo_x[lIOOicl] = -50;
lo_y[lIOOicl] = -50;
lo_w[lIOOicl] =
    100;
lo_h[lIOOicl] =
    100;

function
ThinkOfBBoxClass(this_class, es_i) {
    if (this_class == lIcOil)
        if (bo_w[this_class + llCGiOl + es_i.pm.model] != null) {
            this_class =
                this_class + llCGiOl + es_i.pm.model;
        } return this_class;
}

function
ThinkOfOffsetClass(this_class, es_i) {
    if (this_class == lIcGll)
        if (lo_w[this_class + llCGiOl + es_i.pm.model] != null) {
            this_class =
                this_class + llCGiOl + es_i.pm.model;
        } return this_class;
}

function
img_decide(e) {
    switch (e._class) {
        case lIOOl:
        case liCGl:
            switch (e.pm.char) {
                case 1:
                    return img_player_hero;
                case 73:
                    return img_player_blue;
                case 74:
                    return img_player_red;
                default:
                    return img_player_cs;
            }
        case liCOll:
            if (img_guns[e.pm.model] != undefined) return img_guns[e.pm.model];
            return img_weapon;
        case llCOIl:
            if (img_barrels[e.pm.model] != undefined) return img_barrels[e.pm.model];
            return img_unknown;
        case lIcOil:
            if (img_vehicles[e.pm.model] != undefined) return img_vehicles[e.pm.model];
            return img_unknown;
        case llcDIl:
            return img_inf;
        case lICOil:
            return img_song;
        case lIOOIl:
            return img_image;
        case lICDll:
            return img_trigger;
        case liCGil:
            return img_timer;
        case llcGil: {
            if (e.pm.flare == licGICl || e.pm.flare == 1) return img_lamp;
            return img_lamp_ambient;
        }
        case lIcGll: {
            if (img_decors[e.pm.model] != undefined) return img_decors[e.pm.model];
        }
    }
    return img_unknown;
}
var note_place =
    document.getElementById(lICGlOl);
var Notes =
    new Array();
var Notes_first_invis =
    0;
var Notes_first_exist =
    0;
var Notes_total =
    0;
var note_good =
    llOGlOl;
var note_bad =
    llcDicl;
var note_neutral =
    lIODlOl;
var note_passive =
    liCGiCl;

function
endNote(noteid, gotodis, autoti) {
    if (gotodis) {
        if (Notes[noteid].canterminate) {
            Notes[noteid].canterminate = false;
            if (autoti) Notes[noteid].physical.className =
                lICOlcl;
            else Notes[noteid].physical.className =
                llCDiCl;
            Notes[noteid].physical.style.webkitAnimationName =
                lICDiCl;
            Notes[noteid].timeout =
                setTimeout(licGlCl + noteid + lIODIcl, 800);
        }
    } else {
        note_place.removeChild(Notes[noteid].physical);
        Notes[noteid].physical =
            null;
    }
}

function
termNote(noteid) {
    if (Notes[noteid].canterminate) endNote(noteid, true, false);
}

function
NewNote(_text, _color) {
    Notes[Notes_total] = {
        physical: document.createElement(liCGlOl),
        timeout: setTimeout(licGlCl + Notes_total + lIOOICl, _color == note_passive ? 5000 : 2000 + _text.length * 50),
        canterminate: true
    };
    note_place.appendChild(Notes[Notes_total].physical);
    Notes[Notes_total].physical.setAttribute(llOGiOl, lICGiOl);
    Notes[Notes_total].physical.setAttribute(lICOIOl, lIOOlOl + _color);
    Notes[Notes_total].physical.setAttribute(llcOlOl, liOGiCl + Notes_total);
    Notes[Notes_total].physical.setAttribute(llODlCl, liCOicl + Notes_total + liOGIOl);
    Notes[Notes_total].physical.innerHTML =
        _text;
    Notes_total++;
}

function
httpGet(theUrl, posts) {
    var xmlHttp =
        null;
    xmlHttp =
        new XMLHttpRequest();
    xmlHttp.open(liODiOl, theUrl, false);
    try {
        xmlHttp.setRequestHeader(llCOIcl, llcDIOl);
        xmlHttp.send(posts);
    } catch (e) {
        return licOlCl;
    }
    return xmlHttp.responseText;
}

function
getQueryParams(qs) {
    qs =
        qs.split(lICOICl).join(llCGlcl);
    var params = {},
        tokens, re =
        /[?&]?([^=]+)=([^&]*)/g;
    while (tokens =
        re.exec(qs)) {
        params[decodeURIComponent(tokens[1])] =
            decodeURIComponent(tokens[2]);
    }
    return params;
}
var request_a =
    getQueryParams(document.location.search).a;
if (request_a === undefined) request_a =
    lIcDICl;

function
ServerRequest(my_request, operation, callback = null) {
    var url =
        llCGlOl + request_a;
    var t =
        httpGet(url, my_request);
    if (t == licOlCl) {
        if (operation == llcDlCl) {
            NewNote(llcOIOl, note_bad);
        } else if (operation == lIcOIOl) {
            NewNote(llcDIcl, note_bad);
        }
    } else {
        try {
            eval.call(window, t);
            if (operation == llcDlCl || operation == lIcOIOl) {
                changes_made =
                    false;
                if (operation == lIcOIOl) {
                    need_redraw =
                        true;
                    need_GUIParams_update =
                        true;
                    ClearUndos();
                }
            }
        } catch (e) {
            NewNote(llcOicl, note_bad);
            debugger;
        }
    }
    if (callback != null) callback();
}
var param_type =
    new Array();
param_type[0] = [lICOicl, lIcGIOl, llOGlCl, liCGICl, lICOIcl];
param_type[1] = [lICDICl, licDlcl, liCOiOl, liCGIcl, lICOIcl];
param_type[2] = [liCGlCl, licDlcl, llcOiOl, lIcGicl, lICOIcl];
param_type[3] = [liCOIOl, lIOGICl, licOIOl, licOIcl, lICOIcl];
param_type[4] = [lIcGlcl, lIOGICl, lIcOiOl, liODicl, lICOIcl];
param_type[5] = [liCOiCl, llOGiCl, licGlOl, llOOlcl, lICOIcl];
param_type[6] = [liODiCl, llOGiCl, lIcGIcl, liCGicl, lICOIcl];
param_type[7] = [liCDICl, liCDICl, liOOiCl, llCDiOl, lICOIcl];
param_type[8] = [licDICl, licDICl, liOGlcl, liODlCl, lICOIcl];
param_type[9] = [lIOGlCl, lIOGlCl, llCGICl, lIcDlcl, lICOIcl];
param_type[10] = [lICDlOl, liOGICl, llOGicl, llcGICl, lICOIcl];
param_type[11] = [lIcOlCl, lIcOlCl, llCDlcl, liODICl, lICOIcl];
param_type[12] = [lIcDicl, lIOGiCl, liCDiOl, llcOlcl, lICOIcl];
param_type[13] = [llcDICl, lIOGICl, llCOIOl, licGIcl, llcGil];
param_type[14] = [lICDiOl, liODlOl, lICOlOl, llCDIOl, llcGil];
param_type[15] = [licDlOl, liCOlcl, llcOlCl, llCDlCl, liCOll];
param_type[16] = [llOOIOl, lIOGIOl, llcGIcl, liOGlOl, liCOll];
param_type[17] = [llcOICl, lIcGlCl, llcGlcl, llODIOl, liCOll];
param_type[18] = [lIcOlOl, lIOOiCl, lIODiCl, lICGlCl, lICOIcl];
param_type[19] = [llCGicl, lIOOiCl, liODlcl, lIcDiOl, lICOIcl];
param_type[20] = [lIcDiCl, llCOlcl, lIODlCl, licDIcl, lIcOIcl];
param_type[21] = [llODlOl, liCGIOl, licDlCl, lICDIcl, lICGIcl];
param_type[22] = [liCDIOl, lIOGiCl, lIcDIcl, llCOlOl, lICGicl];
param_type[23] = [lIOGiOl, llCGlCl, licGiOl, lIOOlcl, lICGicl];
param_type[24] = [liCOIOl, lIOGICl, licOICl, liODIOl, liOOlOl];
param_type[25] = [lIcGlcl, lIOGICl, licOlcl, llOGIOl, liOOlOl];
param_type[26] = [liOOlcl, liCGIOl, lIcOiCl, lIcOlcl, liOOlOl];
param_type[27] = [llODlOl, lIcOICl, lICOlCl, llcGiOl, liOOlOl];
param_type[28] = [lIOGlcl, liCGIOl, llOOlCl, lIODlcl, liCOlCl];
param_type[29] = [liOOiOl, liODlOl, licDiCl, llcGicl, liCOlCl];
param_type[30] = [lIcGiCl, liODlOl, liOGicl, liOOICl, liCGil];
param_type[31] = [llOOiCl, llOOiCl, liCDiCl, liCGiOl, liCGil];
param_type[32] = [llOOlOl, lIOGiCl, lICDlcl, liCDlOl, liCGil];
param_type[33] = [lIcOicl, liCGIOl, licGlcl, licGiCl, liCGil];
param_type[34] = [licDlOl, llODIcl, licDicl, lIOOlCl, lIcGll];
param_type[35] = [liOGiOl, lIcDlCl, llcDiOl, llCDIcl, llcDIl];
param_type[36] = [licDIOl, lIcGlOl, lICGiCl, llCOlCl, llcDIl];
param_type[37] = [licDlOl, llCOiOl, licDicl, liOGlCl, lIcOil];
param_type[38] = [llCGIOl, liCGIOl, llCDICl, licOiCl, lIcOil];
param_type[39] = [licDlOl, lIODIOl, licDicl, liCDlcl, llCOIl];
param_type[40] = [lIcGiCl, liODlOl, llcGIOl, llcDlcl, lICDll];
param_type[41] = [llOOiCl, llOOiCl, liCDiCl, liCGiOl, lICDll];
param_type[42] = [lIcDiCl, llOOicl, lIODlCl, licDIcl, llOOIcl];
param_type[43] = [llCDlOl, lIcGIOl, lIcDIOl, lIOGicl, lIcOIcl];
param_type[44] = [liCDicl, lIcGIOl, lIcGICl, liCDlCl, lICOil];
param_type[45] = [lIODiOl, liCGIOl, licOlOl, licOlOl, lICOil];
param_type[46] = [licOiOl, llODlcl, llOGICl, llCOicl, liCOlCl];
param_type[47] = [liOGIcl, llODlcl, llOGICl, llCDicl, lIcOIcl];
param_type[48] = [licOiOl, llODlcl, llOGICl, llOOiOl, lIcGll];
param_type[49] = [licOiOl, llODlcl, llOGICl, lIcGiOl, liOOlOl];
param_type[50] = [licOiOl, llODlcl, llOGICl, llODicl, lICGicl];
param_type[51] = [liCOlOl, liODlOl, llODiOl, liCGlcl, lICGIcl];
param_type[52] = [liOOlCl, liODlOl, licDiOl, licDiOl, lICOil];
param_type[53] = [llcGlOl, lIOGiCl, liCDIcl, llcDlOl, lICOil];
param_type[54] = [llcOlOl, liCGIOl, lIOOIcl, lIcDlOl, lIOOIl];
param_type[55] = [liOOIcl, lICOiOl, lIOGIcl, liODIcl, lIOOIl];
param_type[56] = [lICGlcl, lICOiOl, lICOiCl, liOOIOl, lIOOIl];
param_type[57] = [licGicl, lIOGICl, llOGICDl, llcOiCGl, lICOIcl];
param_type[58] = [lIOGiODl, lIOGICl, lIcOICGl, llcOiCGl, lICOIcl];
param_type[59] = [liOGICDl, lIODIOGl, llODicOl, llCOicGl, lICOIcl];
param_type[60] = [liOOICDl, liODlOl, llcDlCOl, licOIcOl, lICOIcl];
param_type[61] = [liOOlCGl, lIOGICl, licOlOGl, liODlcGl, lICOIcl];
param_type[62] = [liCDiODl, lIOGICl, liCGlCDl, lIODiOOl, lICOIcl];
param_type[63] = [llCOICGl, lIOGICl, liCDIcDl, liCOlcDl, lICOIcl];
for (var i = 1; i <= 10; i++) {
    param_type[param_type.length] = [lIOGicOl + i + lIOGiCOl, lIOOlOGl, llOOiCDl + i + lICOIcGl, lICDicDl + i + lIcDICl, lICDll];
    param_type[param_type.length] = [lIOGicOl + i + lIOGiCGl, lIcGlOl, lIcDICDl, licOICGl + i + lIcDICl, lICDll];
    param_type[param_type.length] = [lIOGicOl + i + lICGlcOl, lIcGlOl, lIOGlOOl, llCDICDl + i + lIcDICl, lICDll];
}
var CACHED_BGS = {};
var CACHED_DECORS = {};
var CUSTOM_IMAGES_APPROVED = {};
var CACHED_SKY = {};
var special_values_table =
    new Array();
special_values_table[liCDICl] = new Array();
special_values_table[liCDICl][0] = llcOICOl;
special_values_table[liCDICl][1] = llOOIOOl;
special_values_table[liCDICl][2] = liCOiODl;
special_values_table[liCDICl][3] = lICGiODl;
special_values_table[liCDICl][4] = lICDlcOl;
special_values_table[liCDICl][5] = licGICDl;
special_values_table[liCDICl][6] = lIOGIOOl;
special_values_table[liCDICl][7] = llcOlCDl;
special_values_table[liCDICl][8] = llCOlOOl;
special_values_table[liCDICl][9] = llCGICDl;
special_values_table[liCDICl][10] = llcDiOOl;
special_values_table[liCDICl][11] = lIODicDl;
special_values_table[liCDICl][12] = lIcDiODl;
special_values_table[liCDICl][13] = llcGlODl;
special_values_table[liCDICl][14] = lIcOiCDl;
special_values_table[liCDICl][15] = llCGICOl;
special_values_table[liCDICl][16] = lICGICDl;
special_values_table[lIOGIOl] = new Array();
special_values_table[lIOGIOl][-1] = llODicDl;
for (var i = 0; i < special_values_table[liCDICl].length; i++) special_values_table[lIOGIOl][i] =
    special_values_table[liCDICl][i];
special_values_table[licDICl] = new Array();
special_values_table[licDICl][-1] = llCDiOOl;
special_values_table[licDICl][1] = lIOGicGl;
special_values_table[lIOGlCl] = new Array();
special_values_table[lIOGlCl][-1] = liCOicGl;
special_values_table[lIOGlCl][1] = llcDICOl;
special_values_table[lIOGlCl][2] = llOGlCOl;
special_values_table[lIOGlCl][3] = llOGlcGl;
special_values_table[lIOGlCl][4] = llcOIOGl;
special_values_table[lIOGlCl][5] = lIcGICGl;
special_values_table[lIOGlCl][6] = lICOiOGl;
special_values_table[lIOGlCl][7] = liCOlcGl;
special_values_table[lIOGlCl][8] = licOlODl;
special_values_table[lIOGlCl][9] = liODiCDl;
special_values_table[lIOGlCl][11] = licGIcGl;
special_values_table[lIOGlCl][12] = llCDicDl;
special_values_table[lIOGlCl][13] = llCGlODl;
special_values_table[lIOGlCl][14] = llCGICGl;
special_values_table[lIOGlCl][15] = liODiCGl;
special_values_table[lIOGlCl][16] = liCGIOOl;
special_values_table[lIOGlCl][17] = llOOicOl;
special_values_table[lIOGlCl][18] = llOOIOGl;
special_values_table[lIOGlCl][19] = liCGICGl;
special_values_table[lIOGlCl][21] = llCGlCDl;
special_values_table[lIOGlCl][22] = llcGIOGl;
special_values_table[lIOGlCl][23] = llOOiOGl;
special_values_table[lIOGlCl][24] = lIcOlOGl;
special_values_table[lIOGlCl][25] = llCGIcOl;
special_values_table[lIOGlCl][26] = liCOIcOl;
special_values_table[lIOGlCl][27] = llcGlOGl;
special_values_table[lIOGlCl][28] = liODIODl;
special_values_table[lIOGlCl][29] = licOicOl;
special_values_table[lIOGlCl][31] = lICDlcDl;
special_values_table[lIOGlCl][32] = lIODlOGl;
special_values_table[lIOGlCl][33] = liCDlOGl;
special_values_table[lIOGlCl][34] = lICOiOOl;
special_values_table[lIOGlCl][35] = lIcDlcOl;
special_values_table[lIOGlCl][36] = liCDiOGl;
special_values_table[lIOGlCl][37] = liODlCDl;
special_values_table[lIOGlCl][40] = liOGlODl;
special_values_table[lIOGlCl][41] = lIODICOl;
special_values_table[lIOGlCl][42] = lIcGlCOl;
special_values_table[lIOGlCl][43] = llOGicOl;
special_values_table[lIOGlCl][44] = liODIOOl;
special_values_table[lIOGlCl][45] = lIcGlcGl;
special_values_table[lIOGlCl][46] = lIODlcOl;
special_values_table[lIOGlCl][47] = llCDIcGl;
special_values_table[lIOGlCl][48] = liOGlcOl;
special_values_table[lIOGlCl][49] = llcOiCOl;
special_values_table[lIOGlCl][61] = llCOIcGl;
special_values_table[lIOGlCl][69] = llCDICGl;
special_values_table[lIOGlCl][70] = lICGiOGl;
special_values_table[lIOGlCl][71] = liCGlCOl;
special_values_table[lIOGlCl][72] = licOiCOl;
special_values_table[lIOGlCl][73] = llOOlCGl;
special_values_table[lIOGlCl][74] = liODicOl;
special_values_table[lIOGlCl][75] = licGlOGl;
special_values_table[lIOGlCl][76] = liODIcGl;
special_values_table[lIOGlCl][77] = liOGICOl;
special_values_table[lIOGlCl][78] = llCGiCDl;
special_values_table[lIOGlCl][79] = lICGIcOl;
special_values_table[lIOGlCl][80] = liCGicGl;
special_values_table[lIOGlCl][81] = llcOiODl;
special_values_table[lIOGlCl][82] = llCGlcOl;
special_values_table[lIOGlCl][83] = lIcGicDl;
special_values_table[lIOGlCl][84] = lIODICGl;
special_values_table[lIOGlCl][85] = liODiODl;
special_values_table[lIOGlCl][86] = llcOlODl;
special_values_table[lIOGlCl][87] = llcOIODl;
special_values_table[lIOGlCl][88] = liCOiCGl;
special_values_table[lIOGlCl][89] = licOIOOl;
special_values_table[lIOGlCl][90] = licDIOOl;
special_values_table[lIOGlCl][130] = llCDlCDl;
special_values_table[lIOGlCl][131] = lIcOlCOl;
special_values_table[lIOGlCl][132] = llCDlCOl;
special_values_table[lIOGlCl][133] = lICDICGl;
special_values_table[lIOGlCl][134] = liOOlcOl;
special_values_table[lIOGlCl][135] = lIcDICOl;
special_values_table[lIOGlCl][136] = lICOlCGl;
special_values_table[lIOGlCl][137] = lIOGlcDl;
special_values_table[lIOGlCl][138] = lICGicGl;
special_values_table[lIOGlCl][139] = liOOiCOl;
special_values_table[lIOGlCl][140] = licGlCGl;
special_values_table[lIOGlCl][141] = lIcOICDl;
special_values_table[lIOGlCl][142] = lIODicOl;
special_values_table[lIOGlCl][143] = liOOIcOl;
special_values_table[lIOGlCl][144] = llcGlCDl;
special_values_table[lIOGlCl][145] = lIOGicDl;
special_values_table[lIOGlCl][146] = lIcDicDl;
special_values_table[lIOGlCl][147] = liCGiOOl;
special_values_table[lIOGlCl][148] = llcGiODl;
special_values_table[lIOGlCl][149] = llCOlcDl;
special_values_table[lIOGlCl][150] = llcGiOGl;
var img_chars_full =
    new Array();
for (i in special_values_table[lIOGlCl]) {
    img_chars_full[i] =
        new Image();
    var leading =
        i + lIcDICl;
    while (leading.length < 4) leading =
        '0' + leading;
    img_chars_full[i].src =
        lICDlOGl + leading + llCGlCGl;
    special_values_table[lIOGlCl][i] =
        liODlOOl + img_chars_full[i].src + licOlCDl + special_values_table[lIOGlCl][i];
}
special_values_table[liOGICl] = new Array();
special_values_table[liOGICl][-2] = lICOlODl;
special_values_table[liOGICl][-1] = liOGlOGl;
special_values_table[liOGICl][licGicGl] = lIcOil;
special_values_table[liCGiCDl] = new Array();
special_values_table[liCGiCDl][-1] = liOOiCGl;
special_values_table[liCGiCDl][licGicGl] = lICOil;
special_values_table[lIcOil] = new Array();
special_values_table[lIcOil][licGicGl] = lIcOil;
special_values_table[lICDll] = new Array();
special_values_table[lICDll][licGicGl] = lICDll;
special_values_table[liCGil] = new Array();
special_values_table[liCGil][licGicGl] = liCGil;
special_values_table[liOOlOl] = new Array();
special_values_table[liOOlOl][licGicGl] = liOOlOl;
special_values_table[liCOlCl] = new Array();
special_values_table[liCOlCl][licGicGl] = liCOlCl;
special_values_table[llODlcl] = new Array();
special_values_table[llODlcl][-1] = liOGlOGl;
special_values_table[llODlcl][licGicGl] = liCOlCl;
special_values_table[llCOIl] = new Array();
special_values_table[llCOIl][licGicGl] = llCOIl;
special_values_table[lIcGll] = new Array();
special_values_table[lIcGll][licGicGl] = lIcGll;
special_values_table[llcGil] = new Array();
special_values_table[llcGil][licGicGl] = llcGil;
special_values_table[liCOll] = new Array();
special_values_table[liCOll][licGicGl] = liCOll;
special_values_table[lICGicl] = new Array();
special_values_table[lICGicl][licGicGl] = lICGicl;
special_values_table[liCGiCGl] = new Array();
special_values_table[liCGiCGl][licGicGl] = lIOOl;
special_values_table[liCGiCGl][liCDlcOl] = liCGl;
special_values_table[lIcOlCl] = new Array();
special_values_table[lIcOlCl][0] = llcOIcOl;
special_values_table[lIcOlCl][1] = liOGiOOl;
special_values_table[lIcOlCl][2] = llcGiOOl;
special_values_table[lIcOlCl][3] = lIOOlODl;
special_values_table[lIcOlCl][4] = licOlcDl;
special_values_table[liODlOl] = new Array();
special_values_table[liODlOl][licGICl] = lIcOlcOl;
special_values_table[liODlOl][licOlcGl] = llCOiCGl;
special_values_table[lIcOICl] = new Array();
special_values_table[lIcOICl][0] = lIOOIcDl;
special_values_table[lIcOICl][licGIOOl] = lIODIcOl;
special_values_table[lIcOICl][lICDIODl] = llODiOGl;
special_values_table[llODIcl] = new Array();
ServerRequest(llOGIOOl + llODIcl + lIODiCOl + llcOicDl, lIcOiOOl);
var img_decors =
    new Array();
for (i in special_values_table[llODIcl]) {
    img_decors[i] =
        new Image();
    img_decors[i].src =
        lICGIOGl + i + lICOIOGl;
}
special_values_table[liCOlcl] = new Array();
special_values_table[liCOlcl][liODICOl] = licOiCGl;
special_values_table[liCOlcl][llCDlcOl] = llOOicDl;
special_values_table[liCOlcl][lIOGlcGl] = lICOlOOl;
special_values_table[liCOlcl][licGIcDl] = lIcGIcDl;
special_values_table[liCOlcl][lICOiCDl] = liCDIODl;
special_values_table[liCOlcl][liODlCGl] = lIcOlODl;
special_values_table[liCOlcl][liOGicGl] = licOlCGl;
special_values_table[liCOlcl][lIOGlcOl] = lIcDiOGl;
special_values_table[liCOlcl][lICGIODl] = llcGIcOl;
special_values_table[liCOlcl][lIcOiCGl] = llOGicGl;
special_values_table[liCOlcl][lIOOlcDl] = llcDlCGl;
special_values_table[liCOlcl][llCDlcGl] = lIOGlCOl;
special_values_table[liCOlcl][lIcDlOGl] = licDIOGl;
special_values_table[liCOlcl][liOGlOOl] = llcDiCGl;
special_values_table[liCOlcl][lIOOiOOl] = liCDiOOl;
special_values_table[liCOlcl][lIcDlCOl] = lIcDicGl;
special_values_table[liCOlcl][lICGiOOl] = lIcGiODl;
special_values_table[liCOlcl][llCGiOGl] = llCGIOGl;
special_values_table[liCOlcl][lICDiCDl] = liODiOGl;
special_values_table[liCOlcl][lIcDicOl] = llcOICGl;
special_values_table[liCOlcl][licDIcDl] = llODiCOl;
special_values_table[liCOlcl][llcOlCOl] = llCOlcGl;
special_values_table[liCOlcl][licGICOl] = lICDlCDl;
special_values_table[liCOlcl][lICDiOGl] = liOOIODl;
special_values_table[liCOlcl][lICDiCOl] = liCDICOl;
special_values_table[liCOlcl][lICGlCOl] = lIOGICGl;
special_values_table[liCOlcl][lIODiCGl] = lIcOIOOl;
special_values_table[liCOlcl][licGlcGl] = liCOlCOl;
special_values_table[liCOlcl][llCDIcOl] = liOOIOGl;
special_values_table[liCOlcl][llcGICDl] = liCOlcOl;
special_values_table[liCOlcl][liODlCOl] = llODICOl;
special_values_table[liCOlcl][llODIcDl] = licDlcGl;
special_values_table[liCOlcl][llOGIcDl] = licGiOGl;
special_values_table[liCOlcl][llCOlODl] = llCDiCDl;
special_values_table[liCOlcl][lIcGIODl] = lIOGIcGl;
special_values_table[liCOlcl][licOiOOl] = liCDlCOl;
special_values_table[liCOlcl][licGicDl] = licOIcGl;
special_values_table[liCOlcl][lIcDiCOl] = llCOlcOl;
special_values_table[liCOlcl][liODlcDl] = liCGlOGl;
special_values_table[liCOlcl][liCDIcGl] = llOOlOOl;
special_values_table[liCOlcl][licOicDl] = llOOlcOl;
special_values_table[liCOlcl][llcOlOOl] = lICOlcDl;
special_values_table[liCOlcl][lIcGIcGl] = llOGiOOl;
special_values_table[liCOlcl][llCGlcDl] = lICDiODl;
special_values_table[liCOlcl][lICDIOOl] = lIOGlODl;
special_values_table[liCOlcl][llCOiCOl] = liCDIOGl;
special_values_table[liCOlcl][licDIcOl] = lIcDICGl;
special_values_table[liCOlcl][liCOlCDl] = llCOIcOl;
special_values_table[liCOlcl][llCOicOl] = lIcDIcDl;
special_values_table[liCOlcl][licDlcOl] = llCDicGl;
special_values_table[liCOlcl][licDICGl] = lIOGlCDl;
special_values_table[liCOlcl][liCGiODl] = licGIcOl;
special_values_table[liCOlcl][lIcGlCDl] = lICOicDl;
special_values_table[liCOlcl][lIOOicGl] = liCOiCDl;
special_values_table[liCOlcl][liOGiCGl] = liCGiCOl;
special_values_table[liCOlcl][licDiCDl] = liODicDl;
special_values_table[liCOlcl][llODlCOl] = lICOIcOl;
special_values_table[liCOlcl][llcOlcOl] = liCDlCDl;
special_values_table[liCOlcl][licDicGl] = liCDicDl;
special_values_table[liCOlcl][lICGicDl] = liODicGl;
special_values_table[liCOlcl][lIOGIODl] = llCDIOGl;
special_values_table[liCOlcl][llCOicDl] = liOOicDl;
special_values_table[liCOlcl][licDiCGl] = llCOiOGl;
special_values_table[liCOlcl][licOICDl] = lIcOICOl;
special_values_table[liCOlcl][llCOlCGl] = llcOiOOl;
special_values_table[liCOlcl][lIcOIODl] = llOGIODl;
special_values_table[liCOlcl][lIOOlcGl] = llcGIcDl;
special_values_table[liCOlcl][licGlCOl] = liOGlcGl;
special_values_table[liCOlcl][llcDIcGl] = lIOGiOOl;
special_values_table[liCOlcl][llOOlOGl] = liODiOOl;
special_values_table[liCOlcl][liCOICDl] = llODlOOl;
special_values_table[liCOlcl][licDicDl] = llODlCGl;
special_values_table[liCOlcl][lICOlcGl] = llCDIcDl;
special_values_table[liCOlcl][lICOICGl] = licGIOGl;
special_values_table[liCOlcl][licDiOGl] = lICOicOl;
special_values_table[liCOlcl][liOOIcGl] = liOGlCDl;
special_values_table[liCOlcl][liCGlcOl] = llcDiCOl;
special_values_table[liCOlcl][llODICDl] = llODiCGl;
special_values_table[liCOlcl][lIcDlCDl] = lIcOicOl;
special_values_table[liCOlcl][lICDICOl] = llODicGl;
special_values_table[liCOlcl][llOOICDl] = lIOGiOGl;
special_values_table[liCOlcl][liOGIcGl] = llcOIcGl;
special_values_table[liCOlcl][liCGlCGl] = liOGlcDl;
special_values_table[liCOlcl][liCDlOOl] = lIcDlOOl;
special_values_table[liCOlcl][llCDiCGl] = llcGicOl;
special_values_table[liCOlcl][liOGlCOl] = llCDIOOl;
special_values_table[liCOlcl][lIOOIODl] = licOlcOl;
special_values_table[liCOlcl][llCGlCOl] = licDiOOl;
special_values_table[liCOlcl][llcOlcDl] = liOOICGl;
special_values_table[liCOlcl][llOGlCGl] = llOOlODl;
special_values_table[liCOlcl][lICGlOOl] = llcOicOl;
special_values_table[liCOlcl][liODlcOl] = llcGlcOl;
special_values_table[liCOlcl][liCOIcGl] = lIcOIOGl;
special_values_table[liCOlcl][llCDICOl] = liCGicDl;
special_values_table[liCOlcl][lICGICOl] = licGlcOl;
special_values_table[liCOlcl][lIcGlOGl] = lIOOIcOl;
special_values_table[liCOlcl][lICOlCOl] = lICOlCDl;
special_values_table[liCOlcl][lIODIcDl] = llOGiCOl;
special_values_table[liCOlcl][lICGlCDl] = lIcOlcDl;
var img_guns =
    new Array();
for (i in special_values_table[liCOlcl]) {
    special_values_table[liCOlcl][i] =
        llCGiCOl + i + lICOIODl + special_values_table[liCOlcl][i] + lIOOlCGl;
    img_guns[i] =
        new Image();
    img_guns[i].src =
        lICGIOGl + i + llcDiODl;
}
special_values_table[lIODIOl] = new Array();
special_values_table[lIODIOl][liODICDl] = liOOicGl;
special_values_table[lIODIOl][llOGlOGl] = llOOicGl;
special_values_table[lIODIOl][liCDICGl] = liCDiCDl;
var img_barrels =
    new Array();
for (i in special_values_table[lIODIOl]) {
    special_values_table[lIODIOl][i] =
        llCGiCOl + i + liOGiCOl + special_values_table[lIODIOl][i] + llCDIODl + special_values_table[lIODIOl][i];
    img_barrels[i] =
        new Image();
    img_barrels[i].src =
        lICGIOGl + i + llODiOOl;
}
special_values_table[llCOiOl] = new Array();
special_values_table[llCOiOl][licGiOOl] = lICDlODl;
special_values_table[llCOiOl][licDicOl] = lIcOlCGl;
special_values_table[llCOiOl][llcGicGl] = lIOOICGl;
special_values_table[llCOiOl][llcDlcDl] = lIOGlOGl;
special_values_table[llCOiOl][lIOOIcGl] = liOGICGl;
special_values_table[llCOiOl][lIODIcGl] = liCDlcDl;
special_values_table[llCOiOl][licOiODl] = lIcDIOOl;
var img_vehicles =
    new Array();
for (i in special_values_table[llCOiOl]) {
    special_values_table[llCOiOl][i] =
        llCGiCOl + i + liOGiCDl + special_values_table[llCOiOl][i] + llCDIODl + special_values_table[llCOiOl][i];
    img_vehicles[i] =
        new Image();
    img_vehicles[i].src =
        lICGIOGl + i + lICOIcDl;
}
special_values_table[llOOicl] = new Array();
special_values_table[llOOicl][-1] = lIOGICOl;
special_values_table[llOOicl][0] = llcDIODl;
special_values_table[llOOicl][1] = llcDIOGl;
special_values_table[llOOicl][2] = llOOICGl;
special_values_table[llOOicl][3] = lICGIcGl;
special_values_table[llOOicl][4] = liOOlcGl;
special_values_table[llOOicl][5] = llcOlCGl;
special_values_table[llOOicl][6] = lIODiODl;
special_values_table[llOOicl][7] = licGlcDl;
special_values_table[llOOicl][8] = liCGlcDl;
special_values_table[llOOicl][9] = lIcGIOOl;
special_values_table[llOOicl][10] = liOOIcDl;
special_values_table[llOOicl][11] = llcDlCDl;
special_values_table[llOOicl][12] = llCOiCDl;
special_values_table[llOOicl][13] = liCOlOGl;
special_values_table[llOOicl][14] = licDIcGl;
special_values_table[llOOicl][15] = licDlCOl;
special_values_table[llOOicl][16] = llODiCDl;
special_values_table[llOOicl][17] = lIOOiCOl;
special_values_table[llOOicl][18] = liCDiCOl;
special_values_table[llOOicl][19] = liCDIOOl;
special_values_table[llOOicl][20] = liOGIcDl;
for (i in special_values_table[llOOicl]) {
    special_values_table[llOOicl][i] =
        llCGiCOl + i + lIcGlcDl + special_values_table[llOOicl][i] + llCDIODl + special_values_table[llOOicl][i];
}
special_values_table[lIODIOGl] = [];
special_values_table[lIODIOGl][0] =
    llCOiCGl;
special_values_table[lIODIOGl][1] =
    lIcOlcOl;
special_values_table[lIODIOGl][2] =
    liOGIODl;
special_values_table[llCOlcl] = new Array();
for (var i = -1; i <= 16; i++) {
    let img =
        new Image();
    img.src =
        liCDlODl + i + liCOICOl;
    img.loaded =
        false;
    img.onload =
        function() {
            img.loaded =
                true;
        };
    CACHED_BGS[i] =
        img;
}
ServerRequest(llOGIOOl + llCOlcl + lIODiCOl + llcOicDl, lIcOiOOl);
for (var i =
        1; i <= 18; i++) {
    let img =
        new Image();
    img.src =
        liCGlODl + i + liCOICOl;
    img.loaded =
        false;
    img.onload =
        function() {
            img.loaded =
                true;
        };
    CACHED_SKY[i] =
        img;
}
special_values_table[lIcGlCl] = new Array();
special_values_table[lIcGlCl][0] = lIOOIOGl;
special_values_table[lIcGlCl][1] = licDiODl;
special_values_table[lIcGlCl][2] = lIOGIcDl;
special_values_table[lIcGlCl][3] = llOOiODl;
special_values_table[llOOiCl] = new Array();
special_values_table[llOOiCl][-1] = llCGIOOl;
special_values_table[llOOiCl][1] = lIcOiOGl;
special_values_table[llOOiCl][licGIOOl] = licDlOGl;
special_values_table[llCGlCl] = new Array();
special_values_table[llCGlCl][0] = llCGIcGl;
special_values_table[llCGlCl][1] = liCGlOOl;
special_values_table[llCGlCl][2] = llCOlCDl;
special_values_table[llCGlCl][3] = liCDIcOl;
special_values_table[llCGlCl][4] = llCGICl;
special_values_table[llCGlCl][5] = llCDiODl;
special_values_table[llCGlCl][6] = lIcOicGl;
special_values_table[llCGlCl][7] = llCOICDl;
special_values_table[llCGlCl][8] = lIcGlOOl;
special_values_table[llCGlCl][9] = lIODlCOl;
special_values_table[llCGlCl][10] = llODIcOl;
special_values_table[llCGlCl][11] = llCGicDl;
special_values_table[llCGlCl][12] = llcGiCDl;
special_values_table[llCGlCl][13] = lIcGlODl;
special_values_table[llCGlCl][14] = llCOIOOl;
special_values_table[llCGlCl][15] = liCOIOGl;
special_values_table[lIOGiCl] = new Array();
special_values_table[lIOGiCl][-1] = llCDiCOl;
special_values_table[lIOGiCl][licGicGl] = lICDll;
var mark_pairs =
    new Array();
var rainbow = [lIcGiCDl, llODlcDl, llcGIOOl, lIcOIcDl, llcGIODl, lIcDiOOl, llCGIODl, llODlCDl, lICDIOGl, licDlcDl, llcOiOGl, llcGiCOl, liCOicOl, lIcOlCDl, llCGiODl, llcOlOGl, licGiCDl, licDlODl, liOGiODl, llcGICGl, lICDIcGl, lICOlOGl, lIOOIOOl, llCGiCGl, llOGiCDl, lIcGiCOl, lICDicGl];
var next_color =
    0;
var tr_type_tags =
    new Array();
special_values_table[lIOOlOGl] = new Array();
var last_trigger_type_id;

function
addTrigger(trigger_type_id, description, paramA, paramB) {
    last_trigger_type_id =
        trigger_type_id;
    var parts =
        description.split(lIOOicOl);
    if (parts.length > 1) {
        if (tr_type_tags[parts[0]] == undefined) {
            if (rainbow[next_color] == undefined) console.log(liCOiCOl + next_color);
            tr_type_tags[parts[0]] =
                rainbow[next_color];
            next_color++;
        }
        parts[0] =
            llCGicGl + tr_type_tags[parts[0]] + licOicGl + parts[0] + llcDIOOl;
        description =
            parts.join(llcOICDl);
    }
    special_values_table[lIOOlOGl][trigger_type_id] = description;
    mark_pairs[liOGicDl + trigger_type_id] = paramA;
    mark_pairs[licGIODl + trigger_type_id] = paramB;
}
var trigger_opcode_aliases = [];

function
AddOpcodeAlias(opcode) {
    trigger_opcode_aliases[last_trigger_type_id] =
        opcode;
}
addTrigger(-1, lIOOlCOl, lIcGlOl, lIcGlOl);
addTrigger(0, llODIcGl, liCOlCl, lICGicl);
AddOpcodeAlias(lIcGIcOl);
addTrigger(1, liCDlCGl, liCOlCl, liCGIOl);
AddOpcodeAlias(lICDlCGl);
addTrigger(2, lIcDlcDl, lICGicl, lICGicl);
AddOpcodeAlias(liOGIOGl);
addTrigger(3, llCOlOGl, lIcOil, lIOGICl);
AddOpcodeAlias(liODlOGl);
addTrigger(4, lIcDIODl, liCGiCGl, lIOGICl);
AddOpcodeAlias(llcDicGl);
addTrigger(5, lIODiCDl, lIOGICl, lIcGlOl);
AddOpcodeAlias(llOOlcGl);
addTrigger(6, lIODicGl, lIOGICl, lICGicl);
AddOpcodeAlias(lIOGiCDl);
addTrigger(9, llODlcOl, lIcGIOl, lIcGlOl);
AddOpcodeAlias(liOOlCOl);
addTrigger(10, liODIcOl, lIOGICl, lICGicl);
AddOpcodeAlias(licGlODl);
addTrigger(11, liOOiOOl, liCGiCGl, lICGicl);
AddOpcodeAlias(liCDlcGl);
addTrigger(12, licDlCDl, lICGicl, lIcGlOl);
AddOpcodeAlias(lIcDiCGl);
addTrigger(13, liCGiOGl, liCGiCGl, lIcOil);
AddOpcodeAlias(licDlCGl);
addTrigger(14, lIcGicGl, liCGiCGl, lICGicl);
AddOpcodeAlias(llCOiOOl);
addTrigger(15, lIcDIcGl, liCOll, lICGicl);
AddOpcodeAlias(lICDICDl);
addTrigger(16, lIOOiCDl, llCOIl, lICGicl);
AddOpcodeAlias(llcGICOl);
addTrigger(18, llcGlcGl, lICGicl, lICGicl);
AddOpcodeAlias(liCGIcDl);
addTrigger(19, llCOiODl, lICDll, lIcGlOl);
AddOpcodeAlias(lICGlCGl);
addTrigger(20, llOOiCGl, lICDll, lIcGlOl);
AddOpcodeAlias(llcDlODl);
addTrigger(21, llcGIcGl, lICDll, lIcGlOl);
AddOpcodeAlias(lIOOlCDl);
addTrigger(22, llOOiCOl, lICDll, llOOiCl);
AddOpcodeAlias(lIcGICOl);
addTrigger(23, llCGlcGl, liCGiCGl, llOGiCl);
AddOpcodeAlias(lIcDlcGl);
addTrigger(24, llOGIOGl, liCGIOl, lICGicl);
AddOpcodeAlias(llOGICOl);
addTrigger(25, llOGIcGl, liCGil, lIcGlOl);
AddOpcodeAlias(llOOlcDl);
addTrigger(26, liODICGl, liCGil, lIcGlOl);
AddOpcodeAlias(lIOOlOOl);
addTrigger(27, lIcOIcGl, liCGil, llOGiCl);
AddOpcodeAlias(licGICGl);
addTrigger(28, liODIOGl, liCGiCGl, lICGicl);
AddOpcodeAlias(lIODlcDl);
addTrigger(29, lICOICDl, liCGiCGl, lICGicl);
AddOpcodeAlias(liCGICOl);
addTrigger(30, llCOIODl, lICGicl, lICGicl);
AddOpcodeAlias(liODIcDl);
addTrigger(31, licGlOOl, lICGicl, lICGicl);
AddOpcodeAlias(lICOiCOl);
addTrigger(32, llODlcGl, liCGiCGl, lIcOlCl);
AddOpcodeAlias(llcOiCDl);
addTrigger(33, lIcGlcOl, liCGiCGl, liCDICl);
AddOpcodeAlias(lIODlCGl);
addTrigger(34, lIOOICDl, lIcGll, llODIcl);
AddOpcodeAlias(llCGicOl);
addTrigger(35, lIcOlcGl, liOOlOl, lIOGICl);
AddOpcodeAlias(llcDICDl);
addTrigger(36, liODiCOl, liOOlOl, lIOGICl);
AddOpcodeAlias(llCOlCOl);
addTrigger(37, lIODlCDl, liOOlOl, liCGIOl);
AddOpcodeAlias(liCOlOOl);
addTrigger(38, liCOlCGl, liOOlOl, lIcOICl);
AddOpcodeAlias(llCDlOOl);
addTrigger(39, llcDicDl, liCGIOl, lIcGlOl);
AddOpcodeAlias(lICGlOGl);
addTrigger(40, liOOlOGl, llcOicGl, lIcGlOl);
AddOpcodeAlias(liCOiOGl);
special_values_table[llcOicGl] = new Array();
special_values_table[llcOicGl][1] = lICDlcGl;
special_values_table[llcOicGl][0] = lIcGiCGl;
addTrigger(41, lICDiOOl, lIcGiOGl, lIcGlOl);
AddOpcodeAlias(liCOicDl);
special_values_table[lIcGiOGl] = new Array();
special_values_table[lIcGiOGl][lICOICOl] = llcGlcDl;
special_values_table[lIcGiOGl][llOGicDl] = lICGicOl;
special_values_table[lIcGiOGl][liCDICDl] = liCOIODl;
special_values_table[lIcGiOGl][lIODIOOl] = liCGIcOl;
special_values_table[lIcGiOGl][liOGiOGl] = llcGlCOl;
special_values_table[lIcGiOGl][liOOicOl] = lIOOlcOl;
special_values_table[lIcGiOGl][llCDlCGl] = liOOiODl;
special_values_table[lIcGiOGl][llcDlcOl] = liOOIOGl;
special_values_table[lIcGiOGl][lICOiCGl] = liCDiOOl;
special_values_table[lIcGiOGl][lIODlODl] = llcDlCGl;
special_values_table[lIcGiOGl][licDlOOl] = llcDiCGl;
special_values_table[lIcGiOGl][lIOGlCGl] = licOiCGl;
special_values_table[lIcGiOGl][licGicOl] = lICDlCOl;
special_values_table[lIcGiOGl][liCDicOl] = lICDlCDl;
special_values_table[lIcGiOGl][llcDicOl] = liOOIODl;
special_values_table[lIcGiOGl][llcOIOOl] = llOGicGl;
special_values_table[lIcGiOGl][llODICGl] = liCDIODl;
special_values_table[lIcGiOGl][llOGlOOl] = lICOlOOl;
special_values_table[lIcGiOGl][lICGlcGl] = lIOGICGl;
special_values_table[lIcGiOGl][llOOICOl] = lIcOIOOl;
special_values_table[lIcGiOGl][llOOlCOl] = llcDiOGl;
special_values_table[lIcGiOGl][liOOlOOl] = liOOIOOl;
special_values_table[lIcGiOGl][lICDIcOl] = llCGIOGl;
special_values_table[lIcGiOGl][lIcOIcOl] = liODiOGl;
special_values_table[lIcGiOGl][licGiCGl] = lIcGiODl;
special_values_table[lIcGiOGl][llCGiOOl] = licDIOGl;
special_values_table[lIcGiOGl][licOlCOl] = liCOICGl;
special_values_table[lIcGiOGl][liOOICOl] = lIODIODl;
special_values_table[lIcGiOGl][liOGIOOl] = licGiCOl;
special_values_table[lIcGiOGl][llCOICOl] = licDICOl;
special_values_table[lIcGiOGl][lICDicOl] = llcGlOOl;
special_values_table[lIcGiOGl][lIcGIOGl] = liOOlODl;
special_values_table[lIcGiOGl][llOGlcOl] = llcDlOOl;
special_values_table[lIcGiOGl][lIOOiOGl] = lIcDicGl;
special_values_table[lIcGiOGl][llOGiODl] = lICGIOOl;
special_values_table[lIcGiOGl][llODIOGl] = lIcGlCGl;
special_values_table[lIcGiOGl][liOOiOGl] = lIOGIcOl;
special_values_table[lIcGiOGl][llCDlOGl] = lIcDiCDl;
special_values_table[lIcGiOGl][llODlODl] = lICGiCOl;
special_values_table[lIcGiOGl][licGiODl] = lIOOiODl;
special_values_table[lIcGiOGl][llcDlcGl] = lIOGIOGl;
special_values_table[lIcGiOGl][lICDlOOl] = llOOIcOl;
special_values_table[lIcGiOGl][liCGICDl] = liCOIOOl;
special_values_table[lIcGiOGl][llcDIcDl] = llCGlOOl;
special_values_table[lIcGiOGl][llcGlCGl] = llcGicDl;
special_values_table[lIcGiOGl][lIOOiCGl] = llCOIOGl;
special_values_table[lIcGiOGl][liOOiCDl] = llOGiCGl;
special_values_table[lIcGiOGl][liCDiCGl] = llCGlOGl;
special_values_table[lIcGiOGl][liOGicOl] = liCGlcGl;
special_values_table[lIcGiOGl][lICDiCGl] = liOGlCGl;
special_values_table[lIcGiOGl][licOICOl] = lICDIcDl;
special_values_table[lIcGiOGl][llOOIODl] = licOiCDl;
special_values_table[lIcGiOGl][lIOOICOl] = liCGIODl;
special_values_table[lIcGiOGl][llcDIcOl] = liCOiOOl;
special_values_table[lIcGiOGl][licOIOGl] = llODIODl;
special_values_table[lIcGiOGl][llCDiOGl] = lIODlcGl;
special_values_table[lIcGiOGl][llcDiCDl] = llODlOGl;
special_values_table[lIcGiOGl][llcDlOGl] = liOOlcDl;
special_values_table[lIcGiOGl][lIcDIcOl] = llOOiOOl;
special_values_table[lIcGiOGl][lIcDlODl] = liODlODl;
special_values_table[lIcGiOGl][lIcDIOGl] = liOGIcOl;
special_values_table[lIcGiOGl][lIODICDl] = licDICDl;
special_values_table[lIcGiOGl][lIOOicDl] = lICGiCGl;
special_values_table[lIcGiOGl][llODIOOl] = llCOIcDl;
special_values_table[lIcGiOGl][lICOIOOl] = lIcGiOOl;
special_values_table[lIcGiOGl][lIcGICDl] = llCDicOl;
special_values_table[lIcGiOGl][lIOGICDl] = lICGiCDl;
special_values_table[lIcGiOGl][llcDICGl] = lIcDiOGl;
special_values_table[lIcGiOGl][lIcOlOOl] = licOiOGl;
special_values_table[lIcGiOGl][llcGiCGl] = lICGlODl;
special_values_table[lIcGiOGl][liCOIcDl] = licDIODl;
special_values_table[lIcGiOGl][llcOlcGl] = llOGICGl;
special_values_table[lIcGiOGl][llODiODl] = liCDicGl;
special_values_table[lIcGiOGl][lIODlOOl] = llOGlCDl;
special_values_table[lIcGiOGl][llOOIcGl] = llCDlODl;
special_values_table[lIcGiOGl][lICGIcDl] = liOOlCDl;
special_values_table[lIcGiOGl][lICOiODl] = llcGIcOl;
special_values_table[lIcGiOGl][lICGlcDl] = licOIODl;
special_values_table[lIcGiOGl][llOGlODl] = llOOIcDl;
special_values_table[lIcGiOGl][licDiCOl] = liCOIODIl;
special_values_table[lIcGiOGl][liOOIODIl] = liCDicGll;
special_values_table[lIcGiOGl][llOOlcGll] = lIOOICDil;
special_values_table[lIcGiOGl][liOGICDil] = llOGIcDll;
special_values_table[lIcGiOGl][llODIODll] = llCOiCOll;
special_values_table[lIcGiOGl][llcOicGIl] = licDIOGll;
special_values_table[lIcGiOGl][llcGiCGil] = lIcOlOGil;
special_values_table[lIcGiOGl][liCDIOGll] = liOOiOGll;
special_values_table[lIcGiOGl][llCGlCDIl] = liOOiCDil;
special_values_table[lIcGiOGl][llCOICOil] = liCDlOOIl;
special_values_table[lIcGiOGl][lIcGIODIl] = llOGiCGll;
special_values_table[lIcGiOGl][liCOICGIl] = lIcGICDil;
special_values_table[lIcGiOGl][lIcDicGil] = llcOiOGIl;
special_values_table[lIcGiOGl][llcGlCDIl] = llCDiCOll;
special_values_table[lIcGiOGl][liCGIcOIl] = liOGIODil;
special_values_table[lIcGiOGl][lIODICGll] = liCOiOOll;
special_values_table[lIcGiOGl][lIcGlOOll] = licDlcDil;
special_values_table[lIcGiOGl][llCDiCDIl] = lIODiOOil;
special_values_table[lIcGiOGl][lICOlCDll] = licOlCGl;
special_values_table[lIcGiOGl][llCOiOOll] = licGICOil;
special_values_table[lIcGiOGl][lIOGlcOil] = lICDlOOll;
special_values_table[lIcGiOGl][liCGIODIl] = llOOlcGIl;
special_values_table[lIcGiOGl][licOiCOIl] = llCGlcDil;
special_values_table[lIcGiOGl][llcDIOOIl] = llCDlODIl;
special_values_table[lIcGiOGl][liODIcGIl] = liCOiCDll;
special_values_table[lIcGiOGl][liCOlOGll] = llCOicOll;
special_values_table[lIcGiOGl][liCOicOIl] = liCDiOGIl;
special_values_table[lIcGiOGl][llODlODIl] = lIcGicOIl;
special_values_table[lIcGiOGl][lIOGlCGIl] = lIOGlODll;
special_values_table[lIcGiOGl][lIcGICOil] = lIOGlcOIl;
special_values_table[lIcGiOGl][lIcOiCGIl] = llOGIODil;
special_values_table[lIcGiOGl][lIODIOOll] = lIODiCOll;
special_values_table[lIcGiOGl][llCDiOGIl] = llODlOGil;
special_values_table[lIcGiOGl][liOGlCDIl] = liODicDIl;
special_values_table[lIcGiOGl][llODiCDll] = lICOiCGil;
special_values_table[lIcGiOGl][lIcOIODil] = llCDlOOil;
special_values_table[lIcGiOGl][llcOiCGIl] = lIOOlcDll;
special_values_table[lIcGiOGl][lIOGIOGIl] = llOGICOil;
special_values_table[lIcGiOGl][lIcDiODIl] = llCOiOOIl;
special_values_table[lIcGiOGl][lICDIcGil] = lIODlOOIl;
special_values_table[lIcGiOGl][llODIcGil] = llcDlCDil;
special_values_table[lIcGiOGl][llCDicGil] = liOGIODIl;
special_values_table[lIcGiOGl][lIcDICGIl] = liCDlcGll;
special_values_table[lIcGiOGl][lICOlCGIl] = llcOicOil;
special_values_table[lIcGiOGl][llOOiCDll] = lIcOIOGil;
special_values_table[lIcGiOGl][liCDIODil] = llCGIOOIl;
special_values_table[lIcGiOGl][llOOlCOil] = lIcGIcOIl;
special_values_table[lIcGiOGl][lIcDIcOIl] = llcOIcDll;
special_values_table[lIcGiOGl][llCGICOIl] = lICDiODIl;
special_values_table[lIcGiOGl][lICGlcDIl] = licDicOIl;
special_values_table[lIcGiOGl][liCOlCGll] = licOicDil;
special_values_table[lIcGiOGl][lIcOICOil] = llcOiCGil;
special_values_table[lIcGiOGl][licGiCOll] = llcGlOOIl;
special_values_table[lIcGiOGl][llODIcDil] = lIcGIOOll;
special_values_table[lIcGiOGl][liCDIcOil] = liODlcDll;
special_values_table[lIcGiOGl][licDlCDll] = lIODiODil;
special_values_table[lIcGiOGl][licOlOOil] = llOOicDIl;
special_values_table[lIcGiOGl][lIOOlOGIl] = licDicGIl;
special_values_table[lIcGiOGl][llCOlOGll] = lICDlCGil;
special_values_table[lIcGiOGl][liOGICOil] = llCDICOll;
special_values_table[lIcGiOGl][lICOicGIl] = llCOlCDil;
special_values_table[lIcGiOGl][llcOiCOil] = llOOIODll;
special_values_table[lIcGiOGl][licOiOOIl] = llcOicDil;
special_values_table[lIcGiOGl][lICDICGIl] = licDIOOIl;
special_values_table[lIcGiOGl][licDiODll] = llOOlCDll;
special_values_table[lIcGiOGl][lICGicDll] = lIOGIcGll;
special_values_table[lIcGiOGl][lICOIOGil] = liOOICDIl;
special_values_table[lIcGiOGl][liCOiOGIl] = llOOICOIl;
special_values_table[lIcGiOGl][llcGlODil] = llcDIODil;
special_values_table[lIcGiOGl][liOOicDll] = lICOicOil;
special_values_table[lIcGiOGl][llcDlcGIl] = liCDiOOil;
special_values_table[lIcGiOGl][llCOlCOil] = lIODIcOll;
special_values_table[lIcGiOGl][llOGIOGil] = lICDlOGIl;
special_values_table[lIcGiOGl][lICOIcOIl] = liCDlOGil;
special_values_table[lIcGiOGl][llOOicGil] = llODICGIl;
special_values_table[lIcGiOGl][liCOiODll] = lICGiCOil;
special_values_table[lIcGiOGl][licGicDIl] = llCOlOGil;
special_values_table[lIcGiOGl][llODIcGIl] = lIODlcDll;
special_values_table[lIcGiOGl][licDIODll] = liODIOGIl;
special_values_table[lIcGiOGl][llCOIOGil] = licGIODil;
special_values_table[lIcGiOGl][lIcGIOOIl] = lIODICDil;
special_values_table[lIcGiOGl][llOGiODll] = llcGlcOIl;
special_values_table[lIcGiOGl][lIcGlODil] = liCOIOOIl;
special_values_table[lIcGiOGl][licDlcDll] = llOGlCGIl;
special_values_table[lIcGiOGl][liOOIcDIl] = llODlCDll;
special_values_table[lIcGiOGl][liCOlOOll] = licOiOOll;
special_values_table[lIcGiOGl][lICOICDll] = lICOICOIl;
special_values_table[lIcGiOGl][llCOIl] = llcDlcDll;
special_values_table[lIcGiOGl][llCGIODll] = llCOICDll;
special_values_table[lIcGiOGl][lIcDlOOll] = liCDIcGll;
special_values_table[lIcGiOGl][llcDIcOil] = llODiOOil;
special_values_table[lIcGiOGl][liOGlCOil] = llOOicDil;
special_values_table[lIcGiOGl][liOOiCGIl] = liCDiCOll;
special_values_table[lIcGiOGl][liCGICGIl] = licOlCGil;
special_values_table[lIcGiOGl][lICGlCDil] = lICGiODIl;
special_values_table[lIcGiOGl][liCDICDil] = llcGICOIl;
special_values_table[lIcGiOGl][liCDIcOll] = lIOGicDil;
special_values_table[lIcGiOGl][llCGiCDIl] = lIOOiOOIl;
special_values_table[lIcGiOGl][llOOIcGll] = liODiCDil;
special_values_table[lIcGiOGl][lIOGlCDIl] = liCGlOOll;
special_values_table[lIcGiOGl][lIODICOIl] = liOOlCDil;
special_values_table[lIcGiOGl][llCDlcOll] = llCGlODIl;
special_values_table[lIcGiOGl][lIcDIcDil] = lICDlcGll;
special_values_table[lIcGiOGl][llODiCGll] = llCDicGIl;
special_values_table[lIcGiOGl][llOOiOOil] = lIOGICGll;
special_values_table[lIcGiOGl][licOIcOll] = lIOGIOGll;
special_values_table[lIcGiOGl][llOGicGll] = lICOICDIl;
special_values_table[lIcGiOGl][lIOGiODIl] = liCGicOil;
special_values_table[lIcGiOGl][lIOOICOil] = lICDicGIl;
special_values_table[lIcGiOGl][llOOIOGil] = llCGicDIl;
special_values_table[lIcGiOGl][llcGicDil] = lIcGICDIl;
special_values_table[lIcGiOGl][llcDIOGll] = lICGlcGil;
special_values_table[lIcGiOGl][lICDIOGll] = llcDlCOil;
special_values_table[lIcGiOGl][llCDIcOil] = lIOOICDll;
special_values_table[lIcGiOGl][llcDiODil] = lIcGiODil;
special_values_table[lIcGiOGl][liCOlCDIl] = lICGlCDIl;
special_values_table[lIcGiOGl][lIcOicGil] = lIcGiCGil;
special_values_table[lIcGiOGl][liCDiOOIl] = liODiCOil;
special_values_table[lIcGiOGl][lIcOiCGil] = licOlCGll;
special_values_table[lIcGiOGl][liCGICDil] = llcOICGl;
special_values_table[lIcGiOGl][lIOGiODil] = lIODICOil;
special_values_table[lIcGiOGl][lICOiCGll] = liCGlOGil;
special_values_table[lIcGiOGl][lIcOlCOll] = lIcDIcDll;
special_values_table[lIcGiOGl][lICGIcOil] = llOGICGIl;
special_values_table[lIcGiOGl][licDlcDIl] = licOICGIl;
special_values_table[lIcGiOGl][lIcGlcGll] = liOGicGil;
special_values_table[lIcGiOGl][liODiCDIl] = lIcDiOOIl;
special_values_table[lIcGiOGl][llcOiOOll] = llcDlcOIl;
special_values_table[lIcGiOGl][liOGlOOIl] = licDicGil;
special_values_table[lIcGiOGl][liCGiOOil] = liCDIOGIl;
special_values_table[lIcGiOGl][licDiCGIl] = lIcOlCOil;
special_values_table[lIcGiOGl][lIODIcGll] = liCDICDll;
special_values_table[lIcGiOGl][llCOlcDil] = liCOiCGll;
special_values_table[lIcGiOGl][lICGlCGil] = lIcGiCGIl;
special_values_table[lIcGiOGl][liOGIcGil] = lIcDlcGIl;
special_values_table[lIcGiOGl][licDICDll] = lIOOlcDIl;
special_values_table[lIcGiOGl][llCGlcDll] = llCDiOGil;
special_values_table[lIcGiOGl][liOGiCOil] = lIcGicOll;
special_values_table[lIcGiOGl][lIOOIcGll] = liOGICOIl;
special_values_table[lIcGiOGl][llCGlCOIl] = lIcDlOGIl;
special_values_table[lIcGiOGl][lIOOicOll] = licOlcDil;
special_values_table[lIcGiOGl][licGicOll] = llcDiODll;
special_values_table[lIcGiOGl][liCGICDIl] = lIcOlOOll;
special_values_table[lIcGiOGl][liCDicOil] = lIODICGIl;
special_values_table[lIcGiOGl][liCOIcOll] = lIcDlODIl;
special_values_table[lIcGiOGl][llODIcOIl] = lIcOlcGll;
special_values_table[lIcGiOGl][llCDlCGIl] = lICDIcDIl;
special_values_table[lIcGiOGl][llcOIcOll] = lICDICDll;
special_values_table[lIcGiOGl][lICDIcGll] = llCGIcOil;
special_values_table[lIcGiOGl][lICOlcOll] = liOGlcDIl;
special_values_table[lIcGiOGl][llcGlcOil] = llCGICGIl;
special_values_table[lIcGiOGl][liODiOGil] = llcOIcDil;
special_values_table[lIcGiOGl][llODiOOll] = liCDiOOll;
special_values_table[lIcGiOGl][llcGiCDil] = liODlcDIl;
special_values_table[lIcGiOGl][llcDIOOil] = llOOicGll;
special_values_table[lIcGiOGl][lIcDiCOil] = lICOicOll;
special_values_table[lIcGiOGl][llcGIcGIl] = liODlOOll;
special_values_table[lIcGiOGl][lICDiCDll] = lIOGIcGil;
special_values_table[lIcGiOGl][liCOiOOIl] = lICGicGll;
special_values_table[lIcGiOGl][llOOlcDIl] = llCGlOOil;
special_values_table[lIcGiOGl][lIcOiCDil] = lICOlOOll;
special_values_table[lIcGiOGl][liOOiCDll] = liCOlCDll;
special_values_table[lIcGiOGl][lIcGiCOll] = liODiCOll;
special_values_table[lIcGiOGl][liOGiOGil] = llCOiOGll;
special_values_table[lIcGiOGl][lIOGICOIl] = llCOiCGil;
special_values_table[lIcGiOGl][llOOiCDIl] = llcDlCDIl;
special_values_table[lIcGiOGl][llOGIcGil] = llCGlCGIl;
special_values_table[lIcGiOGl][lICGIcOll] = licOlcGil;
special_values_table[lIcGiOGl][lICOlCGll] = llCDiOGll;
special_values_table[lIcGiOGl][lICGiOOll] = llCOlcOll;
special_values_table[lIcGiOGl][llOGlODil] = llOOiCGIl;
special_values_table[lIcGiOGl][liCDiCGll] = lIOOIcDll;
special_values_table[lIcGiOGl][lIOOIOGil] = liCOlODIl;
special_values_table[lIcGiOGl][licGicGIl] = llODIOOil;
special_values_table[lIcGiOGl][licGlCOil] = licDIcDll;
special_values_table[lIcGiOGl][licOIcDIl] = lIODicGil;
special_values_table[lIcGiOGl][llCGlOGIl] = llCOiCGIl;
special_values_table[lIcGiOGl][lIcOlCGil] = licDlODIl;
special_values_table[lIcGiOGl][lIOGiOOll] = lICGIOOll;
special_values_table[lIcGiOGl][llOGlOOil] = liCDICDIl;
special_values_table[lIcGiOGl][liCGIcDil] = liOGICOll;
special_values_table[lIcGiOGl][lIODiCGll] = llOOiODIl;
special_values_table[lIcGiOGl][llOGlCDll] = llcOIcGIl;
special_values_table[lIcGiOGl][liOOIOGil] = llcOlCGil;
special_values_table[lIcGiOGl][llODlODll] = lIOGicGil;
special_values_table[lIcGiOGl][liOOiODil] = licOiODll;
special_values_table[lIcGiOGl][llcDICDil] = lIcGIcOll;
special_values_table[lIcGiOGl][liCGICGil] = liOOIcGIl;
special_values_table[lIcGiOGl][lICGiODll] = llODlCGIl;
special_values_table[lIcGiOGl][liOOIODll] = lICGICGil;
special_values_table[lIcGiOGl][licGIOOil] = llcDIcGIl;
special_values_table[lIcGiOGl][licDlOGll] = liODIOOll;
special_values_table[lIcGiOGl][lIcGlcGIl] = lICOicDil;
special_values_table[lIcGiOGl][licDIcGil] = licGlcDIl;
special_values_table[lIcGiOGl][licGicOil] = llcGlODll;
special_values_table[lIcGiOGl][llOGiOGll] = lICOlCDil;
special_values_table[lIcGiOGl][lIcGICDll] = lIcDicOil;
special_values_table[lIcGiOGl][licOIOGll] = llCDlCGil;
special_values_table[lIcGiOGl][liCDiCDil] = lICGlOGll;
special_values_table[lIcGiOGl][liODlOGil] = licGlODIl;
special_values_table[lIcGiOGl][lIOOlOGil] = lIcOlOGll;
addTrigger(42, llcDiOGil, lIcGIOl, lIODIcGil);
AddOpcodeAlias(lICGICDIl);
special_values_table[lIODIcGil] = new Array();
special_values_table[lIODIcGil][0] = lICOicGll;
special_values_table[lIODIcGil][1] = licOiODil;
special_values_table[lIODIcGil][2] = llCGlODl;
special_values_table[lIODIcGil][3] = llOGlcGl;
special_values_table[lIODIcGil][4] = llOOlOGIl;
special_values_table[lIODIcGil][lIcGIcDIl] = licDIcDil;
addTrigger(43, liCGiODll, lIcGIOl, lIcGlOl);
AddOpcodeAlias(llcGiOGil);
addTrigger(44, lIOOIOOil, liCGil, lIcGlOl);
AddOpcodeAlias(liCDicDIl);
addTrigger(45, licDicDil, llcOicGl, lIcGlOl);
AddOpcodeAlias(llcOICOIl);
addTrigger(46, llcGIODIl, liCGil, llOOiCl);
AddOpcodeAlias(licDICOll);
addTrigger(48, llCGlcOil, liCGiCGl, lIOGICl);
AddOpcodeAlias(lIcDlCDll);
addTrigger(49, lIODIcOIl, llcOicGl, lIcGlOl);
AddOpcodeAlias(liCDiODIl);
addTrigger(50, llcOiCDll, lIcGIOl, lIcGlOl);
AddOpcodeAlias(lIcDiCOIl);
addTrigger(51, lIOGIcOll, lICOiOl, lIcGlOl);
AddOpcodeAlias(liODIcGll);
addTrigger(52, lICDiOGll, liCGiCGl, lIcGIOl);
AddOpcodeAlias(llcDlCGll);
addTrigger(53, llODICGil, liCGiCGl, lICGicl);
AddOpcodeAlias(llcGlCGll);
addTrigger(54, licOIODil, llcGil, lIcGlOl);
AddOpcodeAlias(lIcDICGil);
addTrigger(55, lIOGlCOil, llcGil, lIcGlOl);
AddOpcodeAlias(liOGlOOil);
addTrigger(56, lIOOICOll, lIcGlOl, lICGicl);
AddOpcodeAlias(licDIODil);
addTrigger(57, liCDIOOil, lIcGlOl, lICGicl);
AddOpcodeAlias(llCDiOOll);
addTrigger(58, liOOlcOll, liCGiCGl, lIOGlCl);
AddOpcodeAlias(lIcDiOOll);
addTrigger(59, llCGIcDIl, liCGiCGl, lIOGICl);
AddOpcodeAlias(licGiOOil);
addTrigger(60, lIOOlcDil, liCGiCGl, lIcGlOl);
AddOpcodeAlias(llOGlODIl);
addTrigger(61, liCGICOll, liCGiCGl, lIOGICl);
AddOpcodeAlias(lIcDicGIl);
addTrigger(62, lIcGlcOll, liCOll, lIOGICl);
AddOpcodeAlias(llCOIODll);
addTrigger(63, llODlcOIl, liCOll, lIOGICl);
AddOpcodeAlias(lICGIOOIl);
addTrigger(64, liCGicDIl, liCOll, lIOGICl);
AddOpcodeAlias(lIcGlODIl);
addTrigger(65, llCOIcDll, liCOll, lIcGlOl);
AddOpcodeAlias(lIOGlCGil);
addTrigger(66, liODicOll, liCOll, lIcGlOl);
AddOpcodeAlias(llCOlCDll);
addTrigger(67, lIcDicOIl, liCOll, lIcGlOl);
AddOpcodeAlias(lIOOIODIl);
addTrigger(68, llCGiOGIl, liCOll, lIcGlOl);
AddOpcodeAlias(lIcDlCGll);
addTrigger(69, lIOGICDIl, liCOll, lIcGlOl);
AddOpcodeAlias(liCGlCOIl);
addTrigger(70, llOOlCDil, lICGicl, lICGicl);
AddOpcodeAlias(lIcGICGil);
addTrigger(71, llCOICGIl, liCOlCl, lIcGIOl);
AddOpcodeAlias(lIcOICGll);
addTrigger(72, lICDiCGil, lICGicl, lIOGICl);
AddOpcodeAlias(lICGIOGIl);
addTrigger(73, licOlcDIl, lIOGICl, lIcGlOl);
AddOpcodeAlias(llcDicOIl);
addTrigger(74, lIODIcDll, lIOGICl, lIcGlOl);
AddOpcodeAlias(lICGIcGil);
addTrigger(75, licOIOOil, lIOGICl, lIcGlOl);
AddOpcodeAlias(liCDicDll);
addTrigger(76, llOOlODll, liCOll, lIcGlOl);
AddOpcodeAlias(llOOIcOil);
addTrigger(77, llcDIcDIl, liCOll, lIcGlOl);
AddOpcodeAlias(licOlcDll);
addTrigger(78, llCDIcDll, liCOll, llOGiCl);
AddOpcodeAlias(lIOGiCGll);
addTrigger(79, llcOIcGil, lICGicl, lIcGlOl);
AddOpcodeAlias(licGlcOIl);
addTrigger(80, liOGlcOil, lICGicl, liCGiCGl);
AddOpcodeAlias(liOOicDil);
addTrigger(81, lIOOicGIl, liCOll, lICDll);
AddOpcodeAlias(lIOGlcDIl);
addTrigger(82, llODicGil, liCOlCl, lICDll);
AddOpcodeAlias(lIODlODil);
addTrigger(83, licDIOGIl, lICGicl, lIOGICl);
AddOpcodeAlias(llcOICGIl);
addTrigger(84, llcGlcDil, lICGicl, lIOGICl);
AddOpcodeAlias(lICOICDil);
addTrigger(85, liCGlcDIl, liCOlCl, lIcGlOl);
AddOpcodeAlias(llCGiCDll);
addTrigger(86, liCGIcDIl, liCOlCl, lIcGlOl);
AddOpcodeAlias(llCDlcGil);
addTrigger(87, licOIODll, lICGicl, lIcGlOl);
AddOpcodeAlias(lICDIODIl);
addTrigger(88, liCOICDIl, liCGiCGl, lIOGICl);
AddOpcodeAlias(lICGicDIl);
addTrigger(89, liCOiCOll, liCGiCGl, llOGiCl);
AddOpcodeAlias(llCOlcOil);
addTrigger(90, liOOlOGIl, liCGiCGl, lIcGIOl);
AddOpcodeAlias(llOOlcDil);
addTrigger(91, liCDiODil, liCGiCGl, llOGiCl);
addTrigger(92, llCDIcGIl, liCGiCGl, llOGiCl);
addTrigger(93, liCGIcDll, liCGiCGl, llOGiCl);
addTrigger(94, licOIOOll, liCGiCGl, lICGicl);
addTrigger(95, lICGicOil, lICGicl, lICGicl);
addTrigger(96, licGiOOIl, lICGicl, lICGicl);
addTrigger(97, lICDIOGil, liCGiCGl, liCGiCGl);
addTrigger(98, lICOICGil, lICGicl, liCOlCl);
addTrigger(99, licDiCGll, lICDll, lIcGlOl);
AddOpcodeAlias(llCGIcOIl);
addTrigger(100, llcGIOOIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lICDiCGll);
addTrigger(101, lIOOICGIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(llCGICDIl);
addTrigger(102, lIcOlcDil, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liODiODil);
addTrigger(103, liCGiCOIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(llCOiODIl);
addTrigger(104, llcGIcDIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liOGIOGIl);
addTrigger(105, licDlCOll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(llOOlcOil);
addTrigger(106, liODlcOIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(llOOIcGil);
addTrigger(107, liODIOOil, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lIcDlcGll);
addTrigger(108, llCOlCOll, lIcGIOl, lIcGlOl);
AddOpcodeAlias(lICGIcGll);
addTrigger(109, llODlCDil, lIcGIOl, lIcGlOl);
AddOpcodeAlias(lIOGicGIl);
addTrigger(110, liCDlCDil, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lICDlCOIl);
addTrigger(111, lIOOlCOll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liCDiCOIl);
addTrigger(112, llCOICOIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(licDlcGil);
addTrigger(113, lIOOicDIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liOOICOil);
addTrigger(114, liOOicGil, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lICOiCOil);
addTrigger(115, lIOOicDll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liCGlCDIl);
addTrigger(116, lICDiOOil, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lIcDiCDil);
addTrigger(117, liCDlCDIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(licOicOll);
addTrigger(118, llCDlCGll, lIcGIOl, lICGicl);
AddOpcodeAlias(llOGicOll);
addTrigger(119, lIOOiOGIl, lIcGIOl, lICGicl);
AddOpcodeAlias(liODlOOil);
addTrigger(120, liODiOOll, lICGicl, lIcGIOl);
AddOpcodeAlias(lIOOlOOIl);
addTrigger(121, llcGIcGll, lICGicl, lIcGIOl);
AddOpcodeAlias(liCGlCGll);
addTrigger(122, lICDlcOil, lIcGIOl, liCGiCGl);
AddOpcodeAlias(liCDlCGil);
addTrigger(123, liCGlOGIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lIODicGll);
addTrigger(124, liCGiOOIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(licOIcGil);
addTrigger(125, llCGIcOll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lIcDIcGll);
addTrigger(126, lIcGIcOil, lIcGIOl, lICGicl);
AddOpcodeAlias(lICDiOOIl);
addTrigger(127, liCDlCGll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lIcDIcDIl);
addTrigger(128, licGlOOll, liCOll, lIcGIOl);
addTrigger(129, liODicDll, liCOll, lIcGIOl);
addTrigger(130, llcOlODil, liCOll, lIcGIOl);
addTrigger(131, liCDiOGil, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lIcOicOll);
addTrigger(132, llCGiOOll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lICOiODll);
addTrigger(133, llOOlCOIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liOOiCGil);
addTrigger(134, liODicGil, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lIcOIcGil);
addTrigger(135, lIOOiOGll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lIOOiCGil);
addTrigger(136, lIOOicOIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liODlOGll);
addTrigger(137, llOGIOOll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(llOOlCGIl);
addTrigger(138, llcDicGIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liOGlCDll);
addTrigger(139, llCGICDll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lICGlcDll);
addTrigger(140, liCOIOOll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liOGiCGil);
addTrigger(141, lICOICGll, liCGiCGl, lIOGICl);
AddOpcodeAlias(lIcGlcDIl);
addTrigger(142, llCGICGil, liCGiCGl, lIOGICl);
AddOpcodeAlias(lIODIODil);
addTrigger(143, lIcDIOGll, liCGiCGl, lIOGICl);
AddOpcodeAlias(liODiODIl);
addTrigger(144, llcOICOll, liCGiCGl, lIOGICl);
AddOpcodeAlias(llcDlCOll);
addTrigger(145, llOOlODIl, lIcGIOl, lICGicl);
AddOpcodeAlias(lICDIcOll);
addTrigger(146, lIODicOll, lIcGIOl, lIcGlOl);
AddOpcodeAlias(lIOGIOOIl);
addTrigger(147, llCDlOOIl, lIcGIOl, lIcGlOl);
AddOpcodeAlias(llODiCOil);
addTrigger(148, lICDlOOil, lIcGIOl, lIcGlOl);
AddOpcodeAlias(llCDicDll);
addTrigger(149, llOOICGIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(llODiODll);
addTrigger(150, liOOlODll, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liCDicOll);
addTrigger(151, llcGICGIl, lIcGIOl, lIcGIOl);
AddOpcodeAlias(llCDIOOil);
addTrigger(152, llCGlCOil, lIcGIOl, lIcGIOl);
AddOpcodeAlias(lICGlCDll);
addTrigger(153, llODlCGil, lIcGIOl, lIcGlOl);
AddOpcodeAlias(llCOlOOll);
addTrigger(154, lIcGicDll, lIcGIOl, lIcGlOl);
AddOpcodeAlias(liOOiODll);
addTrigger(155, liODiCDll, lIcGIOl, lIcGlOl);
AddOpcodeAlias(llOOiOOIl);
addTrigger(156, llOOIODil, lICDll, lIcGlOl);
AddOpcodeAlias(llOGlOOll);
addTrigger(157, llOGICDIl, lIcGIOl, lIcGlOl);
AddOpcodeAlias(llOGIODll);
addTrigger(158, licOICOil, lIcGIOl, lIcGlOl);
AddOpcodeAlias(lIcGicGll);
addTrigger(159, liCDICOll, lIcGIOl, lIcGlOl);
AddOpcodeAlias(licGlCOIl);
addTrigger(160, lIcDIODIl, lIcGIOl, lIcGlOl);
AddOpcodeAlias(liCDICOIl);
addTrigger(161, llCGiCOll, lIcGlOl, lIcGlOl);
addTrigger(162, llCDIODIl, lIcGIOl, lIcGIOl);
addTrigger(163, lIODiCGIl, lIcGIOl, lIcGIOl);
addTrigger(164, lIcGiCOIl, liCGiCGl, lIOGlCl);
addTrigger(165, llOOICGll, liCGiCGl, lIOGlCl);
addTrigger(166, llOOIcDil, liCGiCGl, lIOGlCl);
addTrigger(167, llcOIODll, liCGiCGl, lIOGlCl);
addTrigger(168, lIOGICDil, liCGiCGl, lIcGIOl);
addTrigger(169, liOOIOOIl, lIcGIOl, lIcGIOl);
addTrigger(170, lICGiCGIl, liCOll, lIcGIOl);
addTrigger(171, lIcOlCGll, liCOll, lIcGIOl);
addTrigger(172, lICDiCDil, liCOll, lIcGIOl);
addTrigger(173, llcGIODll, liCOll, lIcGIOl);
addTrigger(174, llODicOll, lIcGIOl, lIcGlOl);
addTrigger(175, lIOGIODll, liCOll, lIcGIOl);
addTrigger(176, llcOIOGll, liCOll, lIcGIOl);
addTrigger(177, llODICOll, lIcGIOl, lIcGlOl);
addTrigger(178, licGIcOll, lIcGIOl, liCGiCGl);
addTrigger(179, lIcDiCGil, lIcGIOl, liCGiCGl);
addTrigger(180, llcDiCGll, lIcGIOl, lIcGlOl);
addTrigger(181, llCOicGIl, lIcGIOl, lIcGlOl);
addTrigger(182, llCGIOGll, lIcGIOl, lIcGlOl);
addTrigger(183, licGlODil, lIcGIOl, lIcGlOl);
addTrigger(184, llOOiOOll, lIcGIOl, lIcGIOl);
addTrigger(185, llODIcOil, lIcGIOl, lIcGIOl);
addTrigger(186, licDICDil, lIcGIOl, lIcGIOl);
addTrigger(187, licOlODil, lIcGIOl, lIcGIOl);
addTrigger(188, lIOOiODIl, lIcGIOl, lIcGIOl);
addTrigger(189, liCGICGll, lIcGIOl, lIcGIOl);
addTrigger(190, lIcDlOOil, lIcGlOl, lIcGlOl);
addTrigger(191, licOicGll, lIcGlOl, lIcGlOl);
addTrigger(192, llODiCOll, licGicDil, lIcGlOl);
addTrigger(193, llODicGIl, lIcGIOl, lIcGlOl);
addTrigger(194, lIcGlcOIl, lIcGIOl, lIcGlOl);
addTrigger(195, liODICOll, lIcGIOl, lIcGlOl);
addTrigger(196, llcDicDIl, lIcGIOl, lIcGlOl);
addTrigger(197, llcOICDll, lIcGIOl, lIcGlOl);
addTrigger(198, lICGIODil, lIcGIOl, lIcGlOl);
addTrigger(199, lIcGIOGll, lIcGIOl, lIcGIOl);
addTrigger(200, licDlOOIl, lIcGIOl, lIcGIOl);
addTrigger(201, lICGiOGll, lIcGIOl, lIcGIOl);
addTrigger(202, llCGicGIl, lIcGIOl, lIcGIOl);
addTrigger(203, liCGlODIl, lIcGIOl, lIcGIOl);
addTrigger(204, licDlcOIl, lIcGIOl, lIcGIOl);
addTrigger(205, llOGIcGll, lIcGIOl, lIcGIOl);
addTrigger(206, llCDlOGIl, lIcGIOl, lIcGIOl);
addTrigger(207, licOICGil, lIcGlOl, lIcGlOl);
addTrigger(208, llCGicDll, lIcGlOl, lIcGlOl);
addTrigger(209, llOOIcOIl, lIcGIOl, lIcGlOl);
addTrigger(210, lIcDlCOll, lIcGIOl, lIcGlOl);
addTrigger(211, liCOiOOil, lIcGIOl, lIcGlOl);
addTrigger(212, llcOlcGil, lIcGIOl, lIcGlOl);
addTrigger(213, lIODlCOil, lIcGIOl, lIcGlOl);
addTrigger(214, llCOiODll, lIcGIOl, lIcGlOl);
addTrigger(215, liOOiODIl, lIcGIOl, lIcGlOl);
addTrigger(216, llOGiCDll, lIcGIOl, lIcGlOl);
addTrigger(217, llOOiCOil, lIcGIOl, lIcGlOl);
addTrigger(218, lIODlCDll, liCOll, lIcGIOl);
addTrigger(219, liOGicOil, liCOll, lIcGIOl);
addTrigger(220, llcOicGil, liCGiCGl, lIcGIOl);
addTrigger(221, llODIOGIl, liCGiCGl, lIcGIOl);
addTrigger(222, liCGicDil, liCGiCGl, lIcGIOl);
addTrigger(223, licOIcDll, lIcGIOl, lIcGlOl);
addTrigger(224, licGlCDll, lIcGIOl, lIcGlOl);
addTrigger(225, lIcOIOOIl, lIcGIOl, lIcGlOl);
addTrigger(226, liCGIOOil, lIcGIOl, lIcGlOl);
addTrigger(227, lIOOiOOll, lIcGIOl, lIcGlOl);
addTrigger(228, liODIOGil, lICDll, lIcGlOl);
addTrigger(229, licGicGil, liCGiCDl, lIcGlOl);
addTrigger(230, llCOiODil, lIcGIOl, lIcGIOl);
addTrigger(231, liCGlCDll, lIcGll, lIcGIOl);
addTrigger(232, lIODlcOIl, lIcGll, lIcGIOl);
addTrigger(233, llCDlcDil, lIcGll, lIcGIOl);
addTrigger(234, lICDICGil, lIcGll, lIcGIOl);
addTrigger(235, llCGlCDll, lIcGIOl, lIcGlOl);
addTrigger(236, licGlCGil, lIcGIOl, lIcGlOl);
addTrigger(237, lIOGlcGIl, liCOll, lIcGIOl);
addTrigger(238, lIODlOGIl, liCOll, lIcGIOl);
addTrigger(239, llOGiCDil, liCOll, lIcGIOl);
addTrigger(240, liOGiOOll, lIcGIOl, lIcGlOl);
addTrigger(241, llCOlODIl, lIcGIOl, lIcGlOl);
addTrigger(242, llCDIcDIl, lIcGIOl, lIcGlOl);
addTrigger(243, llOGlOOIl, lICGicl, lIcGIOl);
addTrigger(244, llcGlOGIl, lIcGIOl, lIcGIOl);
addTrigger(245, lICOiCDil, lICGicl, lIcGIOl);
addTrigger(246, liCGiODil, lIcGlOl, lIcGlOl);
addTrigger(247, llCOicGil, lIcGIOl, liCGiCGl);
addTrigger(248, lIcGiCOil, lIcGIOl, liCGiCGl);
addTrigger(249, licDiCGil, lIcGIOl, liCGiCGl);
addTrigger(250, llcGICDil, lIcGlOl, lIcGlOl);
addTrigger(251, liCGIOOIl, lIcGlOl, lIcGlOl);
addTrigger(252, lIcGiODIl, lIcGll, lIcGIOl);
addTrigger(253, lICGlcOll, lIcGll, lIcGIOl);
addTrigger(254, lIcOiOGll, lIcGIOl, lIcGlOl);
addTrigger(255, llcOIcDIl, liCGiCGl, lIcGIOl);
addTrigger(256, lICGICGIl, liCGiCGl, lIcGIOl);
addTrigger(257, liCOlCOil, lIcGll, lIcGIOl);
addTrigger(258, lICOlOGll, lIcGll, lIcGIOl);
addTrigger(259, lICOlcOil, lICGicl, liCGiCGl);
addTrigger(260, lIcDlCDil, liCOll, lIcGiOGl);
addTrigger(261, lICDlCGIl, lIcGlOl, lIcGlOl);
addTrigger(262, lIcDICDil, lIcGlOl, lIcGlOl);
addTrigger(263, licOlOGll, lIcGIOl, lIcGlOl);
addTrigger(264, lIOOiCOil, lIcGIOl, lIcGlOl);
addTrigger(265, lIODiODll, lIcGIOl, lIcGlOl);
addTrigger(266, licOlcOIl, lIcGIOl, lIcGlOl);
addTrigger(267, lIcGiOOil, lIcGll, lIcGIOl);
addTrigger(268, lICOIcGIl, lIcGll, lIcGIOl);
addTrigger(270, lIOGlCOIl, liCGiCGl, lIcGIOl);
AddOpcodeAlias(licGiODll);
addTrigger(271, lIcGICOll, liCGiCGl, lIcGIOl);
AddOpcodeAlias(llcOICOil);
addTrigger(272, lIcDicOll, liCGiCGl, llODIOOIl);
AddOpcodeAlias(lIcGiCDil);
addTrigger(273, llOGIcDil, liCGiCGl, lIcGlOl);
AddOpcodeAlias(liCOIcGil);
addTrigger(274, llcDlcOll, liCGiCGl, lIcGlOl);
AddOpcodeAlias(liODicOil);
addTrigger(275, liOGIcDil, lIcGlOl, lIcGlOl);
addTrigger(276, licGlcGIl, lIcGlOl, lIcGlOl);
addTrigger(277, lIcGICGIl, lIcGIOl, lIcGlOl);
addTrigger(278, lICDlcGil, lIcGIOl, lIcGlOl);
addTrigger(279, licOiCOil, lICGicl, lICGicl);
AddOpcodeAlias(lIOGlCGll);
addTrigger(280, lIOOICDIl, lIcGIOl, lIcGlOl);
addTrigger(281, liCGlOOil, lIcGIOl, lIcGIOl);
addTrigger(282, lIOGicOIl, lIcGlOl, lIcGlOl);
addTrigger(283, llcDicGll, liCGiCGl, lICGicl);
addTrigger(284, llCDICOIl, lIcGiOGl, lICGicl);
AddOpcodeAlias(lICDIcDll);
addTrigger(285, licGIODIl, lIcGlOl, lIcGlOl);
addTrigger(286, lIODIOGil, lIcGlOl, lIcGlOl);
addTrigger(287, licDlOOil, liCOll, liCOlcl);
addTrigger(288, lICDIcOil, lICDll, lIcGIOl);
addTrigger(289, liCGIOGll, lICDll, lIcGIOl);
addTrigger(290, lICGiOGIl, liCGiCGl, lIcGIOl);
addTrigger(291, licOIOOIl, lIcGlOl, lIcGlOl);
addTrigger(292, lIcGiOGIl, lIcGlOl, lIcGlOl);
addTrigger(293, licDicDll, lIcGll, lIcGll);
addTrigger(294, llODicDil, lIcGIOl, lIcGIOl);
AddOpcodeAlias(llOGICOll);
addTrigger(295, llcOICGil, lIcGIOl, lIcGIOl);
AddOpcodeAlias(liOOlODIl);
addTrigger(296, llCOIOGIl, liCOll, lIcGIOl);
addTrigger(297, llCDlcGIl, liCGiCGl, lIcGIOl);
addTrigger(298, llcOlODll, lIcGll, lIcGIOl);
addTrigger(299, lIcOIcOll, lIcGll, lIcGIOl);
addTrigger(300, llcOIODil, lIcGll, liCOll);
addTrigger(301, liOOicOll, liCOll, lIcGIOl);
addTrigger(302, lIcGIcGil, liCOll, lIcGIOl);
addTrigger(303, llcDIcOll, liCOll, lIcGIOl);
addTrigger(304, llCDiOOil, liCOll, lIcGIOl);
addTrigger(305, liOGiCDIl, liCOll, lIcGIOl);
addTrigger(306, lICGlcGIl, liCOll, lIcGIOl);
addTrigger(307, liOGlODIl, lIcGlOl, lIcGlOl);
addTrigger(308, lIcDICDIl, lIcGlOl, lIcGlOl);
addTrigger(309, llcGlcGll, lIcGlOl, lIcGlOl);
addTrigger(310, lICOicGil, lIcGlOl, lIcGlOl);
addTrigger(311, liCDICOil, lIcGlOl, lIcGlOl);
addTrigger(312, llCDicOil, liCGiCGl, lIcGIOl);
addTrigger(313, lIcOICOIl, liCGiCGl, lIcGlOl);
addTrigger(314, llcGlCOIl, lIcGIOl, liCGiCGl);
addTrigger(315, licGIcDll, lIcGIOl, lIcGlOl);
addTrigger(316, liOGIcOll, lIcGIOl, lIcGlOl);
addTrigger(317, liOGIODll, lIcGlOl, liCDICl);
addTrigger(318, liODlcOil, liCGiCGl, lIcGlOl);
addTrigger(319, lICDIcGIl, liCGiCGl, lIcGlOl);
addTrigger(320, llCDIOOIl, liCGiCGl, lIcGIOl);
addTrigger(321, liODIcOil, liCGiCGl, lIcGlOl);
addTrigger(322, lICGIcOIl, liCGiCGl, lIcGlOl);
addTrigger(323, llOOICDIl, lICGicl, liCOll);
addTrigger(324, llcDiOGll, liCOll, lICDll);
addTrigger(325, lICDiCDIl, lIcGIOl, lIcGIOl);
addTrigger(326, llcOiCDil, lIcGIOl, lIcGIOl);
addTrigger(327, liOGicDil, lIcGIOl, lIcGIOl);
addTrigger(328, lIcDICOll, lIcGIOl, lIcGIOl);
addTrigger(329, lICDIOOIl, lIcGIOl, lIcGIOl);
addTrigger(330, liCDicOIl, lIcGIOl, lIcGIOl);
addTrigger(331, lIcOiODIl, lIcGIOl, lIcGlOl);
addTrigger(332, licOICDIl, lIcGIOl, liCOll);
addTrigger(333, lICGicDil, lIcGIOl, liCOll);
addTrigger(334, lICGicGIl, lIcGIOl, liCOll);
addTrigger(335, llCDICDll, lIcGIOl, liCOll);
addTrigger(336, lIcOlcGIl, lIcGIOl, liCOll);
addTrigger(337, licOlCGIl, lIcGIOl, liCGiCGl);
addTrigger(338, llcDlCDll, lIcGlOl, lIcGlOl);
addTrigger(339, licOICDil, lIcGlOl, lIcGlOl);
addTrigger(340, lIcDiOGll, lIcGlOl, lIcGlOl);
addTrigger(341, liCDlCOll, lIcGlOl, lIcGlOl);
special_values_table[lIcDlCl] = new Array();
special_values_table[lIcDlCl][licGlcDil] = llODiOOIl;
special_values_table[lIcDlCl][lICGICOil] = llcGiODIl;
special_values_table[lIcDlCl][lIcDIOOll] = llcOlCGIl;
special_values_table[lIcDlCl][lICOiOGIl] = lIcOiOOll;
special_values_table[lIcDlCl][licGlcDll] = lICDlOGll;
special_values_table[lIcDlCl][liCGlCOil] = llCDlCOIl;
special_values_table[lIcDlCl][liOGlCOll] = llODlCOIl;
special_values_table[lIcDlCl][llCOlOOIl] = llODlcDll;
special_values_table[lIcDlCl][llcOiCGll] = liCDlCGIl;
special_values_table[lIcDlCl][lIOOiOGil] = lICDIODll;
special_values_table[lIcDlCl][llcDicOll] = liOGIcGll;
special_values_table[lIcDlCl][llcOlOOIl] = lIOGicDIl;
special_values_table[lIcDlCl][lICDiCOil] = liOGiCDil;
special_values_table[lIcDlCl][licDiOGIl] = lIcGlODll;
special_values_table[lIcDlCl][llOGICDil] = licDICGll;
special_values_table[lIcDlCl][lICGlCOll] = lIcDlCGil;
special_values_table[lIcDlCl][lIcGicDIl] = lIOGlcGll;
special_values_table[lIcDlCl][liCOiCGIl] = lIODlcGll;
special_values_table[lIcDlCl][llcDlCGIl] = llCOIcOil;
special_values_table[lIcDlCl][lIOOiOOil] = liCDlODil;
special_values_table[lIcDlCl][lICOlCOll] = llcDICGll;
special_values_table[lIcDlCl][liCGIcOil] = liOGlODil;
special_values_table[lIcDlCl][llCOIOOil] = lIOOlODil;
special_values_table[lIcDlCl][llCOiOGIl] = llODiCDil;
special_values_table[lIcDlCl][liCGlcOll] = licGiCDll;
special_values_table[lIcDlCl][liOOlOGll] = lIcGicGil;
special_values_table[lIcDlCl][lICGiCDll] = liCOICDil;
special_values_table[lIcDlCl][liODlOOIl] = liCGiOOll;
mark_pairs[licDICGil] =
    licGicDil;
mark_pairs[lIcGiOGil] =
    llOOlcGil;
mark_pairs[llCDiCGIl] =
    lIcGlOl;
mark_pairs[llOGlcOll] =
    lIcGlOl;
mark_pairs[lIODICOll] =
    lIcGlOl;
mark_pairs[llcGIOGil] =
    lIcGlOl;
mark_pairs[llODiOGil] =
    lIcGlOl;
mark_pairs[licOicOil] =
    lIcGlOl;
mark_pairs[lIODlODIl] =
    lIcGlOl;
mark_pairs[llcDICOil] =
    lIcGlOl;
mark_pairs[llCDiCOil] =
    lIcGlOl;
mark_pairs[liODICGIl] =
    lIcGlOl;
mark_pairs[lIOOicDil] =
    lIcGlOl;
mark_pairs[llODlcOil] =
    liCGIOl;
mark_pairs[llODlOGll] =
    lICDIOGIl;
mark_pairs[liODIOOIl] =
    lICDIOGIl;
mark_pairs[licOiCDll] =
    lICDIOGIl;
mark_pairs[llcDiOGIl] = lIcGlOl;
mark_pairs[lICGIODll] = lIcGIOl;
mark_pairs[llCOlCOIl] = lIcGIOl;
mark_pairs[llCGIODIl] = lIcGIOl;
mark_pairs[llOGIcGIl] = lIcGIOl;
mark_pairs[licGlOOIl] = lIcGIOl;
mark_pairs[licGicDll] = lICDIOGIl;
mark_pairs[llCGIcDll] = lIcGlOl;
special_values_table[licGicDil] = new Array();
special_values_table[licGicDil][1] = liCDIcDil;
special_values_table[licGicDil][2] = lICDiCGIl;
special_values_table[licGicDil][3] = lIOGicOll;
special_values_table[licGicDil][4] = lIcDlCDIl;
special_values_table[licGicDil][5] = llODIOGll;
special_values_table[licGicDil][6] = lICGIcDIl;
special_values_table[licGicDil][7] = lICDIOOll;
special_values_table[licGicDil][8] = licOiOGIl;
special_values_table[licGicDil][9] = lICDIcOIl;
special_values_table[licGicDil][10] = licOiCGIl;
special_values_table[licGicDil][11] = llcOlCOil;
special_values_table[licGicDil][12] = llCOiCDIl;
special_values_table[licGicDil][13] = llOGiCOil;
special_values_table[licGicDil][14] = lICOlODll;
special_values_table[licGicDil][15] = lIcDlCOil;
special_values_table[licGicDil][16] = llcGiOOll;
special_values_table[licGicDil][17] = licDicDIl;
special_values_table[licGicDil][18] = liODICOIl;
special_values_table[llODIOOIl] = new Array();
special_values_table[llODIOOIl][liOGicDll] =
    liOGicGIl;
special_values_table[llODIOOIl][liOGlCGil] =
    lIcOiCOil;
special_values_table[llODIOOIl][licGlCDIl] =
    llcGlODIl;
special_values_table[llODIOOIl][lIcDiCOll] =
    llOOlOGIl;
special_values_table[llODIOOIl][liCOlcGIl] =
    llCDicDl;
special_values_table[llODIOOIl][lIcDiOOil] =
    licOicDll;
special_values_table[llODIOOIl][lICOIOOil] =
    lICGiOGl;
special_values_table[llODIOOIl][llcGiOOIl] =
    llCGicOll;
special_values_table[llODIOOIl][llOGlCDil] =
    lICOiCDIl;
special_values_table[llODIOOIl][liCGiOGil] =
    llODlCGll;
special_values_table[llODIOOIl][lICDICOll] =
    llOGlcGl;
special_values_table[llODIOOIl][lICOIcOll] =
    llCGlODl;
special_values_table[llODIOOIl][liCDlcOll] =
    liCGIOOl;
special_values_table[llODIOOIl][liCDICGil] =
    llCGICGl;
special_values_table[llODIOOIl][llOGiOOil] =
    liODiCGl;
special_values_table[llODIOOIl][llOGiCDIl] =
    llCDIOGil;
special_values_table[llODIOOIl][llOOICDll] =
    llOOIOGl;
for (i in special_values_table[licGicDil]) {
    special_values_table[licGicDil][i] =
        llCGiCOl + i + lIODlcOll + special_values_table[licGicDil][i] + lIOOlCGl;
}
var known_class =
    new Array();
known_class[0] =
    llOOIcl;
known_class[1] =
    liCOlCl;
known_class[2] =
    lICGicl;
known_class[3] =
    liOOlOl;
known_class[4] =
    lIcOIcl;
known_class[5] =
    lICGIcl;
known_class[6] =
    lIOOl;
known_class[7] =
    liCGl;
known_class[8] =
    lIcOil;
known_class[9] =
    lIcGll;
known_class[10] =
    liCOll;
known_class[11] =
    llcGil;
known_class[12] =
    llCOIl;
known_class[13] =
    lICDll;
known_class[14] =
    liCGil;
known_class[15] =
    llcDIl;
known_class[16] =
    lICOil;
known_class[17] =
    lIOOIl;
var known_class_title =
    new Array();
known_class_title[0] =
    lIcDIcGil;
known_class_title[1] =
    liCOICDll;
known_class_title[2] =
    lICGicl;
known_class_title[3] =
    licOlCOll;
known_class_title[4] =
    licOicDIl;
known_class_title[5] =
    llcDlcGil;
known_class_title[6] =
    lIOOl;
known_class_title[7] =
    liCGl;
known_class_title[8] =
    lIcOil;
known_class_title[9] =
    liOGicOIl;
known_class_title[10] =
    liCOll;
known_class_title[11] =
    llcGil;
known_class_title[12] =
    llCOIl;
known_class_title[13] =
    lICDll;
known_class_title[14] =
    liCGil;
known_class_title[15] =
    llCDlCDIl;
known_class_title[16] =
    lICOil;
known_class_title[17] =
    llODlcGll;
var known_class_savepriorities =
    new Array();
known_class_savepriorities.push(lIOOl);
known_class_savepriorities.push(liCGl);
known_class_savepriorities.push(llCOIl);
known_class_savepriorities.push(liOOlOl);
known_class_savepriorities.push(lIOOIl);
known_class_savepriorities.push(lIcOIcl);
known_class_savepriorities.push(lICGIcl);
known_class_savepriorities.push(llOOIcl);
known_class_savepriorities.push(liCOlCl);
known_class_savepriorities.push(lIcOil);
known_class_savepriorities.push(lIcGll);
known_class_savepriorities.push(liCOll);
known_class_savepriorities.push(llcGil);
known_class_savepriorities.push(lICGicl);
known_class_savepriorities.push(lICDll);
known_class_savepriorities.push(liCGil);
known_class_savepriorities.push(llcDIl);
known_class_savepriorities.push(lICOil);

function
known_class2known_class_title(val) {
    return known_class_title[known_class.indexOf(val)];
}

function
SourceLost() {
    var offset = 0;
    for (i = 0; i < es.length; i++) {
        es[i].UpdBounds();
        if (es[i].pm.uid !== undefined) {
            es[i].exists = false;
            es[i].pm.uid =
                RandomizeName(es[i].pm.uid);
            es[i].exists = true;
        }
    }
    for (i = 0; i < es.length; i++) {
        switch (es[i]._class) {
            case lICDll:
            case liCGil:
            case llcDIl:
                if (es[i].pm.x == 0)
                    if (es[i].pm.y == 0) {
                        es[i].pm.x =
                            start_bounds_left + offset;
                        es[i].pm.y =
                            start_bounds_top - 60;
                        offset += 40;
                    } break;
        }
    }
}
var start_bounds_left = 0;
var start_bounds_right = 0;
var start_bounds_top = 0;
var start_bounds_bottom = 0;
var newEid =
    new Array();

function
E(_class) {
    this._class =
        _class;
    this.pm =
        null;
    this.selected =
        false;
    this.exists =
        true;
    this._isresizable =
        false;
    this._isxdirected =
        false;
    this._isspeedvectordirected =
        false;
    this._isphysical =
        false;
    this.isResizable =
        function() {
            switch (this._class) {
                case liCOlCl:
                case llOOIcl:
                case lICGicl:
                case liOOlOl:
                case lIcOIcl:
                case lICGIcl:
                    return true;
                default:
                    return false;
            }
        };
    this.isXDirected =
        function() {
            switch (this._class) {
                case lIOOl:
                case liCGl:
                case lIcOil:
                    return true;
                default:
                    return false;
            }
        };
    this.isSpeedVectorDirected =
        function() {
            switch (this._class) {
                case lIOOl:
                case liCGl:
                case lIcOil:
                case llCOIl:
                case liOOlOl:
                    return true;
                default:
                    return false;
            }
        };
    this.isPhysical =
        function() {
            switch (this._class) {
                case lIOOl:
                case liCGl:
                case lIcOil:
                case llCOIl:
                case liOOlOl:
                case lICGicl:
                case llOOIcl:
                case liCOlCl:
                case lICGIcl:
                case lIcOIcl:
                case lIcGll:
                case liCOll:
                case llcGil:
                case llcDIl:
                case lICDll:
                case liCGil:
                case lICOil:
                    return true;
                default:
                    return false;
            }
        };
    this.Remove =
        function() {
            this.exists =
                false;
            this.selected =
                false;
        };
    this.GenerateParameters =
        function() {
            switch (this._class) {
                case lIOOl:
                    this.pm = {
                        uid: liCGiODIl,
                        x: 0,
                        y: 0,
                        tox: 0,
                        toy: 0,
                        hea: 130,
                        hmax: 130,
                        team: 0,
                        side: 1,
                        char: 1,
                        incar: -1,
                        botaction: 0,
                        ondeath: -1
                    };
                    break;
                case liCGl:
                    this.pm = {
                        uid: liCGiOGIl,
                        x: 0,
                        y: 0,
                        tox: 0,
                        toy: 0,
                        hea: 130,
                        hmax: 130,
                        team: 0,
                        side: 1,
                        char: 1,
                        incar: -1,
                        botaction: 0,
                        ondeath: -1
                    };
                    break;
                case llcGil:
                    this.pm = {
                        uid: llCDlCDll,
                        x: 0,
                        y: 0,
                        power: 0.4,
                        flare: 1
                    };
                    break;
                case liCOll:
                    this.pm = {
                        uid: llcGiCDll,
                        x: 0,
                        y: 0,
                        model: liODICOl,
                        command: -1,
                        upg: 0
                    };
                    break;
                case llOOIcl:
                    this.pm = {
                        x: 0,
                        y: 0,
                        w: 10,
                        h: 10,
                        m: 0
                    };
                    break;
                case lIcOIcl:
                    this.pm = {
                        x: 0,
                        y: 0,
                        w: 10,
                        h: 10,
                        m: 0,
                        c: lIcDICl,
                        a: '-1',
                        u: 0,
                        v: 0,
                        f: 0,
                        s: true
                    };
                    break;
                case lICGIcl:
                    this.pm = {
                        x: 0,
                        y: 0,
                        w: 10,
                        h: 10,
                        damage: 0,
                        friction: true
                    };
                    break;
                case lICGicl:
                    this.pm = {
                        uid: liCGlcGil,
                        x: 0,
                        y: 0,
                        w: 10,
                        h: 10,
                        use_target: -1,
                        use_on: 0,
                        attach: -1
                    };
                    break;
                case liOOlOl:
                    this.pm = {
                        uid: lIOGIOGil,
                        x: 0,
                        y: 0,
                        w: 10,
                        h: 10,
                        tox: 0,
                        toy: 0,
                        stab: 0,
                        damage: 0,
                        attach: -1
                    };
                    break;
                case liCOlCl:
                    this.pm = {
                        uid: lIcDiCGIl,
                        x: 0,
                        y: 0,
                        w: 10,
                        h: 10,
                        moving: false,
                        tarx: 0,
                        tary: 0,
                        maxspeed: 10,
                        vis: true,
                        attach: -1
                    };
                    break;
                case liCGil:
                    this.pm = {
                        uid: llCOICDil,
                        x: 0,
                        y: 0,
                        enabled: true,
                        maxcalls: 1,
                        target: -1,
                        delay: 30
                    };
                    break;
                case lIcGll:
                    this.pm = {
                        uid: liCOiCDil,
                        model: liOOIOGll,
                        x: 0,
                        y: 0,
                        attach: -1,
                        u: 0,
                        v: 0,
                        f: 0,
                        r: 0,
                        sx: 1,
                        sy: 1
                    };
                    break;
                case llcDIl:
                    this.pm = {
                        x: 0,
                        y: 0,
                        mark: llcOiCGll,
                        forteam: 0
                    };
                    break;
                case lICOil:
                    this.pm = {
                        x: 0,
                        y: 0,
                        uid: llcOlODIl,
                        url: lIcDICl,
                        volume: 1,
                        loop: true,
                        callback: -1
                    };
                    break;
                case lIOOIl:
                    this.pm = {
                        id: '0',
                        width: 100,
                        height: 100
                    };
                    break;
                case lIcOil:
                    this.pm = {
                        uid: llCOIcDIl,
                        side: 1,
                        model: licGiOOl,
                        x: 0,
                        y: 0,
                        tox: 0,
                        toy: 0,
                        hpp: 100
                    };
                    break;
                case llCOIl:
                    this.pm = {
                        uid: liOOlOOll,
                        model: liODICDl,
                        x: 0,
                        y: 0,
                        tox: 0,
                        toy: 0
                    };
                    break;
                case lICDll:
                    this.pm = {
                        uid: llcDicDll,
                        x: 0,
                        y: 0,
                        enabled: true,
                        maxcalls: 1,
                        actions_1_type: -1,
                        actions_1_targetA: 0,
                        actions_1_targetB: 0,
                        actions_2_type: -1,
                        actions_2_targetA: 0,
                        actions_2_targetB: 0,
                        actions_3_type: -1,
                        actions_3_targetA: 0,
                        actions_3_targetB: 0,
                        actions_4_type: -1,
                        actions_4_targetA: 0,
                        actions_4_targetB: 0,
                        actions_5_type: -1,
                        actions_5_targetA: 0,
                        actions_5_targetB: 0,
                        actions_6_type: -1,
                        actions_6_targetA: 0,
                        actions_6_targetB: 0,
                        actions_7_type: -1,
                        actions_7_targetA: 0,
                        actions_7_targetB: 0,
                        actions_8_type: -1,
                        actions_8_targetA: 0,
                        actions_8_targetB: 0,
                        actions_9_type: -1,
                        actions_9_targetA: 0,
                        actions_9_targetB: 0,
                        actions_10_type: -1,
                        actions_10_targetA: 0,
                        actions_10_targetB: 0,
                    };
                    break;
                default:
                    return false;
            }
            if (source_lost) {
                if (this.pm.uid != undefined) {
                    if (newEid[this._class] == undefined) newEid[this._class] = 1;
                    this.pm.uid += newEid[this._class];
                    newEid[this._class] += 1;
                }
            }
            return true;
        };
    this.UpdBounds =
        function() {
            if (this.pm.x != undefined) {
                start_bounds_left =
                    Math.min(this.pm.x, start_bounds_left);
                start_bounds_top =
                    Math.min(this.pm.y, start_bounds_top);
                if (this.pm.h != undefined) {
                    start_bounds_bottom =
                        Math.max(this.pm.y + this.pm.h, start_bounds_bottom);
                    start_bounds_right =
                        Math.max(this.pm.x + this.pm.w, start_bounds_right);
                } else {
                    start_bounds_bottom =
                        Math.max(this.pm.y, start_bounds_bottom);
                    start_bounds_right =
                        Math.max(this.pm.x, start_bounds_right);
                }
            }
            return true;
        };
    this.UpdateStatics =
        function() {
            this._isresizable =
                this.isResizable();
            this._isxdirected =
                this.isXDirected();
            this._isspeedvectordirected =
                this.isSpeedVectorDirected();
            this._isphysical =
                this.isPhysical();
        };
    this.GenerateParameters();
    this.UpdateStatics();
    this.fixWidths =
        function() {
            if (this._isresizable) {
                if (this.pm.w < 0) {
                    this.pm.x += this.pm.w;
                    this.pm.w = -this.pm.w;
                }
                if (this.pm.h < 0) {
                    this.pm.y += this.pm.h;
                    this.pm.h = -this.pm.h;
                }
            }
        };
    this.fixPos =
        function() {
            this.pm.x =
                Math.round(this.pm.x / GRID_SNAPPING) * GRID_SNAPPING;
            this.pm.y =
                Math.round(this.pm.y / GRID_SNAPPING) * GRID_SNAPPING;
            if (this._isresizable) {
                this.pm.w =
                    Math.round(this.pm.w / GRID_SNAPPING) * GRID_SNAPPING;
                this.pm.h =
                    Math.round(this.pm.h / GRID_SNAPPING) * GRID_SNAPPING;
            }
        };
    this.hitSelect =
        function() {
            if (canvas_focus)
                if (this.exists)
                    if (m_drag_selection) {
                        if (this._isphysical) {
                            if (this._isresizable) {
                                if (Math.max(lmwa, lmdrwa) > Math.min(this.pm.x, this.pm.x + this.pm.w) && Math.min(lmwa, lmdrwa) < Math.max(this.pm.x, this.pm.x + this.pm.w) && Math.max(lmwb, lmdrwb) > Math.min(this.pm.y, this.pm.y + this.pm.h) && Math.min(lmwb, lmdrwb) < Math.max(this.pm.y, this.pm.y + this.pm.h)) {
                                    return true;
                                }
                            } else {
                                var this_class =
                                    ThinkOfBBoxClass(this._class, this);
                                var hit_from_x;
                                var hit_to_x;
                                var hit_from_y;
                                var hit_to_y;
                                hit_from_y =
                                    bo_y[this_class];
                                hit_to_y =
                                    bo_y[this_class] + bo_h[this_class];
                                if (this.pm.side != -1) {
                                    hit_from_x =
                                        bo_x[this_class];
                                    hit_to_x =
                                        bo_x[this_class] + bo_w[this_class];
                                } else {
                                    hit_to_x = -bo_x[this_class];
                                    hit_from_x = -bo_x[this_class] - bo_w[this_class];
                                }
                                if (Math.max(lmwa, lmdrwa) > Math.min(this.pm.x + hit_from_x, this.pm.x + hit_to_x) && Math.min(lmwa, lmdrwa) < Math.max(this.pm.x + hit_from_x, this.pm.x + hit_to_x) && Math.max(lmwb, lmdrwb) > Math.min(this.pm.y + hit_from_y, this.pm.y + hit_to_y) && Math.min(lmwb, lmdrwb) < Math.max(this.pm.y + hit_from_y, this.pm.y + hit_to_y)) {
                                    return true;
                                }
                            }
                        }
                    } return false;
        };
    this.hit =
        function(borders) {
            if (canvas_focus)
                if (this.exists)
                    if (this._isphysical) {
                        if (this._isresizable) {
                            if (borders) {
                                if (lmwa >= this.pm.x - borderwidth)
                                    if (lmwa <= this.pm.x + this.pm.w + borderwidth)
                                        if (lmwb >= this.pm.y - borderwidth)
                                            if (lmwb <= this.pm.y + this.pm.h + borderwidth) {
                                                if (lmwa <= this.pm.x + borderwidth) {
                                                    if (lmwb <= this.pm.y + borderwidth) return licGIOOll;
                                                    else if (lmwb >= this.pm.y + this.pm.h - borderwidth) return licGICDil;
                                                    else return llCGlOGil;
                                                } else if (lmwa >= this.pm.x + this.pm.w - borderwidth) {
                                                    if (lmwb <= this.pm.y + borderwidth) return llOOlcOll;
                                                    else if (lmwb >= this.pm.y + this.pm.h - borderwidth) return liODlcDil;
                                                    else return liOGlODll;
                                                }
                                                if (lmwb <= this.pm.y + borderwidth) return liCDiCOil;
                                                else if (lmwb >= this.pm.y + this.pm.h - borderwidth) return llcDlOGil;
                                                else return lIOGlCDil;
                                            }
                            } else {
                                if (lmwa >= this.pm.x)
                                    if (lmwa <= this.pm.x + this.pm.w)
                                        if (lmwb >= this.pm.y)
                                            if (lmwb <= this.pm.y + this.pm.h) {
                                                return true;
                                            }
                            }
                        } else {
                            var this_class =
                                ThinkOfBBoxClass(this._class, this);
                            var hit_from_x;
                            var hit_to_x;
                            var hit_from_y;
                            var hit_to_y;
                            hit_from_y =
                                bo_y[this_class];
                            hit_to_y =
                                bo_y[this_class] + bo_h[this_class];
                            if (this.pm.side != -1) {
                                hit_from_x =
                                    bo_x[this_class];
                                hit_to_x =
                                    bo_x[this_class] + bo_w[this_class];
                            } else {
                                hit_to_x = -bo_x[this_class];
                                hit_from_x = -bo_x[this_class] - bo_w[this_class];
                            }
                            if (lmwa >= this.pm.x + hit_from_x)
                                if (lmwa <= this.pm.x + hit_to_x)
                                    if (lmwb >= this.pm.y + hit_from_y)
                                        if (lmwb <= this.pm.y + hit_to_y) {
                                            if (borders) return lIOGlCDil;
                                            return true;
                                        }
                        }
                    } return false;
        };
}
var stepinc =
    1;

function
RandomizeName(oldname) {
    var newname =
        oldname;
    var phrase =
        lICOIcl;
    var unoriginal;
    for (var i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].pm.uid != undefined) {
                if (es[i].pm.uid == newname) {
                    unoriginal =
                        true;
                    oldname =
                        newname;
                }
            } if (unoriginal) {
        var takes =
            0;
        do {
            unoriginal =
                false;
            var indof =
                oldname.lastIndexOf(phrase);
            var copysuffix =
                Math.floor(oldname.substring(indof + 1));
            if (indof == -1 || isNaN(copysuffix)) {
                newname =
                    oldname + phrase + '1';
            } else {
                newname =
                    oldname.substring(0, indof) + phrase + (copysuffix + Math.floor(Math.random() * takes + 1));
            }
            takes += stepinc;
            for (var i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (es[i].pm.uid != undefined) {
                        if (es[i].pm.uid == newname) {
                            unoriginal =
                                true;
                            oldname =
                                newname;
                        }
                    }
        } while (unoriginal);
        stepinc =
            Math.max(1, Math.round((takes * 0.1 + stepinc * 5) / 6));
    }
    return newname;
}
var ENABLE_TEXT =
    true;
var ENABLE_SHADOWS =
    true;
var dis_from_x = 0;
var dis_to_x = 0;
var dis_from_y = 0;
var dis_to_y = 0;
var zoom = 1;
var title_density = 0;
var last_title_density = 0;
var borderwidth_onscreen = 3;
var borderwidth = 3;

function
s2w_x(x) {
    return x / lsu * (dis_to_x - dis_from_x) + dis_from_x;
}

function
w2s_x(x) {
    return (x - dis_from_x) / (dis_to_x - dis_from_x) * lsu;
}

function
s2w_y(y) {
    return y / lsv * (dis_to_y - dis_from_y) + dis_from_y;
}

function
w2s_y(y) {
    return (y - dis_from_y) / (dis_to_y - dis_from_y) * lsv;
}

function
w2s_w(x) {
    return (x) / (dis_to_x - dis_from_x) * lsu;
}

function
w2s_h(y) {
    return (y) / (dis_to_y - dis_from_y) * lsv;
}

function
s2w_w(x) {
    return (x) / lsu * (dis_to_x - dis_from_x);
}

function
s2w_h(y) {
    return (y) / lsv * (dis_to_y - dis_from_y);
}
var quick_pick =
    false;
var lqpc =
    new Array();
var quick_pick_active_param =
    lIcDICl;
var quick_pick_ignore_one_click =
    false;
var quick_pick_fake_over = -1;

function
MyDrawImage(img_decide_result, _x1, _y1, _x2, _y2) {
    if (_x2 < 0) {
        _x2 = -_x2;
        _x1 -= _x2;
    }
    if (_x1 + _x2 > 0)
        if (_x1 < lsu)
            if (_y1 + _y2 > 0)
                if (_y1 < lsv) {
                    _x1 = Math.round(_x1);
                    _y1 = Math.round(_y1);
                    _x2 = Math.round(_x2);
                    _y2 = Math.round(_y2);
                    if (img_decide_result === undefined || img_decide_result.naturalHeight == 0) {
                        ctx.drawImage(img_unknown, _x1, _y1, _x2, _y2);
                    } else {
                        if (ImageTrimmerLogicDone(img_decide_result)) {
                            var old_scale_x =
                                _x2 / w2s_w(img_decide_result.naturalWidth);
                            var old_scale_y =
                                _y2 / w2s_h(img_decide_result.naturalHeight);
                            ctx.drawImage(img_decide_result, img_decide_result.trim_x1, img_decide_result.trim_y1, img_decide_result.trim_x2 - img_decide_result.trim_x1, img_decide_result.trim_y2 - img_decide_result.trim_y1, _x1 + w2s_w(img_decide_result.trim_x1) * old_scale_x, _y1 + w2s_h(img_decide_result.trim_y1) * old_scale_y, old_scale_x * w2s_w(img_decide_result.trim_x2 - img_decide_result.trim_x1), old_scale_y * w2s_h(img_decide_result.trim_y2 - img_decide_result.trim_y1));
                        } else ctx.drawImage(img_decide_result, _x1, _y1, _x2, _y2);
                    }
                }
}
var trim_queued_images = [];

function
ImageTrimmerLogicDone(img) {
    if (img.trim_done == true) return true;
    img.trim_done =
        false;
    var current_complexity =
        0;
    for (var i =
            0; i < trim_queued_images.length; i++) {
        current_complexity +=
            (trim_queued_images[i].trim_x2 - trim_queued_images[i].trim_x1 + trim_queued_images[i].trim_y2 - trim_queued_images[i].trim_y1) * 2;
        if (current_complexity > 10000) return false;
    }
    img.trim_boost_points =
        200;
    if (img.trim_timer == undefined) {
        img.trim_timer =
            setInterval(ImgTrimThink, 16);
        trim_queued_images.push(img);
    } else {
        return false;
    }

    function
    ImgTrimThink() {
        var data =
            img.data;
        if (img.data == null || img.data == undefined) {
            var canvas =
                document.createElement(liOOicGll);
            var context =
                canvas.getContext(lIl);
            canvas.width =
                img.width;
            canvas.height =
                img.height;
            context.drawImage(img, 0, 0);
            data =
                context.getImageData(0, 0, img.width, img.height).data;
            img.trim_x1 =
                0;
            img.trim_y1 =
                0;
            img.trim_x2 =
                img.width;
            img.trim_y2 =
                img.height;
            img.trim_x1_fixed =
                false;
            img.trim_y1_fixed =
                false;
            img.trim_x2_fixed =
                false;
            img.trim_y2_fixed =
                false;
            img.data =
                data;
        }
        for (var tr =
                img.trim_boost_points + 1; tr > 0; tr--) {
            if (!img.trim_y1_fixed) {
                var y =
                    img.trim_y1;
                for (var x =
                        img.trim_x1; x < img.trim_x2; x++) {
                    if (data[(y * img.width + x) * 4 + 3] > 0) {
                        img.trim_y1_fixed =
                            true;
                        break;
                    }
                }
                if (!img.trim_y1_fixed)
                    if (img.trim_y1 + 1 < img.trim_y2) img.trim_y1++;
            }
            if (!img.trim_y2_fixed) {
                var y =
                    img.trim_y2 - 1;
                for (var x =
                        img.trim_x1; x < img.trim_x2; x++) {
                    if (data[(y * img.width + x) * 4 + 3] > 0) {
                        img.trim_y2_fixed =
                            true;
                        break;
                    }
                }
                if (!img.trim_y2_fixed)
                    if (img.trim_y2 - 1 > img.trim_y1) img.trim_y2--;
            }
            if (!img.trim_x1_fixed) {
                var x =
                    img.trim_x1;
                for (var y =
                        img.trim_y1; y < img.trim_y2; y++) {
                    if (data[(y * img.width + x) * 4 + 3] > 0) {
                        img.trim_x1_fixed =
                            true;
                        break;
                    }
                }
                if (!img.trim_x1_fixed)
                    if (img.trim_x1 + 1 < img.trim_x2) img.trim_x1++;
            }
            if (!img.trim_x2_fixed) {
                var x =
                    img.trim_x2 - 1;
                for (var y =
                        img.trim_y1; y < img.trim_y2; y++) {
                    if (data[(y * img.width + x) * 4 + 3] > 0) {
                        img.trim_x2_fixed =
                            true;
                        break;
                    }
                }
                if (!img.trim_x2_fixed)
                    if (img.trim_x2 - 1 > img.trim_x1) img.trim_x2--;
            }
        }
        img.trim_boost_points *= 0.5;
        if (img.trim_y1_fixed)
            if (img.trim_y2_fixed)
                if (img.trim_x1_fixed)
                    if (img.trim_x2_fixed) {
                        img.data =
                            null;
                        img.trim_done =
                            true;
                        clearInterval(img.trim_timer);
                        trim_queued_images.splice(trim_queued_images.indexOf(img), 1);
                    }
    }
    return false;
}

function
ldb(_x2, _y2, _w, _h) {
    var _x = Math.round(_x2);
    var _y = Math.round(_y2);
    _w = Math.round(_x2 + _w) - _x;
    _h = Math.round(_y2 + _h) - _y;
    lmfr(_x, _y, 1, _h + 1);
    lmfr(_x + _w, _y, 1, _h + 1);
    lmfr(_x, _y, _w + 1, 1);
    lmfr(_x, _y + _h, _w + 1, 1);
}

function
lmfr(_x2, _y2, _w, _h) {
    var _x = Math.round(_x2);
    var _y = Math.round(_y2);
    _w = Math.round(_x2 + _w) - _x;
    _h = Math.round(_y2 + _h) - _y;
    if (_x > lsu) return;
    var _x_add_w =
        _x + _w;
    if (_x_add_w < 0) return;
    if (_y > lsv) return;
    var _y_add_h =
        _y + _h;
    if (_y_add_h < 0) return;
    if (_x_add_w > lsu) _w =
        lsu - _x;
    if (_y_add_h > lsv) _h =
        lsv - _y;
    if (_x < 0) {
        _w +=
            _x;
        _x =
            0;
    }
    if (_y < 0) {
        _h +=
            _y;
        _y =
            0;
    }
    ctx.fillRect(_x, _y, _w, _h);
}

function
MyDrawSelection(_x, _y, _w, _h) {
    _x = Math.round(_x);
    _y = Math.round(_y);
    _w = Math.round(_w);
    _h = Math.round(_h);
    var _w_small =
        _w * 0.25;
    var _h_small =
        _h * 0.25;
    lmfr(_x, _y, 1, _h_small);
    lmfr(_x + _w, _y, 1, _h_small);
    lmfr(_x, _y + _h * 0.75, 1, _h_small);
    lmfr(_x + _w, _y + _h * 0.75, 1, _h_small);
    lmfr(_x, _y, _w_small, 1);
    lmfr(_x, _y + _h, _w_small, 1);
    lmfr(_x + _w * 0.75, _y, _w_small, 1);
    lmfr(_x + _w * 0.75, _y + _h, _w_small, 1);
}

function
lg(_step, alpha) {
    ctx.globalAlpha =
        alpha / Math.max(zoom, 1);
    var x =
        w2s_x(Math.floor(s2w_x(0) / _step) * _step);
    var to_x =
        w2s_x(Math.ceil(s2w_x(lsu) / _step) * _step);
    var step =
        w2s_w(_step);
    if (step > 2)
        while (x < to_x) {
            lmfr(x, 0, 1, lsv);
            x += step;
        }
    var y =
        w2s_y(Math.floor(s2w_y(0) / _step) * _step);
    var to_y =
        w2s_y(Math.ceil(s2w_y(lsv) / _step) * _step);
    step =
        w2s_h(_step);
    if (step > 2)
        while (y < to_y) {
            lmfr(0, y, lsu, 1);
            y += step;
        }
}
var DOQuad_i;
var DOQuad_active;

function
DOQuad(x1, y1, x2, y2) {
    if (!ldrs) {
        var over = false;
        if (ldrs) over =
            DOQuad_active == DOQuad_i;
        else if (lmwa >= x1)
            if (lmwa < x1 + x2)
                if (lmwb >= y1)
                    if (lmwb < y1 + y2) over = true;
        x1 = w2s_x(x1);
        y1 = w2s_y(y1);
        x2 = w2s_w(x2);
        y2 = w2s_h(y2);
        ctx.globalAlpha =
            0.2;
        if (over) ctx.globalAlpha =
            0.7;
        lmfr(x1, y1, 1, y2);
        lmfr(x1 + x2, y1, 1, y2);
        lmfr(x1, y1, x2, 1);
        lmfr(x1, y1 + y2, x2, 1);
        if (over) {
            ctx.globalAlpha =
                0.3;
            lmfr(x1, y1, x2, y2);
            DOQuad_active = DOQuad_i;
            DOQuad_i++;
            return true;
        }
        DOQuad_i++;
    }
    return false;
}
var enabletrace =
    true;
var ConsoleTraceMessages =
    new Array();

function
ConsoleTace(txt) {
    ConsoleTraceMessages.push(txt);
    if (ConsoleTraceMessages.length > 4) ConsoleTraceMessages.shift();
}
NewNote(liCGIOOll, note_passive);
var last_time_mili = 0;

function
Render() {
    if (getTimer() > last_save_time + 1000 * 60 * 45) {
        last_save_time =
            getTimer() + 1000 * 60 * 45;
        if (ActionArray.length > 30) switch (~~(Math.random() * 8)) {
            case 0:
                NewNote(llOGlOGil, note_passive);
                break;
            case 1:
                NewNote(lICOlCOil, note_passive);
                break;
            case 2:
                NewNote(llCGiCGil, note_passive);
                break;
            case 3:
                NewNote(licDIcDIl, note_passive);
                break;
            case 4:
                NewNote(llcGiCOIl, note_passive);
                break;
            case 5:
                NewNote(llOGiODIl, note_passive);
                break;
            case 6:
                NewNote(licOiCGll, note_passive);
                break;
            case 7:
                NewNote(lIcOlcDIl, note_passive);
                break;
        }
    }
    var ddate =
        new Date();
    var time_mili =
        ddate.getTime();
    var time_mili_delta =
        time_mili - last_time_mili;
    last_time_mili =
        time_mili;
    var quick_pick_canover =
        true;
    DOQuad_i = 0;
    var curs =
        lICDlCDIl;
    last_title_density =
        title_density;
    title_density = 0;
    if (space) {
        if (alt) {
            curs =
                liCOiODil;
        } else if (ctrl) {
            curs =
                llCGicGll;
        } else {
            if (m_drag_screen) curs =
                lIOGlOOll;
            else curs =
                liOGICDIl;
        }
    }
    ctx.globalAlpha =
        1;
    UpdateStars();
    if (THEME === THEME_BLUE) ctx.fillStyle =
        lIcGlOOIl;
    else ctx.fillStyle =
        llCGIcGil;
    lmfr(0, 0, lsu, lsv);
    if (SHOW_TEXTURES) {
        var tex =
            '1';
        var tex_found =
            false;
        var scale =
            1;
        for (var i =
                0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._class === llcDIl) {
                    if (!tex_found)
                        if (es[i].pm.mark === licGlcDil) {
                            tex =
                                es[i].pm.forteam;
                            tex_found =
                                true;
                        } if (es[i].pm.mark === licDiOGIl) {
                        scale =
                            es[i].pm.forteam / 100;
                    }
                } if (CACHED_SKY[tex] != undefined)
            if (CACHED_SKY[tex].loaded) {
                MyDrawImage(CACHED_SKY[tex], 0, 0, lsu, lsv);
                var cx =
                    s2w_x(lsu * 0.5);
                var cy =
                    s2w_y(lsv * 0.5);
                ctx.globalAlpha =
                    0.25;
                MyDrawImage(CACHED_SKY[tex], w2s_x(cx) - w2s_w(800 * 0.5 / scale), w2s_y(cy) - w2s_h(400 * 0.5 / scale), w2s_w(800 / scale), w2s_h(400 / scale));
                ctx.globalAlpha =
                    1;
            }
    }
    if (GRID_ALPHA > 0) {
        if (THEME !== THEME_DARK) ctx.fillStyle =
            liCGiCl;
        else ctx.fillStyle =
            lIcDiODll;
        lg(10, 0.08 * GRID_ALPHA);
        lg(100, 0.32 * GRID_ALPHA);
        lg(300, 0.64 * GRID_ALPHA);
        ctx.globalAlpha =
            GRID_ALPHA * 0.7;
        lmfr(0, w2s_y(0), lsu, 1);
        lmfr(w2s_x(0), 0, 1, lsv);
    }
    var selects = 0;
    var select_last = -1;
    var lhu = true;
    for (i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].selected) {
                selects++;
                select_last = i;
            } if (selects == 1) {
        if (es[select_last].hit(true) != false) lhu = false;
    } else if (selects > 1) {
        for (i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._isphysical)
                    if (es[i].selected)
                        if (es[i].hit(false)) lhu = false;
    }
    if (active_tool != llCGiCDil) selects = 0;
    var obviouse_sel = -1;
    if (lhu || k_shift) {
        var i =
            es.length - 1;
        i =
            (selects == 1 && k_shift) ? select_last : 0;
        for (var c = 0; c < es.length; c++) {
            i--;
            if (i < 0) i =
                es.length - 1;
            if (es[i].exists)
                if (MatchLayer(es[i]))
                    if (es[i]._isphysical)
                        if (es[i].hit(false)) {
                            obviouse_sel = i;
                            break;
                        }
        }
    } {
        for (i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._isphysical) {
                    var relative_alpha =
                        MatchLayer(es[i]) ? 1 : 0.3;
                    if (SHOW_CONNECTIONS)
                        if (es[i].selected) {
                            for (property in es[i].pm)
                                if (property != lICOicl) {
                                    var value =
                                        es[i].pm[property];
                                    if (typeof value == lIcGIOl)
                                        if (value.length > 1)
                                            if (value.charAt(0) === llOOiCOIl) {
                                                for (var i2 =
                                                        0; i2 < es.length; i2++)
                                                    if (es[i2].exists)
                                                        if (es[i2].pm.uid === value) {
                                                            ctx.globalAlpha =
                                                                relative_alpha * 1;
                                                            ctx.strokeStyle =
                                                                licDICOIl;
                                                            ctx.lineWidth =
                                                                1;
                                                            ctx.setLineDash([4, 4]);
                                                            var x1 = w2s_x(es[i].pm.x);
                                                            var y1 = w2s_y(es[i].pm.y);
                                                            if (es[i]._isresizable) {
                                                                x1 +=
                                                                    w2s_w(es[i].pm.w) * 0.5;
                                                                y1 +=
                                                                    w2s_h(es[i].pm.h) * 0.5;
                                                            }
                                                            var x2 = w2s_x(es[i2].pm.x);
                                                            var y2 = w2s_y(es[i2].pm.y);
                                                            if (es[i2]._isresizable) {
                                                                x2 +=
                                                                    w2s_w(es[i2].pm.w) * 0.5;
                                                                y2 +=
                                                                    w2s_h(es[i2].pm.h) * 0.5;
                                                            }
                                                            ctx.beginPath();
                                                            ctx.moveTo(x1, y1);
                                                            ctx.lineTo(x2, y2);
                                                            ctx.stroke();
                                                        }
                                            }
                                } for (var i2 =
                                    0; i2 < es.length; i2++)
                                if (es[i2].exists) {
                                    for (property in es[i2].pm)
                                        if (property != lICOicl) {
                                            var value =
                                                es[i2].pm[property];
                                            if (value === es[i].pm.uid) {
                                                ctx.globalAlpha =
                                                    relative_alpha * 1;
                                                ctx.strokeStyle =
                                                    licDlODl;
                                                ctx.lineWidth =
                                                    1;
                                                ctx.setLineDash([4, 4]);
                                                var x1 = w2s_x(es[i].pm.x);
                                                var y1 = w2s_y(es[i].pm.y);
                                                if (es[i]._isresizable) {
                                                    x1 +=
                                                        w2s_w(es[i].pm.w) * 0.5;
                                                    y1 +=
                                                        w2s_h(es[i].pm.h) * 0.5;
                                                }
                                                var x2 = w2s_x(es[i2].pm.x);
                                                var y2 = w2s_y(es[i2].pm.y);
                                                if (es[i2]._isresizable) {
                                                    x2 +=
                                                        w2s_w(es[i2].pm.w) * 0.5;
                                                    y2 +=
                                                        w2s_h(es[i2].pm.h) * 0.5;
                                                }
                                                ctx.beginPath();
                                                ctx.moveTo(x1, y1);
                                                ctx.lineTo(x2, y2);
                                                ctx.stroke();
                                            }
                                        }
                                }
                        } if (es[i]._isresizable) {
                        var x1 = w2s_x(es[i].pm.x);
                        var x2 = w2s_w(es[i].pm.w);
                        var y1 = w2s_y(es[i].pm.y);
                        var y2 = w2s_h(es[i].pm.h);
                        ctx.globalAlpha =
                            relative_alpha * 0.2;
                        if (es[i]._class == llOOIcl) {
                            ctx.fillStyle =
                                liOl;
                            if (SHOW_TEXTURES) {
                                ctx.globalAlpha =
                                    relative_alpha;
                                ctx.fillStyle =
                                    lICGlODIl;
                            }
                        }
                        if (es[i]._class == liCOlCl) {
                            ctx.fillStyle =
                                lICGlODIl;
                            if (!(es[i].pm.vis == 1 || es[i].pm.vis == true || es[i].pm.vis == licGICl)) ctx.globalAlpha =
                                relative_alpha * 0.05;
                        }
                        if (es[i]._class == lICGIcl) {
                            if (es[i].pm.damage > 0) {
                                ctx.globalAlpha =
                                    relative_alpha * 0.81;
                                ctx.fillStyle =
                                    llcGIcGil;
                            } else {
                                ctx.globalAlpha =
                                    relative_alpha * 0.24;
                                ctx.fillStyle =
                                    liCDIOOll;
                            }
                        }
                        if (es[i]._class == lICGicl) ctx.fillStyle =
                            lIcOiODil;
                        if (es[i]._class == liOOlOl) ctx.fillStyle =
                            lIcGiODll;
                        if (es[i]._class == lIcOIcl) {
                            var image_drawn =
                                false;
                            if (special_values_table[llCOlcl][es[i].pm.m] == undefined) ServerRequest(llOGIOOl + llCOlcl + lIODiCOl + es[i].pm.m, lIcOiOOl);
                            if (SHOW_TEXTURES) {
                                if (CACHED_BGS[es[i].pm.m] != undefined)
                                    if (CACHED_BGS[es[i].pm.m].loaded) {
                                        ctx.globalAlpha =
                                            relative_alpha;
                                        var img =
                                            CACHED_BGS[es[i].pm.m];
                                        var xx_from =
                                            Math.floor((Math.max(es[i].pm.x, dis_from_x) - es[i].pm.u) / img.width) * img.width + es[i].pm.u;
                                        var xx_to =
                                            Math.ceil((Math.min(es[i].pm.x, dis_to_x) - es[i].pm.u + es[i].pm.w) / img.width) * img.width + es[i].pm.u;
                                        var yy_from =
                                            Math.floor((Math.max(es[i].pm.y, dis_from_y) - es[i].pm.v) / img.height) * img.height + es[i].pm.v;
                                        var yy_to =
                                            Math.ceil((Math.min(es[i].pm.y, dis_to_y) - es[i].pm.v + es[i].pm.h) / img.height) * img.height + es[i].pm.v;
                                        var x2b =
                                            w2s_w(img.width);
                                        var y2b =
                                            w2s_h(img.height);
                                        ctx.save();
                                        ctx.beginPath();
                                        ctx.moveTo(x1, y1);
                                        ctx.lineTo(x1 + x2, y1);
                                        ctx.lineTo(x1 + x2, y1 + y2);
                                        ctx.lineTo(x1, y1 + y2);
                                        ctx.closePath();
                                        ctx.clip();
                                        ctx.translate(w2s_x(0), w2s_y(0));
                                        ctx.scale(w2s_x(1) - w2s_x(0), w2s_y(1) - w2s_y(0));
                                        let u =
                                            es[i].pm.u || 0;
                                        let v =
                                            es[i].pm.v || 0;
                                        ctx.translate(u, v);
                                        if (!img.tiled_pattern) img.tiled_pattern =
                                            ctx.createPattern(img, liODl);
                                        ctx.fillStyle =
                                            img.tiled_pattern;
                                        ctx.fillRect(s2w_x(0) - u, s2w_y(0) - v, s2w_w(lsu), s2w_h(lsv));
                                        ctx.restore();
                                        image_drawn =
                                            true;
                                    }
                            }
                            ctx.globalAlpha =
                                relative_alpha * 0.1;
                            ctx.fillStyle =
                                lICGlODIl;
                            if (es[i].pm.c != undefined)
                                if (es[i].pm.c.length == 7) {
                                    if (image_drawn) {
                                        var old_comp =
                                            ctx.globalCompositeOperation;
                                        ctx.globalCompositeOperation =
                                            licGlCGIl;
                                        ctx.globalAlpha =
                                            relative_alpha;
                                        ctx.fillStyle =
                                            es[i].pm.c;
                                        lmfr(x1, y1, x2, y2);
                                        ctx.globalCompositeOperation =
                                            llCGicOIl;
                                        if (x2 > 0 && y2 > 0) {
                                            ctx.drawImage(ctx.canvas, x1, y1, x2, y2, x1, y1, x2, y2);
                                            ctx.globalAlpha =
                                                0;
                                        } else {
                                            ctx.globalAlpha =
                                                relative_alpha * 1;
                                            ctx.fillStyle =
                                                llcDicl;
                                        }
                                        ctx.globalCompositeOperation =
                                            old_comp;
                                    } else {
                                        ctx.globalAlpha =
                                            relative_alpha * 0.22;
                                        ctx.fillStyle =
                                            es[i].pm.c;
                                    }
                                }
                        }
                        lmfr(x1, y1, x2, y2);
                        ctx.globalAlpha =
                            relative_alpha * 1;
                        if (es[i]._class == llOOIcl) {
                            ctx.fillStyle =
                                liOl;
                            if (SHOW_TEXTURES) ctx.fillStyle =
                                llcGICGil;
                        }
                        if (es[i]._class == liCOlCl) {
                            ctx.fillStyle =
                                lICGlODIl;
                        }
                        if (es[i]._class == lICGIcl) ctx.fillStyle =
                            llcOiODll;
                        if (es[i]._class == lICGicl) {
                            ctx.globalAlpha =
                                relative_alpha * 0.5;
                            ctx.fillStyle =
                                lIODiCDIl;
                        }
                        if (es[i]._class == liOOlOl) ctx.fillStyle =
                            liCGlcOIl;
                        if (es[i]._class == lIcOIcl) {
                            ctx.globalAlpha =
                                relative_alpha * 0.3;
                            ctx.fillStyle =
                                llCDiCDll;
                        }
                        ldb(x1, y1, x2, y2);
                        if (es[i]._class == lICGicl)
                            if (es[i].pm.use_on == 1 || es[i].pm.use_on == 9 || es[i].pm.use_on == 10) {
                                ctx.globalAlpha =
                                    relative_alpha * 0.5;
                                MyDrawImage(es[i].pm.use_on == 1 ? img_region : (es[i].pm.use_on == 9 ? img_region_red : img_region_blue), w2s_x(es[i].pm.x + Math.round(es[i].pm.w / 2 - 41 / 2)), w2s_y(es[i].pm.y + Math.round(es[i].pm.h / 2 - 10 - 31 / 2)), w2s_w(41), w2s_h(31));
                            }
                    } else {
                        if (es[i]._class == lIOOl || es[i]._class == liCGl || es[i]._class == liCOll || es[i]._class == llcGil || es[i]._class == lICDll || es[i]._class == liCGil || es[i]._class == llcDIl || es[i]._class == lICOil || es[i]._class == lIOOIl || es[i]._class == lIcGll || es[i]._class == llCOIl || es[i]._class == lIcOil) {
                            ctx.globalAlpha =
                                relative_alpha * 1;
                            var will_rotate_by =
                                0;
                            var will_scalex_by =
                                1;
                            var will_scaley_by =
                                1;
                            if (es[i]._class == lIcGll) {
                                will_rotate_by =
                                    (es[i].pm.r / 180 * Math.PI) || 0;
                                will_scalex_by =
                                    (es[i].pm.sx !== undefined) ? es[i].pm.sx : 1;
                                will_scaley_by =
                                    (es[i].pm.sy !== undefined) ? es[i].pm.sy : 1;
                            }
                            if (will_rotate_by != 0 || will_scalex_by != 1 || will_scaley_by != 1) {
                                ctx.save();
                                var pos_lo_x =
                                    w2s_x(es[i].pm.x);
                                var pos_lo_y =
                                    w2s_y(es[i].pm.y);
                                ctx.translate(pos_lo_x, pos_lo_y);
                                ctx.rotate(will_rotate_by);
                                ctx.scale(will_scalex_by, will_scaley_by);
                                ctx.translate(-pos_lo_x, -pos_lo_y);
                            }
                            var this_img_class =
                                ThinkOfOffsetClass(es[i]._class, es[i]);
                            var image_drawn =
                                false;
                            if (es[i]._class == lIcGll) {
                                if (es[i].pm.model != '0')
                                    if (special_values_table[llODIcl][es[i].pm.model] == undefined) ServerRequest(llOGIOOl + llODIcl + lIODiCOl + es[i].pm.model, lIcOiOOl);
                                if (CACHED_DECORS[es[i].pm.model] != undefined)
                                    if (CACHED_DECORS[es[i].pm.model].loaded)
                                        if (!CACHED_DECORS[es[i].pm.model].native) {
                                            var x1 =
                                                w2s_x(es[i].pm.x + es[i].pm.u);
                                            var y1 =
                                                w2s_y(es[i].pm.y + es[i].pm.v);
                                            var x2 =
                                                w2s_w(CACHED_DECORS[es[i].pm.model].width);
                                            var y2 =
                                                w2s_h(CACHED_DECORS[es[i].pm.model].height);
                                            MyDrawImage(CACHED_DECORS[es[i].pm.model], x1, y1, x2, y2);
                                            image_drawn =
                                                true;
                                        }
                            }
                            if (es[i].pm.side != -1) {
                                var x1 =
                                    w2s_x(es[i].pm.x + lo_x[this_img_class]);
                                var y1 =
                                    w2s_y(es[i].pm.y + lo_y[this_img_class]);
                                var x2 =
                                    w2s_w(lo_w[this_img_class]);
                                var y2 =
                                    w2s_h(lo_h[this_img_class]);
                                if (es[i]._class == lIOOl || es[i]._class == liCGl) {
                                    MyDrawImage(img_chars_full[es[i].pm.char], w2s_x(es[i].pm.x - 36), w2s_y(es[i].pm.y - 104), w2s_w(110), w2s_h(130));
                                } else {
                                    if (!image_drawn) MyDrawImage(img_decide(es[i]), x1, y1, x2, y2);
                                }
                            } else {
                                var x1 =
                                    w2s_x(es[i].pm.x - lo_x[this_img_class]);
                                var y1 =
                                    w2s_y(es[i].pm.y + lo_y[this_img_class]);
                                var x2 =
                                    w2s_w(-lo_w[this_img_class]);
                                var y2 =
                                    w2s_h(lo_h[this_img_class]);
                                ctx.save();
                                ctx.translate(2 * (x1) + x2, 0);
                                ctx.scale(-1, 1);
                                if (es[i]._class == lIOOl || es[i]._class == liCGl) {
                                    MyDrawImage(img_chars_full[es[i].pm.char], w2s_x(es[i].pm.x - 36), w2s_y(es[i].pm.y - 104), w2s_w(110), w2s_h(130));
                                } else {
                                    if (!image_drawn) MyDrawImage(img_decide(es[i]), x1, y1, x2, y2);
                                }
                                ctx.restore();
                            }
                            var this_class =
                                ThinkOfBBoxClass(es[i]._class, es[i]);
                            y1 =
                                w2s_y(es[i].pm.y + bo_y[this_class]);
                            y2 =
                                w2s_h(bo_h[this_class]);
                            if (es[i].pm.side != -1) {
                                x1 =
                                    w2s_x(es[i].pm.x + bo_x[this_class]);
                                x2 =
                                    w2s_w(bo_w[this_class]);
                            } else {
                                x1 =
                                    w2s_x(es[i].pm.x - bo_x[this_class]);
                                x2 =
                                    w2s_w(-bo_w[this_class]);
                                x1 += x2;
                                x2 = -x2;
                            }
                            if (will_rotate_by != 0 || will_scalex_by != 1 || will_scaley_by != 1) {
                                ctx.restore();
                            }
                            ctx.globalAlpha =
                                relative_alpha * 0.1;
                            ctx.fillStyle =
                                lICGlODIl;
                            ldb(x1, y1, x2, y2);
                        }
                    }
                }
    }
    var font_time =
        0;
    for (i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i]._isphysical) {
                if (es[i]._isresizable) {
                    var x1 = w2s_x(es[i].pm.x);
                    var x2 = w2s_w(es[i].pm.w);
                    var y1 = w2s_y(es[i].pm.y);
                    var y2 = w2s_h(es[i].pm.h);
                } else {
                    var this_class =
                        ThinkOfBBoxClass(es[i]._class, es[i]);
                    var y1 =
                        w2s_y(es[i].pm.y + bo_y[this_class]);
                    var y2 =
                        w2s_h(bo_h[this_class]);
                    if (es[i].pm.side != -1) {
                        var x1 =
                            w2s_x(es[i].pm.x + bo_x[this_class]);
                        var x2 =
                            w2s_w(bo_w[this_class]);
                    } else {
                        var x1 =
                            w2s_x(es[i].pm.x - bo_x[this_class]);
                        var x2 =
                            w2s_w(-bo_w[this_class]);
                        x1 += x2;
                        x2 = -x2;
                    }
                }
                if (es[i].selected) {
                    ctx.globalAlpha =
                        0.2;
                    ctx.fillStyle =
                        selgrd2;
                    lmfr(x1, y1, x2, y2);
                }
                x1 -= 2;
                y1 -= 2;
                x2 += 4;
                y2 += 4;
                if (es[i].selected) {
                    ctx.globalAlpha =
                        1;
                    ctx.fillStyle =
                        liOl;
                    MyDrawSelection(x1, y1, x2, y2);
                }
                if (!space)
                    if (!quick_pick)
                        if (obviouse_sel == i || ((ctrl || alt || m_drag_selection) && (es[i].hit(false) || es[i].hitSelect())))
                            if (MatchLayer(es[i])) {
                                ctx.fillStyle =
                                    selgrd3;
                                if (ctrl) ctx.fillStyle =
                                    lICDIOOil;
                                else if (alt) ctx.fillStyle =
                                    lIOOlOOil;
                                ctx.globalAlpha =
                                    0.5;
                                ldb(x1, y1, x2, y2);
                            } x1 += 2;
                y1 += 2;
                x2 -= 4;
                y2 -= 4;
                var can_qp =
                    quick_pick && lqpc.indexOf(es[i]._class) != -1;
                if (can_qp) {
                    ctx.globalAlpha =
                        0.75 - Math.sin(time_mili / 100) / 4;
                    var size =
                        32 - 5 + Math.sin(time_mili / 100) * 5;
                    var over =
                        false;
                    if (quick_pick_canover) {
                        if (quick_pick_fake_over == i) over = true;
                        else over =
                            Math.sqrt(Math.pow(x1 + x2 / 2 - mouse_x, 2) + Math.pow(y1 + y2 / 2 - mouse_y, 2)) < 20 * quick_pick_hit_scale;
                    }
                    if (over && quick_pick_canover) quick_pick_canover =
                        false;
                    MyDrawImage(over ? img_quickpick2 : img_quickpick, x1 + x2 / 2 - size, y1 + y2 / 2 - size, size * 2, size * 2);
                    need_redraw = true;
                }
                if (es[i].pm.uid != undefined)
                    if (MatchLayer(es[i]) || can_qp) {
                        if (ENABLE_TEXT) {
                            var capx =
                                x1 + x2 / 2;
                            var capy =
                                y1 + y2 / 2;
                            if (capx < -100) continue;
                            if (capx > lsu) continue;
                            if (capy < -100) continue;
                            if (capy > lsv) continue;
                            if (ENABLE_SHADOWS) {
                                ctx.shadowColor =
                                    llOGicOIl;
                                ctx.shadowBlur =
                                    2;
                                ctx.shadowOffsetX =
                                    1;
                                ctx.shadowOffsetY =
                                    1;
                            }
                            var gothit =
                                (!can_qp && (i == obviouse_sel || (es[i].selected && es[i].hit(false)))) || (can_qp && (over));
                            ctx.font =
                                lIcGiOOIl;
                            var fillText =
                                es[i].pm.uid;
                            var dim =
                                ctx.measureText(fillText);
                            dim.height =
                                10;
                            if (gothit) dim.height =
                                12;
                            if (mouse_x > capx - 30)
                                if (mouse_x < capx + 30)
                                    if (mouse_y > capy - 30)
                                        if (mouse_y < capy + 30) {
                                            title_density++;
                                        } ctx.globalAlpha =
                                1;
                            if (last_title_density > 1 && !gothit) {
                                var di =
                                    Math.sqrt(Math.pow(mouse_x - capx, 2) + Math.pow(mouse_y - capy, 2));
                                if (di < 60) {
                                    if (!es[i].selected) {
                                        capx =
                                            capx - (mouse_x - capx) * Math.pow((60 - di) / 60, 2) * (4 + Math.min(6, last_title_density * 0.1));
                                        capy =
                                            capy - (mouse_y - capy) * Math.pow((60 - di) / 60, 2) * (4 + Math.min(6, last_title_density * 0.1));
                                        if (last_title_density > 1) ctx.globalAlpha =
                                            Math.max(0.4, 1 - last_title_density * 0.1);
                                    } else {
                                        ctx.globalAlpha =
                                            Math.max(0.3, 1 / last_title_density);
                                    }
                                }
                            }
                            var x3 = Math.round(capx - dim.width / 2);
                            var y3 = Math.round(capy - dim.height / 2);
                            if (!ENABLE_SHADOWS) {
                                ctx.fillStyle =
                                    liOOICGll;
                                ctx.fillRect(x3 - 2, y3 - 2, dim.width + 4, dim.height + 4);
                                ctx.fillRect(x3 - 4, y3 - 4, dim.width + 8, dim.height + 8);
                            }
                            ctx.fillStyle =
                                liOl;
                            if (gothit) ctx.fillStyle =
                                liCGlODll;
                            if (es[i].selected) ctx.fillStyle =
                                lIcl;
                            var tim =
                                new Date().getTime();
                            ctx.fillText(fillText, x3, y3 + 8 + (dim.height - 10) / 2);
                            font_time +=
                                new Date().getTime() - tim;
                            if (ENABLE_SHADOWS) {
                                ctx.shadowColor =
                                    liCOlCGIl;
                                ctx.shadowBlur =
                                    0;
                                ctx.shadowOffsetX =
                                    0;
                                ctx.shadowOffsetY =
                                    0;
                            }
                        }
                    }
            } if (font_time > 20) {
        ENABLE_SHADOWS =
            false;
    }
    if (check_mode) {
        ctx.globalAlpha =
            1;
        need_redraw = true;
        var w =
            w2s_w(1);
        for (var i = 0; i < waypoints.length; i++) {
            ctx.globalAlpha =
                1;
            var x =
                w2s_x(waypoints[i].x);
            var y =
                w2s_y(waypoints[i].y);
            ctx.beginPath();
            ctx.arc(x, y, w * 6, 0, 2 * Math.PI, false);
            if (waypoints[i].spawn_dm) {
                if (waypoints[i].spawn_coop) {
                    ctx.fillStyle =
                        llCOIcGIl;
                    ctx.strokeStyle =
                        llCGlcDIl;
                } else {
                    ctx.fillStyle =
                        llcOlCDil;
                    ctx.strokeStyle =
                        llODICOil;
                }
            } else if (waypoints[i].spawn_coop) {
                ctx.fillStyle =
                    llcOicDll;
                ctx.strokeStyle =
                    liCGiCOll;
            } else {
                if (waypoints[i].damage > 0) {
                    ctx.fillStyle =
                        liCGlcGIl;
                    ctx.strokeStyle =
                        lIOOlCDll;
                } else {
                    ctx.fillStyle =
                        lIcGiCOl;
                    ctx.strokeStyle =
                        liCGlcGIl;
                }
            }
            ctx.fill();
            ctx.lineWidth =
                w * 2;
            ctx.stroke();
            ctx.fillStyle =
                lIODlOl;
            lmfr(x - 1, y - 10, 2, -1 - waypoints[i].risk_level_dm * w * 2);
            ctx.globalAlpha =
                waypoints[i].risk_level_dm / 150;
            ctx.fillStyle =
                llcDicl;
            lmfr(x - 1, y - 10, 2, -1 - waypoints[i].risk_level_dm * w * 2);
        }
        ctx.globalAlpha =
            1;
        ctx.lineWidth =
            w * 2;
        ctx.strokeStyle =
            liCGiCl;
        var perc =
            (time_mili / 1000) % 1;
        for (var i = 0; i < connections.length; i++) {
            var x1 =
                w2s_x(waypoints[connections[i].b].x * perc + waypoints[connections[i].a].x * (1 - perc));
            var y1 =
                w2s_y(waypoints[connections[i].b].y * perc + waypoints[connections[i].a].y * (1 - perc));
            if (connections[i].method == CONNECTION_WALK) ctx.fillStyle =
                liCGiCl;
            else if (connections[i].method == CONNECTION_SAFEFALL) ctx.fillStyle =
                lIODlOl;
            else if (connections[i].method == CONNECTION_JUMP) ctx.fillStyle =
                llOGlOl;
            else if (connections[i].method == CONNECTION_RUN_JUMP) ctx.fillStyle =
                licDlcGll;
            else if (connections[i].method == CONNECTION_JUMP_SWORDS) ctx.fillStyle =
                llcGicGll;
            else if (connections[i].method == CONNECTION_JUMP_BOOST) ctx.fillStyle =
                llcDicl;
            else if (connections[i].method == CONNECTION_UNSAFE_FALL) ctx.fillStyle =
                llcOlCDil;
            else ctx.fillStyle =
                lIcDICGll;
            lmfr(x1 - 1, y1 - 1, 2, 2);
        }
    }
    if (!paint_draw_mode)
        if (selects == 1)
            if (!ldis)
                if (!ctrl && !alt)
                    if (!space)
                        if (!k_shift)
                            if (es[select_last]._isresizable) {
                                i = select_last;
                                var h = true;
                                if (!ldrs) h = es[i].hit(true);
                                if (h != false)
                                    if (es[i].exists)
                                        if (MatchLayer(es[i])) {
                                            ctx.fillStyle =
                                                liOl;
                                            if (DOQuad(es[i].pm.x - borderwidth, es[i].pm.y - borderwidth, borderwidth * 2, borderwidth * 2)) curs =
                                                llcGIcDll;
                                            if (DOQuad(es[i].pm.x + es[i].pm.w - borderwidth, es[i].pm.y - borderwidth, borderwidth * 2, borderwidth * 2)) curs =
                                                lIOOIcGil;
                                            if (DOQuad(es[i].pm.x - borderwidth, es[i].pm.y + es[i].pm.h - borderwidth, borderwidth * 2, borderwidth * 2)) curs =
                                                lIOOIcGil;
                                            if (DOQuad(es[i].pm.x + es[i].pm.w - borderwidth, es[i].pm.y + es[i].pm.h - borderwidth, borderwidth * 2, borderwidth * 2)) curs =
                                                llcGIcDll;
                                            if (DOQuad(es[i].pm.x + borderwidth, es[i].pm.y - borderwidth, es[i].pm.w - borderwidth * 2, borderwidth * 2)) curs =
                                                lIcGicDil;
                                            if (DOQuad(es[i].pm.x + borderwidth, es[i].pm.y + es[i].pm.h - borderwidth, es[i].pm.w - borderwidth * 2, borderwidth * 2)) curs =
                                                lIcGicDil;
                                            if (DOQuad(es[i].pm.x - borderwidth, es[i].pm.y + borderwidth, borderwidth * 2, es[i].pm.h - borderwidth * 2)) curs =
                                                lIcOIcGll;
                                            if (DOQuad(es[i].pm.x + es[i].pm.w - borderwidth, es[i].pm.y + borderwidth, borderwidth * 2, es[i].pm.h - borderwidth * 2)) curs =
                                                lIcOIcGll;
                                        }
                            } if (active_tool != llCGiCDil) {
        ctx.globalAlpha =
            1;
        MyDrawImage(img_put, w2s_x(Math.round(lmwa / GRID_SNAPPING) * GRID_SNAPPING) - 15, w2s_y(Math.round(lmwb / GRID_SNAPPING) * GRID_SNAPPING) - 15, 31, 31);
    }
    if (m_drag_selection)
        if (!lmd) {
            var x1 = w2s_x(Math.min(lmdrwa, lmwa));
            var x2 = w2s_w(Math.abs(lmdrwa - lmwa));
            var y1 = w2s_y(Math.min(lmdrwb, lmwb));
            var y2 = w2s_h(Math.abs(lmdrwb - lmwb));
            ctx.fillStyle =
                liOl;
            if (ctrl) ctx.fillStyle =
                lICDIOOil;
            else if (alt) ctx.fillStyle =
                lIOOlOOil;
            ctx.globalAlpha =
                0.1;
            lmfr(x1, y1, x2, y2);
            ctx.globalAlpha =
                0.8;
            lmfr(x1, y1, 1, y2);
            lmfr(x1 + x2, y1, 1, y2);
            lmfr(x1, y1, x2, 1);
            lmfr(x1, y1 + y2, x2, 1);
        } if (enabletrace) {
        ctx.font =
            lIcGiOOIl;
        ctx.globalAlpha =
            1;
        ctx.fillStyle =
            liOl;
        var from_y =
            15;
        if (ConsoleTraceMessages.length * 10 + 15 > lsv - 15) from_y =
            lsv - 15 - ConsoleTraceMessages.length * 10;
        for (var i = 0; i < ConsoleTraceMessages.length; i++) {
            var fillText =
                ConsoleTraceMessages[i];
            ctx.fillText(fillText, 15, from_y + i * 10);
        }
    }
    if (!space) {
        var offs =
            22;
        if (ctrl) {
            ctx.drawImage(img_ctrl, mouse_x + 12, mouse_y + offs);
            offs += 8;
        }
        if (alt) {
            ctx.drawImage(img_alt, mouse_x + 12, mouse_y + offs);
            offs += 8;
        }
        if (k_shift) ctx.drawImage(img_shift, mouse_x + 12, mouse_y + offs);
    }
    var parts_total =
        ActionArray.length;
    if (history_runer_timer > 0)
        if (parts_total > 0) {
            var width_each =
                2 * Math.PI / (parts_total + 1);
            var power =
                1 - Math.pow(1 - history_runer_timer, 4);
            ctx.lineWidth =
                10;
            ctx.strokeStyle =
                liOl;
            for (var xx = 0; xx < parts_total; xx++) {
                if (xx == ActionCurrent) ctx.globalAlpha =
                    power * 0.3;
                else ctx.globalAlpha =
                    power * 0.15;
                ctx.beginPath();
                ctx.arc(mouse_x, mouse_y, 20, -width_each * xx - width_each * 0.45 - Math.PI / 2, -width_each * xx + width_each * 0.45 - Math.PI / 2);
                ctx.stroke();
            }
            history_runer_timer -= time_mili_delta * 0.0005;
            need_redraw = true;
        } if (canv.style.cursor != curs) canv.style.cursor =
        curs;
}

function
zoom_validate() {
    cx = (dis_from_x + dis_to_x) / 2;
    cy = (dis_from_y + dis_to_y) / 2;
    dis_from_x =
        cx - lsu * zoom / 2;
    dis_to_x =
        cx + lsu * zoom / 2;
    dis_from_y =
        cy - lsv * zoom / 2;
    dis_to_y =
        cy + lsv * zoom / 2;
    dis_from_x = Math.round(dis_from_x / zoom) * zoom;
    dis_to_x = Math.round(dis_to_x / zoom) * zoom;
    dis_from_y = Math.round(dis_from_y / zoom) * zoom;
    dis_to_y = Math.round(dis_to_y / zoom) * zoom;
    borderwidth =
        Math.max(3, 5 * zoom);
}

function
ResetView() {
    dis_from_x = 0;
    dis_to_x = 0;
    dis_from_y = 0;
    dis_to_y = 0;
    zoom = 1;
    zoom_validate();
}
var mouse_x = 0;
var lmwa = 0;
var mouse_y = 0;
var lmwb = 0;
var ActionArray =
    new Array();
var ActionCurrent =
    0;
var history_runer_timer = 0;
var forundo_str = lIcDICl;
var forredo_str = lIcDICl;

function
ClearUndos() {
    forundo_str =
        lIcDICl;
    forredo_str =
        lIcDICl;
    ActionArray =
        new Array();
    ActionCurrent =
        0;
}

function
lnd(str) {
    forundo_str =
        str + forundo_str;
}

function
ldn(str) {
    forredo_str +=
        str;
}

function
lfz(doredo) {
    if (forredo_str != lIcDICl || forundo_str != lIcDICl) {
        history_runer_timer = 0;
        if (ActionCurrent > 0) {
            ActionArray.splice(0, ActionCurrent);
            ActionCurrent = 0;
        }
        ActionArray.unshift({
            redo: forredo_str,
            undo: forundo_str
        });
        forredo_str = forundo_str = lIcDICl;
        if (doredo) eval(ActionArray[0].redo);
        changes_made =
            true;
    }
}

function
lcz() {
    forredo_str = forundo_str = lIcDICl;
}

function
DO_UNDO() {
    if (ActionCurrent < ActionArray.length) {
        eval(ActionArray[ActionCurrent].undo);
        ActionCurrent++;
        history_runer_timer = 1;
        need_redraw = true;
        need_GUIParams_update = true;
        NewNote(llOOlcOIl, note_passive);
    } else NewNote(llODICOIl, note_passive);
}

function
DO_REDO() {
    if (ActionCurrent > 0) {
        ActionCurrent--;
        eval(ActionArray[ActionCurrent].redo);
        history_runer_timer = 1;
        need_redraw = true;
        need_GUIParams_update = true;
        NewNote(lICOlcGll, note_passive);
    } else NewNote(licDIcOil, note_passive);
}

function
m_update(event) {
    event =
        event || window.event;
    var el =
        canv,
        pos = {
            x: 0,
            y: 0
        };
    while (el) {
        pos.x +=
            el.offsetLeft;
        pos.y +=
            el.offsetTop;
        el =
            el.offsetParent;
    }
    mouse_x =
        event.pageX - pos.x;
    mouse_y =
        event.pageY - pos.y;
    lmwa =
        s2w_x(mouse_x);
    lmwb =
        s2w_y(mouse_y);
}
var ctrl = false;
var k_shift = false;
var space = false;
var alt = false;
var mid_btn = false;
var m_drag = false;
var m_drag_x = 0;
var m_drag_y = 0;
var lmdrwa = 0;
var lmdrwb = 0;
var m_drag_screen = false;
var ldis = false;
var m_drag_selection = false;
var ldrs = false;
var ldms = lIOGlCDil;
var lmd = true;

function
m_move(e) {
    if (e != undefined) m_update(e);
    if (lmd) {
        if (Math.abs(mouse_x - m_drag_x) > GRID_SNAPPING * 0.5 || Math.abs(mouse_y - m_drag_y) > GRID_SNAPPING * 0.5) {
            lmd = false;
        }
    } else {
        if (m_drag_screen) {
            var x1, y1;
            x1 =
                s2w_w(m_drag_x - mouse_x);
            y1 =
                s2w_h(m_drag_y - mouse_y);
            m_drag_x = mouse_x;
            m_drag_y = mouse_y;
            dis_from_x += x1;
            dis_to_x += x1;
            dis_from_y += y1;
            dis_to_y += y1;
        }
        if (ldis) {
            var x1, y1;
            x1 =
                Math.round((lmwa - lmdrwa) / GRID_SNAPPING) * GRID_SNAPPING;
            y1 =
                Math.round((lmwb - lmdrwb) / GRID_SNAPPING) * GRID_SNAPPING;
            for (var i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (MatchLayer(es[i]) || paint_draw_mode)
                        if (es[i].selected)
                            if (es[i]._isphysical) {
                                es[i].pm.x += x1;
                                es[i].pm.y += y1;
                            } lmdrwa += x1;
            lmdrwb += y1;
        }
        if (ldrs) {
            var x1, y1;
            x1 =
                Math.round((lmwa - lmdrwa) / GRID_SNAPPING) * GRID_SNAPPING;
            y1 =
                Math.round((lmwb - lmdrwb) / GRID_SNAPPING) * GRID_SNAPPING;
            for (var i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (MatchLayer(es[i]) || paint_draw_mode)
                        if (es[i].selected)
                            if (es[i]._isphysical)
                                if (es[i]._isresizable) {
                                    if (ldms == licGIOOll || ldms == llCGlOGil || ldms == licGICDil) {
                                        es[i].pm.x += x1;
                                        es[i].pm.w -= x1;
                                    }
                                    if (ldms == llOOlcOll || ldms == liOGlODll || ldms == liODlcDil) {
                                        es[i].pm.w += x1;
                                    }
                                    if (ldms == licGIOOll || ldms == liCDiCOil || ldms == llOOlcOll) {
                                        es[i].pm.y += y1;
                                        es[i].pm.h -= y1;
                                    }
                                    if (ldms == licGICDil || ldms == llcDlOGil || ldms == liODlcDil) {
                                        es[i].pm.h += y1;
                                    }
                                    es[i].fixPos();
                                } lmdrwa += x1;
            lmdrwb += y1;
        }
    }
    need_redraw = true;
    UpdateOpacities();
}

function
MouseWheelScrollFunction(event) {
    var wheel =
        (event.wheelDelta) / 120 || (-event.detail / 6);
    if (wheel > 0) zoom_in(wheel);
    else zoom_out(wheel);
    zoom_validate();
    lmwa =
        s2w_x(mouse_x);
    lmwb =
        s2w_y(mouse_y);
    need_redraw = true;
    return false;
}
canv.onmousewheel =
    MouseWheelScrollFunction;
if (canv.addEventListener) {
    canv.addEventListener(liCGlCDil, MouseWheelScrollFunction, false);
    canv.addEventListener(lIcDIcOll, MouseWheelScrollFunction, false);
} else canv.attachEvent(liCOIOGll, MouseWheelScrollFunction);

function
zoom_out(wheel) {
    if (zoom < 100) {
        zoom =
            Math.min(100, (zoom - (zoom * ((wheel != null) ? wheel : -2) * 0.3)));
    }
}

function
zoom_in(wheel) {
    if (zoom > 0.1) {
        zoom =
            Math.max(0.1, zoom - (zoom * ((wheel != null) ? wheel : 2) * 0.3));
    }
}
var paint_draw_mode = false;

function
m_down(e) {
    setTimeout(function() {
        context_menu =
            false;
    }, 10);
    if (quick_pick_ignore_one_click && e.which == 1) {
        quick_pick_ignore_one_click =
            false;
        unfocusedit();
    } else {
        if (e.which == 2 || e.which == 3) mid_btn = true;
        m_update(e);
        lmd = true;
        m_drag_x =
            mouse_x;
        m_drag_y =
            mouse_y;
        lmdrwa =
            lmwa;
        lmdrwb =
            lmwb;
        m_drag = true;
        m_drag_screen = false;
        m_drag_selection = false;
        ldis = false;
        ldrs = false;
        paint_draw_mode = false;
        if (space || mid_btn) {
            m_drag_screen = true;
            if (alt) {
                zoom_out();
            } else if (ctrl) {
                zoom_in();
            }
            zoom_validate();
        } else {
            if (active_tool != llCGiCDil) {
                lcz();
                paint_draw_mode = true;
                for (var i = 0; i < es.length; i++)
                    if (es[i].exists)
                        if (es[i].selected) {
                            lnd(licGiCDil + i + llODiCGIl);
                            ldn(licGiCDil + i + liCDlcOil);
                            es[i].selected = false;
                        } var newid = es.length;
                lnd(licGiCDil + newid + llcGlcOll);
                ldn(licGiCDil + newid + licOlcGll);
                var newbie =
                    es[es.length] =
                    new E(active_tool);
                if (lICOicl in newbie.pm) {
                    newbie.pm.uid =
                        RandomizeName(newbie.pm.uid);
                }
                if (lICDICl in newbie.pm) {
                    ldn(licGiCDil + newid + licDIcGll + lmwa + lIcDlcGil);
                    ldn(licGiCDil + newid + llcDiCDil + lmwb + lIcDlcGil);
                    ldn(licGiCDil + newid + llODiCGIl);
                    ldn(licGiCDil + newid + llcGlOGil);
                    newbie.pm.x = lmwa;
                    newbie.pm.y = lmwb;
                    newbie.selected =
                        true;
                    newbie.fixPos();
                    lmdrwa =
                        newbie.pm.x;
                    lmdrwb =
                        newbie.pm.y;
                    if (newbie._isresizable) {
                        ldn(licGiCDil + newid + licDlOGIl);
                        ldn(licGiCDil + newid + llCGIOGIl);
                        newbie.pm.w = 0;
                        newbie.pm.h = 0;
                        ldrs = true;
                        ldms = liODlcDil;
                    } else {
                        ldis = true;
                    }
                }
                lfz(false);
                lnd(licGiCDil + newid + licDIcGll + lmwa + lIcDlcGil);
                lnd(licGiCDil + newid + llcDiCDil + lmwb + lIcDlcGil);
                if (newbie._isresizable) {
                    lnd(licGiCDil + newid + licDlOGIl);
                    lnd(licGiCDil + newid + llCGIOGIl);
                }
                need_GUIParams_update = true;
                UpdateGUIObjectsList();
            } else {
                var selects = 0;
                var select_last = -1;
                var lhu = true;
                for (var i = 0; i < es.length; i++)
                    if (es[i].exists)
                        if (MatchLayer(es[i]))
                            if (es[i].selected) {
                                selects++;
                                select_last = i;
                            } if (!ctrl && !alt) {
                    if (selects == 1) {
                        var h = es[select_last].hit(true);
                        if (h != false) {
                            lhu = false;
                            if (h == lIOGlCDil) {
                                lcz();
                                lnd(licGiCDil + select_last + licDIcGll + es[select_last].pm.x + lIcDlcGil);
                                lnd(licGiCDil + select_last + llcDiCDil + es[select_last].pm.y + lIcDlcGil);
                                ldis = true;
                            } else {
                                lcz();
                                lnd(licGiCDil + select_last + licDIcGll + es[select_last].pm.x + lIcDlcGil);
                                lnd(licGiCDil + select_last + llcDiCDil + es[select_last].pm.y + lIcDlcGil);
                                lnd(licGiCDil + select_last + lIODicGIl + es[select_last].pm.w + lIcDlcGil);
                                lnd(licGiCDil + select_last + lICGICDil + es[select_last].pm.h + lIcDlcGil);
                                ldrs = true;
                                ldms = h;
                            }
                            if (k_shift) {
                                lcz();
                                i = select_last - 1;
                                for (var c = 0; c < es.length; c++) {
                                    if (i < 0) i = es.length - 1;
                                    if (es[i].exists)
                                        if (MatchLayer(es[i]))
                                            if (es[i]._isphysical)
                                                if (es[i].hit(false)) {
                                                    for (i2 = 0; i2 < es.length; i2++)
                                                        if (es[i2].exists)
                                                            if (MatchLayer(es[i2]))
                                                                if (es[i2].selected) {
                                                                    lnd(licGiCDil + i2 + llODiCGIl);
                                                                    ldn(licGiCDil + i2 + liCDlcOil);
                                                                    es[i2].selected = false;
                                                                } selects = 0;
                                                    lnd(licGiCDil + i + liCDlcOil);
                                                    ldn(licGiCDil + i + llODiCGIl);
                                                    lnd(licGiCDil + i + licDIcGll + es[i].x + lIcDlcGil);
                                                    lnd(licGiCDil + i + llcDiCDil + es[i].y + lIcDlcGil);
                                                    es[i].selected = true;
                                                    need_GUIParams_update = true;
                                                    ldis = true;
                                                    ldrs = false;
                                                    lhu = false;
                                                    break;
                                                } i--;
                                }
                            }
                        }
                    } else if (selects > 1) {
                        for (var i = 0; i < es.length; i++)
                            if (es[i].exists)
                                if (MatchLayer(es[i]))
                                    if (es[i]._isphysical)
                                        if (es[i].selected) {
                                            if (es[i].hit(false)) {
                                                lhu = false;
                                                ldis = true;
                                                ldrs = false;
                                                lhu = false;
                                                lcz();
                                                for (var i2 = 0; i2 < es.length; i2++)
                                                    if (es[i2].exists)
                                                        if (MatchLayer(es[i2]))
                                                            if (es[i2]._isphysical)
                                                                if (es[i2].selected) {
                                                                    lnd(licGiCDil + i2 + licDIcGll + es[i2].x + lIcDlcGil);
                                                                    lnd(licGiCDil + i2 + llcDiCDil + es[i2].y + lIcDlcGil);
                                                                } break;
                                            }
                                        }
                    }
                    if (selects > 0)
                        if (ldis || ldrs) {
                            lcz();
                            for (var i = 0; i < es.length; i++)
                                if (es[i].exists)
                                    if (MatchLayer(es[i]))
                                        if (es[i]._isphysical)
                                            if (es[i].selected) {
                                                lnd(licGiCDil + i + licDIcGll + es[i].pm.x + lIcDlcGil);
                                                lnd(licGiCDil + i + llcDiCDil + es[i].pm.y + lIcDlcGil);
                                                if (ldrs) {
                                                    lnd(licGiCDil + i + lIODicGIl + es[i].pm.w + lIcDlcGil);
                                                    lnd(licGiCDil + i + lICGICDil + es[i].pm.h + lIcDlcGil);
                                                }
                                            }
                        }
                }
                if (lhu) {
                    if (!ctrl && !alt) {
                        lcz();
                        for (var i = 0; i < es.length; i++)
                            if (es[i].exists)
                                if (MatchLayer(es[i]))
                                    if (es[i]._isphysical) {
                                        var s =
                                            es[i].hit(false);
                                        if (s != false) {
                                            if (!es[i].selected) {
                                                for (i2 = 0; i2 < es.length; i2++)
                                                    if (es[i2].exists)
                                                        if (es[i2].selected) {
                                                            lnd(licGiCDil + i2 + llODiCGIl);
                                                            ldn(licGiCDil + i2 + liCDlcOil);
                                                            es[i2].selected = false;
                                                        } selects = 0;
                                                lnd(licGiCDil + i + licDIcGll + es[i].pm.x + lIcDlcGil);
                                                lnd(licGiCDil + i + llcDiCDil + es[i].pm.y + lIcDlcGil);
                                                lnd(licGiCDil + i + liCDlcOil);
                                                ldn(licGiCDil + i + llODiCGIl);
                                                es[i].selected = true;
                                                need_GUIParams_update = true;
                                            }
                                            ldis = true;
                                        }
                                    } lfz(false);
                    }
                    if (!ldis)
                        if (!ldrs) {
                            ldis =
                                false;
                            m_drag_selection =
                                true;
                        }
                }
            }
        }
        need_redraw = true;
    }
}

function
m_failed(e) {
    if (ldis || ldrs)
        if (!lmd) {
            for (var i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (MatchLayer(es[i]))
                        if (es[i].selected)
                            if (es[i]._isresizable) {
                                es[i].fixWidths();
                                es[i].fixPos();
                                ldn(licGiCDil + i + licDIcGll + es[i].pm.x + lIcDlcGil);
                                ldn(licGiCDil + i + llcDiCDil + es[i].pm.y + lIcDlcGil);
                                if (ldrs) {
                                    ldn(licGiCDil + i + lIODicGIl + es[i].pm.w + lIcDlcGil);
                                    ldn(licGiCDil + i + lICGICDil + es[i].pm.h + lIcDlcGil);
                                }
                            } lfz(false);
            need_GUIParams_update = true;
        } paint_draw_mode = false;
    m_drag_screen = false;
    m_drag_selection = false;
    m_drag = false;
    ldis = false;
    ldrs = false;
    alt = false;
    ctrl = false;
    k_shift = false;
    space = false;
    mid_btn = false;
    need_redraw = true;
}

function
m_up(e) {
    if (e.which == 2 || e.which == 3) mid_btn = false;
    m_update(e);
    if (m_drag_selection) {
        lcz();
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (MatchLayer(es[i])) {
                    if (ctrl) {
                        if (es[i].hitSelect()) {
                            if (!es[i].selected) {
                                lnd(licGiCDil + i + liCDlcOil);
                                ldn(licGiCDil + i + llODiCGIl);
                            }
                            es[i].selected = true;
                            need_GUIParams_update = true;
                        }
                    } else if (alt) {
                        if (es[i].hitSelect()) {
                            if (es[i].selected) {
                                lnd(licGiCDil + i + llODiCGIl);
                                ldn(licGiCDil + i + liCDlcOil);
                            }
                            es[i].selected = false;
                            need_GUIParams_update = true;
                        }
                    } else {
                        var set = es[i].hitSelect();
                        if (es[i].selected != set) {
                            lnd(licGiCDil + i + llODICDil + es[i].selected + lIcDlcGil);
                            ldn(licGiCDil + i + llODICDil + set + lIcDlcGil);
                        }
                        need_GUIParams_update =
                            need_GUIParams_update || es[i].selected != set;
                        es[i].selected = set;
                    }
                } lfz(false);
    }
    if (ldis)
        if (!lmd) {
            for (var i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (MatchLayer(es[i]))
                        if (es[i].selected)
                            if (es[i]._isphysical) {
                                es[i].fixPos();
                                ldn(licGiCDil + i + licDIcGll + es[i].pm.x + lIcDlcGil);
                                ldn(licGiCDil + i + llcDiCDil + es[i].pm.y + lIcDlcGil);
                            } lfz(false);
            need_GUIParams_update = true;
        } ldis = false;
    m_drag_screen = false;
    m_drag_selection = false;
    m_drag = false;
    paint_draw_mode = false;
    if (ldrs) {
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i].selected)
                    if (MatchLayer(es[i]))
                        if (es[i]._isphysical)
                            if (es[i]._isresizable) {
                                es[i].fixWidths();
                                es[i].fixPos();
                                ldn(licGiCDil + i + licDIcGll + es[i].pm.x + lIcDlcGil);
                                ldn(licGiCDil + i + llcDiCDil + es[i].pm.y + lIcDlcGil);
                                ldn(licGiCDil + i + lIODicGIl + es[i].pm.w + lIcDlcGil);
                                ldn(licGiCDil + i + lICGICDil + es[i].pm.h + lIcDlcGil);
                            } lfz(false);
        ldrs = false;
        need_GUIParams_update = true;
    }
    need_redraw = true;
}

function
k_up(e) {
    if (OVERLAY_BLOCK) return true;
    var c =
        e.keyCode ? e.keyCode : e.charCode;
    if (!letediting) {
        if (c == 16) k_shift = false; {
            if (c == 17) ctrl = false;
        }
        if (c == 32) space = false;
        if (c == 18) alt = false;
        if (c == 87) {
            unboost_y = false;
            recalc_speed_y();
        }
        if (c == 83) {
            boost_y = false;
            recalc_speed_y();
        }
        if (c == 65) {
            unboost_x = false;
            recalc_speed_x();
        }
        if (c == 68) {
            boost_x = false;
            recalc_speed_x();
        }
        need_redraw = true;
    }
}
var boost_x = false;
var unboost_x = false;
var boost_y = false;
var unboost_y = false;

function
recalc_speed_x() {
    speed_x =
        boost_x && unboost_x ? 0 : (boost_x ? 1 : (unboost_x ? -1 : 0));
}

function
recalc_speed_y() {
    speed_y =
        boost_y && unboost_y ? 0 : (boost_y ? 1 : (unboost_y ? -1 : 0));
}

function
DeleteSelection() {
    lcz();
    for (var i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].selected)
                if (MatchLayer(es[i])) {
                    ldn(licGiCDil + i + lIcGlCGll + i + llcGlcOll);
                    lnd(licGiCDil + i + llODICDil + es[i].selected + llOGIcDIl + i + liCGlCGil + es[i].exists + lIcDlcGil);
                } lfz(true);
    need_GUIParams_update = true;
    need_redraw = true;
}

function
k_down(e) {
    if (OVERLAY_BLOCK) return true;
    var c =
        e.keyCode ? e.keyCode : e.charCode;
    if (!ignore_keys) {
        if (!letediting && e.target.nodeName != llCDICGIl) {
            if (c == 16) k_shift = true; {
                if (c == 17) ctrl = true;
            }
            if (c == 32) space = true;
            if (c == 18) alt = true;
            if (c == 87) {
                unboost_y = true;
                recalc_speed_y();
            }
            if (c == 83) {
                boost_y = true;
                recalc_speed_y();
            }
            if (c == 65) {
                unboost_x = true;
                recalc_speed_x();
            }
            if (c == 68) {
                boost_x = true;
                recalc_speed_x();
            }
            if (c == 8) {
                var to_del = false;
                for (var i = 0; i < es.length; i++)
                    if (es[i].exists)
                        if (es[i].selected)
                            if (MatchLayer(es[i])) {
                                to_del = true;
                                break;
                            } if (to_del)
                    if (confirm(lICDicOIl) == true) c = 46;
            }
            if (c == 46) {
                DeleteSelection();
            }
            if (c == 90)
                if (ctrl) {
                    DO_UNDO();
                } if (c == 89)
                if (ctrl) {
                    DO_REDO();
                } if (c == 27) {
                SetActiveTool(0);
            }
            if (c >= 48 && c <= 57) {
                var clip_slot =
                    c - 48;
                if (typeof(Storage) !== liOOIcGil) {
                    if (ctrl) {
                        CopyToClipBoard(liODlCGIl + clip_slot);
                        NewNote(lIODlCOll + clip_slot + llOGlcOIl, note_passive);
                    } else {
                        if (PasteFromClipBoard(liODlCGIl + clip_slot)) NewNote(llCOlcDll + clip_slot + llOGlcOIl, note_passive);
                        else NewNote(liCOiCOIl + clip_slot + licOIcGIl, note_passive);
                    }
                    e.preventDefault();
                } else {
                    NewNote(lIcDIOOIl, note_bad);
                }
            }
            if (ctrl) {
                if (c == 67) {
                    if (typeof(Storage) !== liOOIcGil) {
                        CopyToClipBoard(llOGlcDIl);
                        NewNote(liCOiCGil, note_passive);
                    } else {
                        NewNote(lIcDIOOIl, note_bad);
                    }
                }
                if (c == 86) {
                    if (typeof(Storage) !== liOOIcGil) {
                        if (PasteFromClipBoard(llOGlcDIl)) NewNote(liCOicGil, note_passive);
                        else NewNote(licDiOOIl, note_passive);
                    } else {
                        NewNote(lIcDIOOIl, note_bad);
                    }
                }
            } else {
                if (c == 81) {
                    expert_view = !expert_view;
                    UpdateOpacities();
                }
                if (c == 72) {
                    var range_min = 0;
                    var range_max = 0;
                    var first = true;
                    for (var i = 0; i < es.length; i++)
                        if (es[i].exists)
                            if (es[i].selected)
                                if (MatchLayer(es[i])) {
                                    if (es[i]._isresizable) {
                                        if (first) {
                                            range_min =
                                                es[i].pm.x;
                                            range_max =
                                                es[i].pm.x + es[i].pm.w;
                                            first = false;
                                        } else {
                                            if (es[i].pm.x < range_min) range_min =
                                                es[i].pm.x;
                                            if (es[i].pm.x + es[i].pm.w > range_max) range_max =
                                                es[i].pm.x + es[i].pm.w;
                                        }
                                    } else {
                                        if (first) {
                                            range_min =
                                                es[i].pm.x;
                                            range_max =
                                                es[i].pm.x;
                                            first = false;
                                        } else {
                                            if (es[i].pm.x < range_min) range_min =
                                                es[i].pm.x;
                                            if (es[i].pm.x > range_max) range_max =
                                                es[i].pm.x;
                                        }
                                    }
                                } var around =
                        (range_max + range_min) / 2;
                    for (var i = 0; i < es.length; i++)
                        if (es[i].exists)
                            if (es[i].selected)
                                if (MatchLayer(es[i])) {
                                    lnd(licGiCDil + i + licDIcGll + es[i].pm.x + lIcDlcGil);
                                    es[i].pm.x =
                                        around + (around - es[i].pm.x);
                                    ldn(licGiCDil + i + licDIcGll + around + (around - es[i].pm.x) + lIcDlcGil);
                                    if (es[i]._isresizable) {
                                        lnd(licGiCDil + i + lIODicGIl + es[i].pm.w + lIcDlcGil);
                                        es[i].pm.w = -es[i].pm.w;
                                        es[i].fixWidths();
                                        ldn(licGiCDil + i + lIODicGIl + es[i].pm.w + lIcDlcGil);
                                    } else if (es[i].pm.side != undefined) {
                                        lnd(licGiCDil + i + lIcGIcGIl + es[i].pm.side + lIcDlcGil);
                                        es[i].pm.side =
                                            es[i].pm.side == 1 ? -1 : 1;
                                        ldn(licGiCDil + i + lIcGIcGIl + es[i].pm.side + lIcDlcGil);
                                    }
                                } lfz(false);
                }
                if (c == 86) {
                    var range_min = 0;
                    var range_max = 0;
                    var first = true;
                    for (var i = 0; i < es.length; i++)
                        if (es[i].exists)
                            if (es[i].selected)
                                if (MatchLayer(es[i])) {
                                    if (es[i]._isresizable) {
                                        if (first) {
                                            range_min =
                                                es[i].pm.y;
                                            range_max =
                                                es[i].pm.y + es[i].pm.h;
                                            first = false;
                                        } else {
                                            if (es[i].pm.y < range_min) range_min =
                                                es[i].pm.y;
                                            if (es[i].pm.y + es[i].pm.h > range_max) range_max =
                                                es[i].pm.y + es[i].pm.h;
                                        }
                                    } else {
                                        if (first) {
                                            range_min =
                                                es[i].pm.y;
                                            range_max =
                                                es[i].pm.y;
                                            first = false;
                                        } else {
                                            if (es[i].pm.y < range_min) range_min =
                                                es[i].pm.y;
                                            if (es[i].pm.y > range_max) range_max =
                                                es[i].pm.y;
                                        }
                                    }
                                } var around =
                        (range_max + range_min) / 2;
                    for (var i = 0; i < es.length; i++)
                        if (es[i].exists)
                            if (es[i].selected)
                                if (MatchLayer(es[i])) {
                                    lnd(licGiCDil + i + llcDiCDil + es[i].pm.y + lIcDlcGil);
                                    es[i].pm.y =
                                        around + (around - es[i].pm.y);
                                    ldn(licGiCDil + i + llcDiCDil + around + (around - es[i].pm.y) + lIcDlcGil);
                                    if (es[i]._isresizable) {
                                        lnd(licGiCDil + i + lICGICDil + es[i].pm.h + lIcDlcGil);
                                        es[i].pm.h = -es[i].pm.h;
                                        es[i].fixWidths();
                                        ldn(licGiCDil + i + lICGICDil + es[i].pm.h + lIcDlcGil);
                                    }
                                } lfz(false);
                }
            }
            need_redraw = true;
        }
    } else {
        if (c == 13) {
            eval(dim_enter_event);
        }
        if (c == 27) {
            CancelDim();
        }
    }
}

function
CopyToClipBoard(ClipName) {
    var str = lIcDICl;
    var clipboard = new Array();
    for (var i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].selected)
                if (MatchLayer(es[i])) {
                    clipboard[clipboard.length] =
                        es[i];
                } str =
        serialize(clipboard);
    sessionStorage[ClipName] =
        str;
}

function
PasteFromClipBoard(ClipName) {
    var clipboard =
        new Object();
    if (sessionStorage[ClipName] == undefined) {
        return false;
    }
    clipboard =
        unserialize(sessionStorage[ClipName]);
    lcz();
    for (var i = 0; i < es.length; i++)
        if (es[i].exists) {
            if (es[i].selected) {
                ldn(licGiCDil + i + liCDlcOil);
                lnd(licGiCDil + i + llODiCGIl);
                es[i].selected =
                    false;
            }
        } var min_x = 0;
    var max_x = 0;
    var min_y = 0;
    var max_y = 0;
    i = 0;
    var from_obj =
        es.length;
    while (typeof(clipboard[i]) !== liOOIcGil) {
        var newparam =
            es.length;
        ldn(licGiCDil + newparam + licOlcGll);
        lnd(licGiCDil + newparam + llcGlcOll);
        es[newparam] =
            new E(clipboard[i]._class);
        for (param in clipboard[i]) {
            es[newparam][param] =
                clipboard[i][param];
        }
        if (typeof(es[newparam].pm.x) !== liOOIcGil)
            if (typeof(es[newparam].pm.y) !== liOOIcGil) {
                if (i == 0) {
                    min_x =
                        es[newparam].pm.x;
                    min_y =
                        es[newparam].pm.y;
                    max_x =
                        es[newparam].pm.x;
                    max_y =
                        es[newparam].pm.y;
                    if (typeof(es[newparam].pm.w) !== liOOIcGil)
                        if (typeof(es[newparam].pm.h) !== liOOIcGil) {
                            min_x +=
                                es[newparam].pm.w / 2;
                            max_x +=
                                es[newparam].pm.w / 2;
                            min_y +=
                                es[newparam].pm.h / 2;
                            max_y +=
                                es[newparam].pm.h / 2;
                        }
                } else {
                    min_x =
                        Math.min(min_x, es[newparam].pm.x);
                    min_y =
                        Math.min(min_y, es[newparam].pm.y);
                    max_x =
                        Math.max(max_x, es[newparam].pm.x);
                    max_y =
                        Math.max(max_y, es[newparam].pm.y);
                    if (typeof(es[newparam].pm.w) !== liOOIcGil)
                        if (typeof(es[newparam].pm.h) !== liOOIcGil) {
                            max_x =
                                Math.max(max_x, es[newparam].pm.x + es[newparam].pm.w);
                            max_y =
                                Math.max(max_y, es[newparam].pm.y + es[newparam].pm.h);
                        }
                }
            } i++;
    }
    ldn(llODicDll);
    ldn(liOGIOOil);
    ldn(llOOlCGil);
    lnd(llcGlCOll);
    lnd(lIODiOOIl);
    lnd(lIOGICOll);
    ldis = true;
    paint_draw_mode = true;
    quick_pick_ignore_one_click = true;
    m_drag_x =
        mouse_x;
    m_drag_y =
        mouse_y;
    lmdrwa =
        lmwa;
    lmdrwb =
        lmwb;
    var lo_x =
        lmwa - (max_x + min_x) / 2;
    var lo_y =
        lmwb - (max_y + min_y) / 2;
    for (var i2 =
            from_obj; i2 < es.length; i2++) {
        if (typeof(es[i2].pm.uid) !== liOOIcGil) {
            var old_uid =
                es[i2].pm.uid;
            es[i2].exists =
                false;
            es[i2].pm.uid =
                RandomizeName(es[i2].pm.uid);
            es[i2].exists =
                true;
            for (var i3 =
                    from_obj; i3 < es.length; i3++) {
                for (param in es[i3].pm) {
                    if (typeof(es[i3].pm[param]) == lIcGIOl) {
                        if (es[i3].pm[param] == old_uid) {
                            es[i3].pm[param] =
                                es[i2].pm.uid;
                        }
                    }
                }
            }
        }
        if (typeof(es[i2].pm.x) !== liOOIcGil)
            if (typeof(es[i2].pm.y) !== liOOIcGil) {
                lnd(licGiCDil + i2 + licDIcGll + es[i2].pm.x + lIcDlcGil);
                lnd(licGiCDil + i2 + llcDiCDil + es[i2].pm.y + lIcDlcGil);
                es[i2].pm.x +=
                    lo_x;
                es[i2].pm.y +=
                    lo_y;
                es[i2].fixPos();
                ldn(licGiCDil + i2 + licDIcGll + es[i2].pm.x + lIcDlcGil);
                ldn(licGiCDil + i2 + llcDiCDil + es[i2].pm.y + lIcDlcGil);
            }
    }
    lfz(false);
    return true;
}

function
canv_blur() {
    unboost_y = false;
    boost_y = false;
    unboost_x = false;
    boost_x = false;
    recalc_speed_y();
    recalc_speed_x();
    k_shift = false;
    ctrl = false;
    space = false;
    alt = false;
}

function
MatchLayer(elem) {
    return lacl[class_to_layer[elem._class]];
}
var letediting = false;
var lettarget = null;
var letediting_mode = lIcDICl;
var ff =
    document.getElementById(llcOlOGll);
var ff_drop =
    document.getElementById(liOGiOOil);
var over_obj =
    null;
var over_enablemode =
    0;
var let_focused = false;

function
letout() {
    if (!letediting) {
        ff.style.display =
            lIcOicGll;
        if (let_focused) ff.blur();
        let_focused = false;
    }
}

function
lapa(enablemode) {
    switch (enablemode) {
        case lIcGIOl:
        case licDlcl:
        case lIOGICl:
        case llOGiCl:
        case lIOOiCl:
        case liCGIOl:
        case lICOiOl:
        case licGiCGll:
        case lICDIOGIl:
        case llOOlcGil:
            return false;
    }
    return true;
}

function
letover(obj, enablemode) {
    if (!letediting) {
        ff.blur();
        if (enablemode != lIcGlOl)
            if (!lapa(enablemode)) {
                var rect =
                    obj.getBoundingClientRect();
                ff.style.left =
                    rect.left + liCGicDll;
                ff.style.top =
                    rect.top + liCGicDll;
                ff.style.width =
                    rect.width + liCGicDll;
                ff.style.height =
                    rect.height + liCGicDll;
                ff.className =
                    llcDiCDIl + obj.className;
                ff.style.backgroundColor =
                    lICGlcOil;
                ff.style.borderTop =
                    ff.style.borderLeft =
                    ff.style.borderRight =
                    lICOIOOIl;
                ff.style.borderBottom =
                    lIcGICGll;
                var strinput =
                    obj.innerHTML.replace(/<\/?[^>]+(>|$)/g, lIcDICl);
                strinput =
                    strinput.split(lIcDicDIl).join(llCOlODil);
                ff.value =
                    strinput;
                ff.style.display =
                    llCOIcOIl;
                over_obj = obj;
                over_enablemode = enablemode;
            }
    }
}

function
letonfocus() {
    if (!letediting) {
        letedit(over_obj, over_enablemode);
    }
    let_focused = true;
}

function
setletedit(val1, val2, defval) {
    quick_pick = false;
    quick_pick_ignore_one_click =
        false;
    if (val1.indexOf(licGIOOl) != -1) {
        defval =
            Math.abs(Number(defval));
        var txt =
            prompt(llOOicOll, defval);
        var gotval;
        if (txt == null || txt == lIcDICl) {
            gotval =
                Math.abs(defval);
        } else {
            gotval =
                Math.abs(txt);
        }
        val1 =
            eval(val1.replace(licGIOOl, gotval));
        val2 =
            val2.replace(llOOiCOIl, gotval);
    } else if (val1.indexOf(lIcGIcDIl) != -1) {
        defval =
            Math.abs(Number(defval));
        var gotval =
            prompt(lICOlCOIl, defval);
        if (gotval.charAt(0) != llOOiCOIl) {
            gotval =
                llOOiCOIl + gotval;
        }
        if (gotval.length != 7) alert(lIOOIcGIl + gotval + lIcOIcDll);
        val1 =
            val1.replace(lIcGIcDIl, gotval);
        val2 =
            val2.replace(llOOiCOIl, gotval);
    }
    ff.value =
        licGlcOll + val1 + llcOlcGIl + val2 + liODICDIl;
    lettarget.innerHTML =
        ff.value;
    ff.style.display =
        lIcOicGll;
    ff_drop.style.display =
        lIcOicGll;
    letediting = false;
    UpdatePhysicalParam((lettarget.id.replace(licOicGil, lIcDICl)), val1);
    var parameter_updated =
        lettarget.id.replace(licOicGil, lIcDICl);
    if (parameter_updated == liOGiOl || (parameter_updated.indexOf(lIOGicOl) != -1 && parameter_updated.indexOf(lIOGiCOl) != -1)) StreetMagic();
}

function
lgprv(pobject) {
    try {
        var text =
            pobject.innerHTML;
        if (window.DOMParser) {
            parser = new DOMParser();
            xmlDoc = parser.parseFromString(text, llOGlcGil);
        } else {
            xmlDoc = new ActiveXObject(llOOlOOll);
            xmlDoc.async = false;
            xmlDoc.loadXML(text);
        }
        return xmlDoc.childNodes.item(0).getAttribute(lICOlcGIl);
    } catch (err) {
        return undefined;
    }
}

function
lcrpl(_str, _what, _with) {
    return String(_str).split(_what).join(_with);
}

function
letedit(obj, enablemode) {
    ff_drop.style.display =
        lIcOicGll;
    if (enablemode != lIcGlOl) {
        var rect =
            obj.getBoundingClientRect();
        ff.style.left =
            rect.left + liCGicDll;
        ff.style.top =
            rect.top + liCGicDll;
        ff.style.width =
            rect.width + liCGicDll;
        ff.style.height =
            rect.height + liCGicDll;
        ff.className =
            llcDiCDIl + obj.className;
        ff.style.backgroundColor =
            llcOlOOil;
        ff.style.borderColor =
            lIOOlcOll;
        var strinput =
            obj.innerHTML;
        if (strinput == llcDiOOil) ff.value =
            liOOIcOll;
        else if (strinput == licGlOOil) ff.value =
            lIcDICl;
        else ff.value =
            strinput.split(lIcDicDIl).join(llCOlODil);
        letediting_mode =
            enablemode;
        lettarget = obj;
        letediting = true;
        var islapa =
            lapa(enablemode);
        if (islapa) {
            var post_set_html_callback =
                null;
            ff.style.display =
                lIcOicGll;
            var addonw = 0;
            switch (enablemode) {
                case lIOGlCl:
                    addonw = 60;
                    break;
                case lIOOlOGl:
                    addonw = 450;
                    break;
                case lIcGiOGl:
                    addonw = 150;
                    break;
            }
            ff_drop.style.display =
                llOOIcDll;
            ff_drop.style.left =
                (rect.left - addonw) + liCGicDll;
            ff_drop.style.top =
                (rect.top + rect.height) + liCGicDll;
            ff_drop.style.width =
                (rect.width + addonw) + liCGicDll;
            var paramsout = lIcDICl;
            var active_param =
                lgprv(obj);
            quick_pick = false;
            quick_pick_ignore_one_click =
                false;
            lqpc = new Array();
            quick_pick_active_param =
                lIcDICl;
            var he = 3 + 3 + 2;
            for (i in special_values_table[enablemode]) {
                if (i == licGicGl || i == liCDlcOl) {
                    lqpc.push(special_values_table[enablemode][i]);
                    quick_pick = true;
                    quick_pick_ignore_one_click =
                        true;
                    quick_pick_active_param =
                        active_param;
                    quick_pick_fake_over = -1;
                    need_redraw = true;
                    for (i2 = 0; i2 < es.length; i2++)
                        if (es[i2].exists)
                            if (es[i2]._class == special_values_table[enablemode][i]) {
                                he += 3 + 16 + 3;
                                paramsout +=
                                    lIODIOGll + es[i2].pm.uid + llODICGll + lcrpl(es[i2].pm.uid, licOlcGIl, llCGiCGIl) + llODICGll + active_param + liCDICGll + i2 + liCOIcOil + (active_param == es[i2].pm.uid ? llOOICOil : lICOICOll) + llcGIOOll + lrp(i2) + licOICOIl;
                            }
                } else {
                    he += 3 + 16 + 3;
                    paramsout +=
                        lIODIOGll + i + llODICGll + lcrpl(special_values_table[enablemode][i], licOlcGIl, llCGiCGIl) + llODICGll + active_param + liOOlcGIl + (active_param == i ? llOOICOil : lICOICOll) + llcGIOOll + special_values_table[enablemode][i] + licOICOIl;
                }
            }
            he =
                Math.max(20, Math.min(he, 500));
            if ((rect.top + rect.height) + he > window.innerHeight) {
                he =
                    window.innerHeight - (rect.top + rect.height);
            }
            if (enablemode == lIOOlOGl) {
                addonw =
                    700;
                ff_drop.style.top =
                    lIcOlODll;
                he =
                    window.innerHeight;
                ff_drop.style.left =
                    (rect.left - addonw) + liCGicDll;
                ff_drop.style.width =
                    (addonw) + liCGicDll;
                var group_code =
                    liODlCOll + (addonw - 32) + llCDicDil;
                group_code +=
                    liOGiODIl + tr_type_tags[i] + llcOiCOIl;
                for (i in tr_type_tags) group_code +=
                    lIcDIOGIl + tr_type_tags[i] + llOGlODll + i + llcDIcGll + tr_type_tags[i] + lIcDiOGIl + i + licOICOIl;
                group_code +=
                    licOlcOll + tr_type_tags[i] + llCDlcDIl;
                group_code +=
                    lIODlODll;
                group_code +=
                    liODlCOll + (addonw - 32) + llCDicDil;
                group_code +=
                    llcOIOGIl;
                group_code +=
                    lIODlODll;
                paramsout =
                    group_code + paramsout;
                post_set_html_callback =
                    function(ff_drop) {
                        document.getElementById(licDicGll).focus();
                    };
            }
            if (paramsout == lIcDICl) {
                paramsout +=
                    llCDiODll;
                switch (Math.floor(Math.random() * 11)) {
                    case 0:
                        paramsout +=
                            liCDiCGil + special_values_table[enablemode][licGicGl] + llOGiCOIl;
                        break;
                    case 1:
                        paramsout +=
                            liOOlCDIl + special_values_table[enablemode][licGicGl] + lIODlOOll;
                        break;
                    case 2:
                        paramsout +=
                            lICOiOGil + special_values_table[enablemode][licGicGl] + lIODlOOll;
                        break;
                    case 3:
                        paramsout +=
                            lIcDlCOIl + special_values_table[enablemode][licGicGl] + lIODlOOll;
                        break;
                    case 4:
                        paramsout +=
                            lIOGlOGIl + special_values_table[enablemode][licGicGl] + licDiOOil;
                        break;
                    case 5:
                        paramsout +=
                            liOOiCGll + special_values_table[enablemode][licGicGl] + lIODlOOll;
                        break;
                    case 6:
                        paramsout +=
                            liOGIOOIl + special_values_table[enablemode][licGicGl] + llODicOIl;
                        break;
                    case 7:
                        paramsout +=
                            llCGiODIl + special_values_table[enablemode][licGicGl] + llOGiCOIl;
                        break;
                    case 8:
                        paramsout +=
                            lICDiOGIl + special_values_table[enablemode][licGicGl] + llcDlOOll;
                        break;
                    case 9:
                        paramsout +=
                            licDlCGIl + special_values_table[enablemode][licGicGl] + lICOIOGll + special_values_table[enablemode][licGicGl] + liCGICDll;
                        break;
                    default:
                        paramsout +=
                            lIcDICDll + special_values_table[enablemode][licGicGl] + liODlODil;
                        break;
                }
                paramsout +=
                    llcDIOOl;
                he += 30;
            }
            ff_drop.style.height = he + liCGicDll;
            ff_drop.innerHTML = paramsout;
            ff_drop.focus();
            if (enablemode == llCOlcl || enablemode == llODIcl) {
                ff_drop.innerHTML =
                    lIcDICl;
                ff.style.display =
                    lIcOicGll;
                BrowseImages(enablemode, active_param, function(new_value, new_value_title) {
                    setletedit(new_value, new_value_title, active_param);
                });
            }
            if (post_set_html_callback !== null) post_set_html_callback(ff_drop);
        } else {
            ff.style.display =
                llCOIcOIl;
            if (!let_focused) ff.focus();
        }
        stopedit(null);
    }
}

function
MaskTriggerActions(hex, extra_mentions) {
    var extra_word =
        extra_mentions;
    if (hex == liODicDil) extra_word =
        extra_word.toLowerCase();
    else extra_word =
        llCGlcl + extra_word.toLowerCase();
    for (var i =
            0; i < ff_drop.childNodes.length; i++) {
        var html =
            ff_drop.childNodes[i].innerHTML;
        if (hex != lIcDICl && html.indexOf(hex) == -1 && html.toLowerCase().indexOf(extra_word) == -1 && html.indexOf(lIOOlCOl) == -1) {
            ff_drop.childNodes[i].style.display =
                lIcOicGll;
        } else {
            ff_drop.childNodes[i].style.display =
                llOOIcDll;
        }
    }
}
var allowed_string_chars = llcDICOll;
var allowed_value_chars = liOGIcOIl;

function
stopedit(event) {
    var keyCode;
    if (event == null) keyCode = -1;
    else keyCode =
        (lIODlCGil in event) ? event.which : event.keyCode;
    if (letediting) {
        var valid = true;
        var fixable = true;
        var chvalue = ff.value;
        if (chvalue != liOOIcOll) {
            switch (letediting_mode) {
                case lIcGIOl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_string_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            break;
                        }
                    }
                    break;
                case licDlcl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_value_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            fixable = false;
                            break;
                        }
                    }
                    if (Math.round(Number(chvalue) / 10) != Number(chvalue) / 10) {
                        valid = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case lIOGICl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_value_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            fixable = false;
                            break;
                        }
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case llOGiCl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_value_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            fixable = false;
                            break;
                        }
                    }
                    if (Math.round(Number(chvalue)) != Number(chvalue)) {
                        valid = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case liCGIOl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_value_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            fixable = false;
                            break;
                        }
                    }
                    if (Number(chvalue) >= 0) {} else {
                        valid = false;
                        fixable = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case lIOOiCl:
                    for (var i = 0; i < chvalue.length; i++) {
                        if (allowed_value_chars.indexOf(chvalue.charAt(i)) == -1) {
                            valid = false;
                            fixable = false;
                            break;
                        }
                    }
                    if (Number(chvalue) == 0) {
                        valid = false;
                        fixable = false;
                    }
                    if (Math.round(Number(chvalue) / 10) != Number(chvalue) / 10) {
                        valid = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case lICDIOGIl:
                    if (Number(chvalue) < 0) {
                        valid = false;
                        fixable = false;
                    }
                    if (Math.round(Number(chvalue)) != Number(chvalue)) {
                        valid = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
                case llOOlcGil:
                    if (Number(chvalue) <= 0) {
                        valid = false;
                        fixable = false;
                    }
                    if (Math.round(Number(chvalue)) != Number(chvalue)) {
                        valid = false;
                    }
                    if (isNaN(chvalue)) {
                        valid = false;
                        fixable = false;
                    }
                    break;
            }
        }
        if (fixable) {
            if (valid) {
                ff.style.backgroundColor =
                    llcOlOOil;
                ff.style.borderColor =
                    lIOOlcOll;
            } else {
                ff.style.backgroundColor =
                    llcGlOGll;
                ff.style.borderColor =
                    lIOOicGil;
            }
        } else {
            ff.style.backgroundColor =
                licGIcOIl;
            ff.style.borderColor =
                llOOicGIl;
        }
        if (keyCode == 13) {
            if (fixable) {
                if (chvalue == liOOIcOll) {} else {
                    switch (letediting_mode) {
                        case lIcGIOl:
                            var new_string = lIcDICl;
                            for (var i = 0; i < chvalue.length; i++) {
                                if (allowed_string_chars.indexOf(chvalue.charAt(i)) != -1) {
                                    new_string += chvalue.charAt(i);
                                }
                            }
                            chvalue = new_string;
                            break;
                        case licDlcl:
                            chvalue =
                                Math.round(Number(chvalue) / 10) * 10;
                            break;
                        case lIOGICl:
                            chvalue =
                                Number(chvalue);
                            break;
                        case llOGiCl:
                            chvalue =
                                Math.round(Number(chvalue));
                            break;
                        case liCGIOl:
                            if (Number(chvalue) < 0) chvalue = 0;
                            else chvalue =
                                Number(chvalue);
                            break;
                        case lIOOiCl:
                            if (Number(chvalue) < 10) chvalue = 10;
                            else chvalue =
                                Math.round(Number(chvalue) / 10) * 10;
                            break;
                        case llOOlcGil:
                            if (Number(chvalue) < 1) chvalue = 1;
                            else chvalue =
                                Math.round(Number(chvalue));
                            break;
                        case lICDIOGIl:
                            if (Number(chvalue) < 0) chvalue = 0;
                            else chvalue =
                                Math.round(Number(chvalue));
                            break;
                    }
                    if (isNaN(chvalue) && chvalue == lIcDICl) lettarget.innerHTML =
                        licGlOOil;
                    else lettarget.innerHTML =
                        chvalue;
                    UpdatePhysicalParam((lettarget.id.replace(licOicGil, lIcDICl)), chvalue);
                }
                ff.style.display =
                    lIcOicGll;
                letediting = false;
            } else {}
        }
    }
}

function
UpdatePhysicalParam(paramname, chvalue) {
    lcz();
    var layer_mismatch = false;
    var list_changes =
        lIcDICl;
    for (var elems = 0; elems < es.length; elems++)
        if (es[elems].exists)
            if (es[elems].selected) {
                if (es[elems].pm.hasOwnProperty(paramname)) {
                    if (MatchLayer(es[elems])) {
                        var lup = (typeof(paramname) == lIcGIOl) ? licOICOll + paramname + licOICOll : paramname;
                        if (typeof(chvalue) == liCGiCDil || chvalue == 0) {
                            lnd(licGiCDil + elems + liOOiCOil + lup + llCGICOil + es[elems].pm[paramname] + lIcDlcGil);
                            ldn(licGiCDil + elems + liOOiCOil + lup + llCGICOil + chvalue + lIcDlcGil);
                            es[elems].pm[paramname] =
                                Number(chvalue);
                        } else if (typeof(chvalue) == lIcGIOl) {
                            lnd(licGiCDil + elems + liOOiCOil + lup + liOOlCOil + es[elems].pm[paramname] + liCGIODil);
                            ldn(licGiCDil + elems + liOOiCOil + lup + liOOlCOil + chvalue + liCGIODil);
                            es[elems].pm[paramname] =
                                chvalue;
                        } else {
                            alert(liODicOIl + typeof(chvalue));
                        }
                        list_changes += lIODlCGll + paramname + liOOlOGil + (es[elems].pm.uid != null ? es[elems].pm.uid : es[elems]._class) + lIOOiCDIl + chvalue + lIcOIOGll;
                    } else layer_mismatch = true;
                }
            } need_redraw = true;
    NewNote(llCOicOil + list_changes, note_passive);
    if (layer_mismatch) NewNote(licOlODIl, note_neutral);
    lfz(false);
}

function
UpdatePhysicalParams(paramname_arr, chvalue_arr, forcefully_create_params) {
    lcz();
    var layer_mismatch = false;
    var list_changes =
        lIcDICl;
    for (var elems = 0; elems < es.length; elems++)
        if (es[elems].exists)
            if (es[elems].selected)
                for (var par =
                        0; par < paramname_arr.length; par++) {
                    var paramname =
                        paramname_arr[par];
                    var chvalue =
                        chvalue_arr[par];
                    if (forcefully_create_params || es[elems].pm.hasOwnProperty(paramname)) {
                        if (MatchLayer(es[elems])) {
                            var lup = (typeof(paramname) == lIcGIOl) ? licOICOll + paramname + licOICOll : paramname;
                            if (typeof(chvalue) == liCGiCDil || chvalue == 0) {
                                lnd(licGiCDil + elems + liOOiCOil + lup + llCGICOil + es[elems].pm[paramname] + lIcDlcGil);
                                ldn(licGiCDil + elems + liOOiCOil + lup + llCGICOil + chvalue + lIcDlcGil);
                                es[elems].pm[paramname] =
                                    Number(chvalue);
                                if (chvalue === delete_addr) ldn(llcOlcOil + elems + liOOiCOil + lup + llODIOOll);
                            } else if (typeof(chvalue) == lIcGIOl) {
                                lnd(licGiCDil + elems + liOOiCOil + lup + liOOlCOil + es[elems].pm[paramname] + liCGIODil);
                                ldn(licGiCDil + elems + liOOiCOil + lup + liOOlCOil + chvalue + liCGIODil);
                                es[elems].pm[paramname] =
                                    chvalue;
                                if (chvalue === delete_addr) ldn(llcOlcOil + elems + liOOiCOil + lup + llODIOOll);
                            } else {
                                alert(liODicOIl + typeof(chvalue));
                            }
                            list_changes += lIODlCGll + paramname + liOOlOGil + (es[elems].pm.uid != null ? es[elems].pm.uid : es[elems]._class) + lIOOiCDIl + chvalue + lIcOIOGll;
                        } else layer_mismatch = true;
                    }
                }
    need_redraw = true;
    NewNote(llCOicOil + list_changes, note_passive);
    if (layer_mismatch) NewNote(licOlODIl, note_neutral);
    lfz(false);
}
var timeout_unfocusedit = -1;

function
cancelable_unfocusedit() {
    timeout_unfocusedit =
        setTimeout(function() {
            unfocusedit()
        }, 2);
}

function
cancel_unfocusedit() {
    setTimeout(function() {
        if (timeout_unfocusedit != -1) window.clearTimeout(timeout_unfocusedit);
        timeout_unfocusedit = -1;
    }, 1);
}

function
unfocusedit() {
    if (quick_pick) {
        for (i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._isphysical) {
                    if (es[i]._isresizable) {
                        var x1 = w2s_x(es[i].pm.x);
                        var x2 = w2s_w(es[i].pm.w);
                        var y1 = w2s_y(es[i].pm.y);
                        var y2 = w2s_h(es[i].pm.h);
                    } else {
                        var this_class =
                            ThinkOfBBoxClass(es[i]._class, es[i]);
                        var y1 =
                            w2s_y(es[i].pm.y + bo_y[this_class]);
                        var y2 =
                            w2s_h(bo_h[this_class]);
                        if (es[i].pm.side != -1) {
                            var x1 =
                                w2s_x(es[i].pm.x + bo_x[this_class]);
                            var x2 =
                                w2s_w(bo_w[this_class]);
                        } else {
                            var x1 =
                                w2s_x(es[i].pm.x - bo_x[this_class]);
                            var x2 =
                                w2s_w(-bo_w[this_class]);
                            x1 += x2;
                            x2 = -x2;
                        }
                    }
                    if (lqpc.indexOf(es[i]._class) != -1) {
                        if (Math.sqrt(Math.pow(x1 + x2 / 2 - mouse_x, 2) + Math.pow(y1 + y2 / 2 - mouse_y, 2)) < 20 * quick_pick_hit_scale) {
                            setletedit(es[i].pm.uid, lcrpl(es[i].pm.uid), quick_pick_active_param);
                            break;
                        }
                    }
                } need_redraw = true;
        quick_pick = false;
    }
    if (letediting) {
        letediting_mode = lIcDICl;
        ff.style.display =
            lIcOicGll;
        letediting = false;
        ff_drop.style.display =
            lIcOicGll;
    }
    let_focused = false;
}
var ERROR_VALUE =
    licOlCDll;
var gui_params =
    document.getElementById(licDlOOll);
var gui_objbox =
    document.getElementById(liCOiODIl);
var tools_box =
    document.getElementById(llCDIcGil);
var objboxhider =
    document.getElementById(lICDICOil);

function
tonumerous(str, num) {
    if (num == 1) return str;
    if (str.charAt(str.length - 1) == liOOICDl || str.charAt(str.length - 1) == llcOicOll || str.charAt(str.length - 1) == lICDICl || (str.charAt(str.length - 1) == llCGicl && (str.charAt(str.length - 2) == liOOICDl || str.charAt(str.length - 2) == llCDlOl))) return str + llODiODIl;
    if (str.charAt(str.length - 1) == liCGlCl && str.charAt(str.length - 2) != liOGIcl) return str.substring(0, str.length - 1) + licGlCDil;
    if (str.charAt(str.length - 1) == llODlcOll && str.charAt(str.length - 2) != llOOIODIl) return str + liOOICDl;
    return str + liOOICDl;
}

function
FindMachingParameterID(fm_parameter, fm_class) {
    for (var i2 = 0; i2 < param_type.length; i2++) {
        if (param_type[i2][4] == lICOIcl || param_type[i2][4] == fm_class) {
            if (param_type[i2][0] == fm_parameter) return i2;
        }
    }
    return -1;
}

function
CheckForErrors() {
    var defined_uids = [];
    var player_exists =
        false;
    var wall_exists =
        false;
    var unprobable_errors = [];
    for (var si = 0; si < es.length; si++)
        if (es[si].exists) {
            if (es[si].pm.uid) defined_uids.push(es[si].pm.uid);
            if (es[si]._class == lIOOl) player_exists =
                true;
            if (es[si]._class == llOOIcl) wall_exists =
                true;
        } for (var si = 0; si < es.length; si++)
        if (es[si].exists)
            for (var key in es[si].pm)
                if (typeof es[si].pm[key] == lIcGIOl)
                    if (es[si].pm[key].charAt(0) == llOOiCOIl)
                        if (es[si].pm[key].length != 7 || isNaN(parseInt(es[si].pm[key].substring(1), 16)))
                            if (defined_uids.indexOf(es[si].pm[key]) === -1) {
                                if (key.indexOf(lIOGicOl) != -1 && key.indexOf(licOiCDil) != -1) {
                                    unprobable_errors.push(lIcDIOOil + es[si].pm[key] + llcDIOGIl + key + liCDicGil + es[si].pm.uid + licOICOll);
                                } else {
                                    alert(lIcDIOOil + es[si].pm[key] + llcDIOGIl + key + liCDicGil + es[si].pm.uid + licOICOll);
                                    return;
                                }
                            } if (!player_exists) {
        alert(llcGICDIl);
        return;
    }
    if (!wall_exists) {
        alert(liOOlcDIl);
        return;
    }
    if (unprobable_errors.length > 0) {
        alert(lIcOiOGIl + unprobable_errors.join(lIODicDll));
        return;
    }
    alert(llCDICDil);
}

function
special_value(base, val) {
    if (base == llCOlcl || base == llODIcl) {
        if (special_values_table[base][val] == undefined) ServerRequest(llOGIOOl + base + lIODiCOl + val, lIcOiOOl);
        if (special_values_table[base][val] != undefined) return (CUSTOM_IMAGES_APPROVED[val] ? lIOOlCDIl : lICDicOll) + llCGlcl + special_values_table[base][val];
        return llcGIOGIl + val;
    }
    switch (base) {
        case liCDICl:
        case lIOGIOl: {
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            return licGlCGll + val;
        }
        case licDICl:
        case llcOicGl:
        case lIOGlCl:
        case lIcOlCl:
        case liCOlcl:
        case llCOlcl:
        case llOOicl:
        case lIODIOGl:
        case lIcGlCl:
        case llODIcl:
        case llCGlCl:
        case lIcDlCl:
        case licGicDil:
        case lIOOlOGl:
        case lIODIOl:
        case llCOiOl:
        case lIcGiOGl:
        case lIODIcGil:
        case llODIOOIl: {
            if (base == lIODIOGl) {
                if (val === true) val =
                    1;
                if (val === false) val =
                    0;
            }
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            if (base == lIODIcGil) {
                if (val.charAt(0) == llOOiCOIl && val.length == 7) return licDlOGil + val;
            }
            ConsoleTace(llODIOGil + val + lIcDlOGll + base + llCOlcGll);
            return ERROR_VALUE;
        }
        case lIcOICl: {
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            if (val > 0) return val + lIOOICGil;
            return (-val) + llCDicOIl;
        }
        case liODlOl: {
            if (val == 1) val =
                licGICl;
            if (val == 0) val =
                licOlcGl;
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            return ERROR_VALUE;
        }
        case liOGICl:
        case lICDll:
        case lIOGiCl:
        case liCGiCDl:
        case lIcOil:
        case liCGil:
        case liOOlOl:
        case liCOlCl:
        case llODlcl:
        case llCOIl:
        case lIcGll:
        case llcGil:
        case liCOll:
        case lICGicl:
        case liCGiCGl: {
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            if (special_values_table[base][licGicGl] != undefined) {
                if (isNaN(val) && val.charAt(0) == llOOiCOIl) {
                    for (var si = 0; si < es.length; si++)
                        if (es[si].exists)
                            if (es[si]._class == special_values_table[base][licGicGl] || es[si]._class == special_values_table[base][liCDlcOl]) {
                                if (es[si].pm.uid == val) return es[si].pm.uid;
                            }
                } else {
                    var inco = 0;
                    for (var si = 0; si < es.length; si++)
                        if (es[si].exists)
                            if (es[si]._class == special_values_table[base][licGicGl] || es[si]._class == special_values_table[base][liCDlcOl]) {
                                if (inco == val) return es[si].pm.uid;
                                inco++;
                            }
                }
            }
            ConsoleTace(llODIOGil + val + lIcDlOGll + base + liCDicDil);
            return ERROR_VALUE;
        }
        case llOOiCl: {
            if (special_values_table[base][val] != undefined) return special_values_table[base][val];
            if (val == 1) return val + lIOOIcOil;
            if (val > 1 || val == 0) return val + llODiOGIl;
        }
        default: {
            ConsoleTace(lIODlCGll + base + llOGlCOll);
            return ERROR_VALUE;
        }
    }
}

function
GenParamVal(base, val) {
    if (base == lIcGIOl || base == licDlcl || base == lIOGICl || base == lICOiOl || base == llOGiCl || base == lIOOiCl || base == liCGIOl || base == llOOlcGil || base == lICDIOGIl) return val;
    if (base == lIcGlOl) return licGlcOll + val + liOGiCOIl;
    return licGlcOll + val + llcOlcGIl + special_value(base, val) + liODICDIl;
}
var current_gui_params =
    new Array();

function
ForceDeselect() {
    for (i = 0; i < es.length; i++)
        if (es[i].selected) es[i].selected = false;
    need_GUIParams_update = true;
    need_redraw = true;
}
var edit_triggers_as_text =
    false;
var delete_addr = {
    val: lIODlOGll
};

function
CompileTrigger() {
    var opcode_field =
        document.getElementById(llCOlODll);
    var code =
        opcode_field.value;
    var code_lines =
        code.split(lIODicDll);
    var new_trigger_actions = [];
    var direct_update_params = [];
    var direct_update_values = [];

    function
    ScheduleParamSet(a, b) {
        direct_update_params.push(a);
        direct_update_values.push(b);
    }

    function
    getAllIndexes(arr, val) {
        var indexes = [],
            i = -1;
        while ((i =
                arr.indexOf(val, i + 1)) != -1) {
            indexes.push(i);
        }
        return indexes;
    }
    for (var i =
            0; i < code_lines.length; i++) {
        var line =
            code_lines[i];
        var paramA_start =
            line.indexOf(lICDicDIl);
        var separator =
            line.indexOf(lICOlcDll);
        var end =
            line.indexOf(lIOOIOOll);
        var semicolon =
            line.indexOf(licDiCOIl);
        if (paramA_start != -1 && separator != -1 && end != -1) {
            var first_c =
                line.indexOf(llCGicOil);
            var opcode =
                line.substring(0, first_c);
            var action_type = -1;
            if (opcode.substring(0, 2) == llCDIOOll && !isNaN(opcode.slice(2))) action_type =
                parseInt(opcode.slice(2));
            else {
                action_type =
                    trigger_opcode_aliases.indexOf(opcode);
                if (action_type == -1) {
                    NewNote(llOOIcDIl + opcode + licGICDll, note_neutral);
                    return;
                }
            }
            var valueA =
                lIcDICl;
            var valueB =
                lIcDICl;
            if (action_type != -1) {
                valueA =
                    line.substring(paramA_start + 3, separator);
                valueB =
                    line.substring(separator + 4, end);
            }
            if (new_trigger_actions.length < 10) new_trigger_actions.push([action_type, valueA, valueB]);
            else {
                NewNote(liOGlcDil, note_neutral);
                return;
            }
        } else if (semicolon != -1) {
            var left_part =
                line.substring(0, semicolon);
            var right_part =
                line.slice(semicolon + 1);
            while (left_part.charAt(0) == llCGlcl) left_part =
                left_part.slice(1);
            while (left_part.charAt(left_part.length - 1) == llCGlcl) left_part =
                left_part.slice(0, -1);
            while (right_part.charAt(0) == llCGlcl) right_part =
                right_part.slice(1);
            while (right_part.charAt(right_part.length - 1) == llCGlcl) right_part =
                right_part.slice(0, -1);
            if (left_part == lICOicl || left_part == lIcGiCl || left_part == llOOiCl) ScheduleParamSet(left_part, right_part);
            else NewNote(llOOIcDIl + left_part + llcDlcDil, note_neutral);
        } else if (line != lIcDICl) {
            NewNote(lICOlOOil + line + lICGlCGIl, note_neutral);
            return;
        }
    }
    var action =
        1;
    for (var i =
            0; i < new_trigger_actions.length; i++) {
        ScheduleParamSet(lIOGicOl + action + lIOGiCOl, new_trigger_actions[i][0]);
        ScheduleParamSet(lIOGicOl + action + lIOGiCGl, new_trigger_actions[i][1]);
        ScheduleParamSet(lIOGicOl + action + lICGlcOl, new_trigger_actions[i][2]);
        action++;
    }
    var last_action =
        10;
    while (action <= last_action) {
        ScheduleParamSet(lIOGicOl + action + lIOGiCOl, -1);
        ScheduleParamSet(lIOGicOl + action + lIOGiCGl, lIcDICl);
        ScheduleParamSet(lIOGicOl + action + lICGlcOl, lIcDICl);
        action++;
    }
    UpdatePhysicalParams(direct_update_params, direct_update_values, false);
    return true;
}

function
UpdateGUIParams() {
    current_gui_params =
        new Array();
    unfocusedit();
    ff.style.display =
        lIcOicGll;
    var str = lIcDICl;
    var selects = 0;
    var sel_by_class = new Array();
    for (i = 0; i < known_class.length; i++) {
        sel_by_class[i] = 0;
    }
    var uids_list = lIcDICl;
    for (i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].selected) {
                selects++;
                sel_by_class[known_class.indexOf(es[i]._class)]++;
                if (es[i].pm.uid != undefined) {
                    if (uids_list.length > 0) uids_list +=
                        licOiCGil;
                    uids_list += licOICOll + es[i].pm.uid + licOICOll;
                }
            } var full_list = lIcDICl;
    var classes_selected = 0;
    for (i = 0; i < known_class.length; i++)
        if (sel_by_class[i] > 0) {
            if (full_list.length > 0) full_list +=
                licOiCGil;
            classes_selected++;
            full_list +=
                sel_by_class[i] + llCGlcl + tonumerous(known_class_title[i], sel_by_class[i]);
        } if (classes_selected > 0) {
        if (classes_selected == 1)
            if (uids_list.length > 0) {
                full_list +=
                    licDICDIl + uids_list;
            } full_list = llODlOOIl + full_list + liOGIOl;
        full_list += lIcOICOll;
    }
    if (selects == 0) str +=
        lIODIODll;
    else if (selects == 1) str +=
        llcDiCDll + selects + lIcDicDil + full_list + lIcDlcOIl;
    else str +=
        llcDiCDll + selects + lIcOiODll + full_list + lIcDlcOIl;
    var first_selected_object =
        null;
    var params_to_display = new Array();
    var paramscount_to_display = new Array();
    var paramsvalue_to_display = new Array();
    var param_associated = new Array();
    for (var i = 0; i < es.length; i++)
        if (es[i].exists)
            if (es[i].selected) {
                if (first_selected_object == null) first_selected_object =
                    es[i];
                var parameter;
                for (parameter in es[i].pm) {
                    var ind2 =
                        FindMachingParameterID(parameter, es[i]._class);
                    var ind =
                        params_to_display.indexOf(ind2);
                    if (ind == -1) {
                        if (ind2 != -1) {
                            params_to_display.push(ind2);
                            paramscount_to_display.push(1);
                            paramsvalue_to_display.push(es[i].pm[parameter]);
                            param_associated.push(parameter);
                        }
                    } else {
                        paramscount_to_display[ind]++;
                    }
                }
            } if (edit_triggers_as_text && selects == 1 && first_selected_object._class == lICDll) {
        str +=
            llCOiCDil;
        str +=
            licGlODll;
        str +=
            llOGlcGll;
        var code_lines =
            lIcDICl;
        code_lines +=
            lICOIcGll + first_selected_object.pm.uid + lIODicDll;
        code_lines +=
            lIcOicGIl + first_selected_object.pm.enabled + lIODicDll;
        code_lines +=
            llCOicOIl + first_selected_object.pm.maxcalls + lIODicDll;
        code_lines +=
            lIODicDll;
        for (var i =
                1; first_selected_object.pm[lIOGicOl + i + lIOGiCOl] != undefined; i++) {
            if (first_selected_object.pm[lIOGicOl + i + lIOGiCOl] == -1) continue;
            if (trigger_opcode_aliases[first_selected_object.pm[lIOGicOl + i + lIOGiCOl]] == undefined) code_lines +=
                llCDIOOll + first_selected_object.pm[lIOGicOl + i + lIOGiCOl];
            else code_lines +=
                trigger_opcode_aliases[first_selected_object.pm[lIOGicOl + i + lIOGiCOl]];
            code_lines +=
                llcOiODIl;
            code_lines +=
                licOICOll + first_selected_object.pm[lIOGicOl + i + lIOGiCGl] + licOICOll;
            code_lines +=
                licOiCGil;
            code_lines +=
                licOICOll + first_selected_object.pm[lIOGicOl + i + lICGlcOl] + licOICOll;
            code_lines +=
                lIOGiCGil;
        }
        str +=
            code_lines.split(lIOOIOOIl).join(llOOICDil).split(licOicGl).join(lIcOiCOIl);
        str +=
            lICOicDll;
        str +=
            lIcOicDll;
    } else {
        var pre_temp =
            liOGiCGIl;
        var post_temp =
            liCDIODIl;
        var last_i =
            params_to_display.length - 2;
        if (params_to_display.length == 1) {
            pre_temp =
                lIOOlCOil;
            post_temp =
                lIOGiODll;
        }
        var value;
        for (i = 0; i < params_to_display.length; i++) {
            if (paramscount_to_display[i] == 1) {
                value =
                    GenParamVal(param_type[params_to_display[i]][1], paramsvalue_to_display[i]);
            } else value =
                llcDiOOil;
            current_gui_params.push(param_associated[i]);
            str +=
                pre_temp + param_type[params_to_display[i]][2] + post_temp + param_type[params_to_display[i]][1] + llOGicDIl + param_type[params_to_display[i]][1] + liCOICOIl + licOicGil + param_type[params_to_display[i]][0] + llcOlcGIl + value + liCDicGIl;
            if (first_selected_object._class == lICDll)
                if (i >= 4 && (i - 4) % 3 == 0) {
                    str +=
                        licGiCGil;
                } if (i == last_i) {
                pre_temp =
                    llODIcDll;
                post_temp =
                    llCGICGll;
            } else if (i == 0) {
                pre_temp =
                    lIOOIcOIl;
                post_temp =
                    lICOIODIl;
            }
        }
    }
    if (selects == 1 && first_selected_object._class == lICDll) {
        if (edit_triggers_as_text) str +=
            liODIcOIl;
        else str +=
            liCDIcGIl;
    }
    str += lIODlODll;
    gui_params.innerHTML =
        str;
    StreetMagic();
}

function
innerHTML_to_value(_html) {
    if (_html.indexOf(lICDiCOll) != -1) {
        return llcDiOOil;
    }
    var _from =
        _html.indexOf(licGlcOll);
    var _to =
        _html.indexOf(llcOlcGIl);
    if (_from != -1)
        if (_to != -1) return _html.substr(_from + 14, _to - (_from + 14));
    return _html;
}

function
StreetMagic() {
    var mark_obj =
        document.getElementById(lICOICOil);
    if (mark_obj != null) {
        var our_case =
            mark_pairs[llcGlCDll + innerHTML_to_value(mark_obj.innerHTML)];
        var valobj =
            document.getElementById(llOOlOOil);
        if (our_case == undefined) our_case = lIcGlOl;
        eval(llCGICDil + our_case + llcDICGil);
        eval(lICDICGll + our_case + llcDICGil);
        valobj.innerHTML =
            GenParamVal(our_case, innerHTML_to_value(valobj.innerHTML));
    }
    for (var i = 1; i <= 10; i++) {
        var mark_obj =
            document.getElementById(llcDiCOll + i + lIOGiCOl);
        if (mark_obj != null) {
            var cases = liCGicGIl;
            for (var i2 = 0; i2 < 2; i2++) {
                var our_case =
                    mark_pairs[lICOIOGIl + cases + innerHTML_to_value(mark_obj.innerHTML)];
                var valobj =
                    document.getElementById(llcDiCOll + i + licOiCDil + cases);
                if (our_case == undefined) our_case = lIcGlOl;
                eval(llCGICDil + our_case + llcDICGil);
                eval(lICDICGll + our_case + llcDICGil);
                valobj.innerHTML =
                    GenParamVal(our_case, innerHTML_to_value(valobj.innerHTML));
                cases = llcDlOGil;
            }
        } else break;
    }
}

function
lrpc(class_id) {
    return liCOIcDil + class_id + lIcDIcGIl;
}

function
lrp(obj_i) {
    return lrpc(es[obj_i]._class) + llCGlcl + (es[obj_i].pm.uid == undefined ? known_class2known_class_title(es[obj_i]._class) : es[obj_i].pm.uid);
}

function
UpdateGUIObjectsList() {
    if (ObjectBox_visible) {
        var pos =
            gui_objbox.scrollTop;
        var str = lIcDICl;
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (MatchLayer(es[i])) {
                    str +=
                        lICGiOOil + i + liCGICOIl + (es[i].selected ? '1' : '0') + llCGIODil + i + liCOiCOil + lrp(i);
                    if (es[i]._class == llcDIl) str += llODlOOIl + special_values_table[lIcDlCl][es[i].pm.mark] + liOGIOl;
                    str +=
                        lIODlODll;
                } gui_objbox.innerHTML =
            str;
        gui_objbox.scrollTop =
            pos;
    }
}
var lacl =
    new Array();
var name_layers =
    new Array();
var class_to_layer =
    new Array();
var possible_tools =
    new Array();
var possible_tools_descr =
    new Array();
possible_tools[0] =
    llCGiCDil;
possible_tools_descr[0] =
    liOGiOOIl;
for (var i = 0; i < known_class.length; i++) {
    if (known_class[i] != lIOOIl) {
        possible_tools[possible_tools.length] =
            known_class[i];
        possible_tools_descr[possible_tools_descr.length] =
            llCDlcDll + known_class_title[i].substring(0, 1).toUpperCase() + known_class_title[i].substring(1);
    }
    lacl[i] =
        true;
    name_layers[i] =
        lrpc(known_class[i]) + llCGlcl + tonumerous(known_class_title[i].substring(0, 1).toUpperCase() + known_class_title[i].substring(1));
    class_to_layer[known_class[i]] =
        i;
}
possible_tools[possible_tools.length] =
    llcOicGll;
possible_tools_descr[possible_tools_descr.length] =
    lIOOiCGIl;
var active_tool;
var last_clicked_layer = 100;

function
layerClicked(i) {
    lcz();
    lnd(llCDIOGIl);
    lnd(lIcGlCDil + last_clicked_layer + lIcDlcGil);
    for (var i2 = 0; i2 < known_class.length; i2++) lnd(llcDICDll + i2 + licDicOil + lacl[i2] + lIcDlcGil);
    last_clicked_layer = i;
    if (i == -1) {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = true;
    } else if (i == -2) {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = false;
    } else if (i == -3) {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = false;
        lacl[class_to_layer[lIcOIcl]] = true;
        lacl[class_to_layer[llOOIcl]] = true;
        lacl[class_to_layer[llcGil]] = true;
        lacl[class_to_layer[lICGIcl]] = true;
        lacl[class_to_layer[liOOlOl]] = true;
    } else if (i == -4) {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = false;
        lacl[class_to_layer[lICDll]] = true;
        lacl[class_to_layer[liCGil]] = true;
        lacl[class_to_layer[llcDIl]] = true;
        lacl[class_to_layer[lICGicl]] = true;
        lacl[class_to_layer[liCOlCl]] = true;
        lacl[class_to_layer[liOOlOl]] = true;
    } else if (i == -5) {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = false;
        lacl[class_to_layer[lIOOl]] = true;
        lacl[class_to_layer[liCGl]] = true;
        lacl[class_to_layer[lIcOil]] = true;
        lacl[class_to_layer[lIcGll]] = true;
        lacl[class_to_layer[liCOll]] = true;
        lacl[class_to_layer[llCOIl]] = true;
        lacl[class_to_layer[llcDIl]] = true;
    } else if (i == -6) {
        ADVANCED_LAYERS = true;
    } else if (i == -7) {
        ADVANCED_LAYERS = false;
    } else if (ctrl && !alt) {
        lacl[i] = true;
    } else if (alt && !ctrl) {
        lacl[i] = false;
    } else {
        for (var i2 = 0; i2 < known_class.length; i2++) lacl[i2] = false;
        lacl[i] = true;
    }
    for (var i = 0; i < es.length; i++)
        if (es[i].exists)
            if (!MatchLayer(es[i])) {
                if (es[i].selected) {
                    lnd(licGiCDil + i + llODiCGIl);
                    ldn(licGiCDil + i + liCDlcOil);
                    es[i].selected =
                        false;
                }
            } for (var i2 = 0; i2 < known_class.length; i2++) ldn(llcDICDll + i2 + licDicOil + lacl[i2] + lIcDlcGil);
    ldn(llCDIOGIl);
    ldn(lIcGlCDil + last_clicked_layer + lIcDlcGil);
    lfz(false);
    need_redraw = true;
    need_GUIParams_update = true;
    UpdateTools();
    UpdateGUIObjectsList();
    SaveBrowserSettings();
}

function
GridAlphaSet(value) {
    GRID_ALPHA =
        value;
    need_redraw = true;
    UpdateTools();
    SaveBrowserSettings();
}

function
GridSnappingSet(value) {
    if (value < 0.0001) {
        console.warn(llCOlcGIl + value + lIOGiOOIl);
        return;
    }
    if (value < 10 || value % 10 !== 0) console.warn(llCOlcGIl + value + licGIcGll);
    GRID_SNAPPING =
        value;
    UpdateTools();
    SaveBrowserSettings();
}

function
ConnectionShowSet(value) {
    SHOW_CONNECTIONS =
        value;
    need_redraw = true;
    UpdateTools();
    SaveBrowserSettings();
}

function
ShowTexturesSet(value) {
    SHOW_TEXTURES =
        value;
    need_redraw = true;
    UpdateTools();
    SaveBrowserSettings();
}

function
PreviewQualitySet(value) {
    ctx.imageSmoothingEnabled =
        value;
    need_redraw = true;
    UpdateTools();
    SaveBrowserSettings();
}
if (typeof document.createStyleSheet === liOOIcGil) {
    document.createStyleSheet =
        (function() {
            function
            createStyleSheet(href) {
                if (typeof href !== liOOIcGil) {
                    var element =
                        document.createElement(licGIcDIl);
                    element.type =
                        liOOlcOIl;
                    element.rel =
                        licOIcOIl;
                    element.href =
                        href;
                } else {
                    var element =
                        document.createElement(lICOIOl);
                    element.type =
                        liOOlcOIl;
                }
                document.getElementsByTagName(liOGiODll)[0].appendChild(element);
                var sheet =
                    document.styleSheets[document.styleSheets.length - 1];
                if (typeof sheet.addRule === liOOIcGil) sheet.addRule =
                    addRule;
                if (typeof sheet.removeRule === liOOIcGil) sheet.removeRule =
                    sheet.deleteRule;
                return sheet;
            }

            function
            addRule(selectorText, cssText, index) {
                if (typeof index === liOOIcGil) index =
                    this.cssRules.length;
                this.insertRule(selectorText + lIOOlODIl + cssText + liCOlcOll, index);
            }
            return createStyleSheet;
        })();
}
document.write(llcOiCOll);
var stars_old_x =
    0;
var stars_old_y =
    0;

function
UpdateStars() {
    if (THEME == THEME_PURPLE || THEME == THEME_GREEN) {
        if (THEME == THEME_PURPLE) {
            stars.style.filter =
                llCGlCGll;
        } else if (THEME == THEME_GREEN) {
            stars.style.filter =
                liCDiCDIl;
        }
        if (zoom < 2) {
            stars_old_x =
                ((dis_from_x + dis_to_x) / 2 * 0.666);
            stars_old_y =
                ((dis_from_y + dis_to_y) / 2 * 0.666);
        } else {
            stars_old_x =
                ((dis_from_x + dis_to_x) / 2 * 0.666 + stars_old_x * 20 * (zoom - 2)) / (20 * (zoom - 2) + 1);
            stars_old_y =
                ((dis_from_y + dis_to_y) / 2 * 0.666 + stars_old_y * 20 * (zoom - 2)) / (20 * (zoom - 2) + 1);
        }
        stars.style.backgroundPositionX =
            stars_old_x + liCGicDll;
        stars.style.backgroundPositionY =
            stars_old_y + liCGicDll;
        if (Math.abs(stars_old_x - ((dis_from_x + dis_to_x) / 2 * 0.666)) > 1 || Math.abs(stars_old_y =
                ((dis_from_y + dis_to_y) / 2 * 0.666)) > 1) need_redraw =
            true;
        stars.style.visibility =
            lIcDICl;
    } else {
        stars.style.visibility =
            llOOiCOll;
    }
}

function
ThemeSet(value) {
    THEME =
        value;
    need_redraw = true;
    UpdateTools();
    var sheet_original =
        document.styleSheets[0];
    var sheet2;
    try {
        sheet2 =
            new CSSStyleSheet();
    } catch (e) {
        sheet2 =
            document.createStyleSheet();
    }
    if (THEME == THEME_BLUE) {} else if (THEME == THEME_DARK || THEME == THEME_PURPLE || THEME == THEME_GREEN) {
        for (var i =
                0; i < sheet_original.cssRules.length; i++) {
            var rule_original =
                sheet_original.cssRules[i];
            var insert_at =
                sheet2.cssRules.length;
            var css =
                rule_original.cssText;
            var css_parts =
                css.split(liODiODll);
            var hover =
                (css_parts[0].indexOf(licDiCDll) != -1 || css_parts[0].indexOf(lICGicOIl) != -1);
            css_parts[1] =
                css_parts[1].split(liCOlcOll);
            var props =
                css_parts[1][0].split(lIcDlcGil);
            for (var p =
                    0; p < props.length; p++) {
                var parts =
                    props[p].split(licDiCOIl);
                if (parts.length === 2) {
                    parts[0] =
                        parts[0].split(lIODicDll).join(llCGlcl).split(llcOICGll).join(llCGlcl).trim();
                    parts[1] =
                        parts[1].split(lIODicDll).join(llCGlcl).split(llcOICGll).join(llCGlcl).trim();
                    if (parts[1].indexOf(lIcGlCOil) != -1) {
                        var value =
                            parts[1];
                        var border =
                            (parts[0].indexOf(liCOiOGil) != -1);
                        var pos_open =
                            value.indexOf(llCGicOil);
                        var pos_close =
                            value.indexOf(liOGIOl);
                        var numbers_str =
                            value.substring(pos_open + 1, pos_close);
                        var numbers_arr =
                            numbers_str.split(licOiCGil);
                        var sum =
                            0;
                        for (var n =
                                0; n < 3; n++) sum +=
                            parseFloat(numbers_arr[n]);
                        sum /= 3;
                        sum /= 255;
                        sum =
                            Math.pow(sum, 1.5);
                        sum *= 200;
                        if (hover && border) {
                            sum =
                                (255 + sum) / 2;
                            numbers_arr[0] =
                                Math.floor(sum * 1);
                            numbers_arr[1] =
                                Math.floor(sum * 0.8);
                            numbers_arr[2] =
                                Math.floor(sum * 0.4);
                        } else
                            for (var n =
                                    0; n < 3; n++) numbers_arr[n] =
                                Math.floor(sum);
                        value =
                            value.substring(0, pos_open + 1) + numbers_arr.join(licOiCGil) + value.substr(pos_close);
                        parts[1] =
                            value;
                    }
                }
                props[p] =
                    parts.join(licDiCOIl);
            }
            css_parts[1][0] =
                props.join(lIcDlcGil);
            css_parts[1] =
                css_parts[1].join(liCOlcOll);
            css =
                css_parts.join(liODiODll);
            sheet2.insertRule(css, insert_at);
        }
        sheet2.insertRule(liOGiCDll);
        sheet2.insertRule(llOGiOOll);
        sheet2.insertRule(llCGiOGll);
    }
    for (var i =
            1; i < document.styleSheets.length - 1; i++) document.styleSheets[i].disabled =
        true;
    document.adoptedStyleSheets = [sheet2];
    SaveBrowserSettings();
}
var THEME_BLUE =
    0;
var THEME_DARK =
    1;
var THEME_PURPLE =
    2;
var THEME_GREEN =
    3;
var GRID_ALPHA =
    1;
var GRID_SNAPPING =
    10;
var SHOW_CONNECTIONS =
    true;
var ADVANCED_LAYERS =
    false;
var THEME =
    THEME_BLUE;
var SHOW_TEXTURES =
    false;
ctx.imageSmoothingEnabled =
    true;
var storage_error_once =
    true;
try {
    if (localStorage.getItem(liCOlcDIl) !== null) GRID_ALPHA =
        parseFloat(localStorage.getItem(liCOlcDIl));
    if (localStorage.getItem(lIcOlODIl) !== null) GRID_SNAPPING =
        parseFloat(localStorage.getItem(lIcOlODIl));
    if (localStorage.getItem(liOGlCDil) !== null) SHOW_CONNECTIONS =
        (localStorage.getItem(liOGlCDil) === licGICl);
    if (localStorage.getItem(llcGIcDil) !== null) ADVANCED_LAYERS =
        (localStorage.getItem(llcGIcDil) === licGICl);
    if (localStorage.getItem(licOicGIl) !== null) THEME =
        parseFloat(localStorage.getItem(licOicGIl));
    if (localStorage.getItem(liOGlCOIl) !== null) SHOW_TEXTURES =
        (localStorage.getItem(liOGlCOIl) === licGICl);
    if (localStorage.getItem(lIOOlOGll) !== null) ctx.imageSmoothingEnabled =
        (localStorage.getItem(lIOOlOGll) === licGICl);
} catch (e) {
    if (storage_error_once) storage_error_once =
        false;
    NewNote(liOOlCGll, note_bad);
}
ThemeSet(THEME);

function
SaveBrowserSettings() {
    try {
        localStorage.setItem(liCOlcDIl, GRID_ALPHA);
        localStorage.setItem(lIcOlODIl, GRID_SNAPPING);
        localStorage.setItem(liOGlCDil, SHOW_CONNECTIONS);
        localStorage.setItem(llcGIcDil, ADVANCED_LAYERS);
        localStorage.setItem(licOicGIl, THEME);
        localStorage.setItem(liOGlCOIl, SHOW_TEXTURES);
        localStorage.setItem(lIOOlOGll, ctx.imageSmoothingEnabled);
    } catch (e) {
        if (storage_error_once) storage_error_once =
            false;
        else return;
        NewNote(liCOlCGil, note_bad);
    }
}

function
UpdateTools() {
    var str = llCGlcGll;
    str += liCOlcGll;
    for (var i = 0; i < possible_tools.length; i++) {
        if (possible_tools[i] == active_tool) str +=
            llCGlCOll + possible_tools_descr[i] + llcOlcGIl + lrpc(possible_tools[i]) + licOICOIl;
        else str +=
            lIOGlCDll + possible_tools_descr[i] + lICOIcDil + i + liCOiCOil + lrpc(possible_tools[i]) + licOICOIl;
        if (i % 2 == 1) str += llCDicDIl;
    }
    str += lIcGlOGll;
    str += liCOlcGll;
    if (ADVANCED_LAYERS) str +=
        licDlcGIl;
    else str +=
        licDIODIl;
    var seltot = 0;
    for (var i = 0; i < known_class.length; i++) {
        if (lacl[i]) seltot++;
        if (ADVANCED_LAYERS) str +=
            liODicGIl + (lacl[i] ? '2' : lIcDICl) + llcDiODIl + i + liCDIcDll + name_layers[i] + lIcOICDll;
    }
    str +=
        liODicGIl + (seltot == known_class.length ? '2' : lIcDICl) + llCDIcOll;
    str +=
        liODicGIl + (seltot == 0 ? '2' : lIcDICl) + lIOGIcOil;
    if (!ADVANCED_LAYERS) {
        str +=
            liODicGIl + (last_clicked_layer == -3 ? '2' : lIcDICl) + licOIODIl;
        str +=
            liODicGIl + (last_clicked_layer == -4 ? '2' : lIcDICl) + lIcGlCGIl;
        str +=
            liODicGIl + (last_clicked_layer == -5 ? '2' : lIcDICl) + liCOlcOIl;
    }
    str += lIcDlODll;
    str += liCOlcGll;
    str += liODicGIl + (GRID_ALPHA == 0 ? '2' : lIcDICl) + llOGICOIl;
    str += liODicGIl + (GRID_ALPHA == 0.5 ? '2' : lIcDICl) + llCOlcDIl;
    str += liODicGIl + (GRID_ALPHA == 1 ? '2' : lIcDICl) + licGlCOll;
    str += liCOiOGll;
    str += liCOlcGll;
    str += liODicGIl + (GRID_SNAPPING == 10 ? '2' : lIcDICl) + llOGIcOll;
    str += liODicGIl + (GRID_SNAPPING == 50 ? '2' : lIcDICl) + llODiOGll;
    str += liODicGIl + (GRID_SNAPPING == 100 ? '2' : lIcDICl) + liOGICGil;
    str += lIcGiCGll;
    str += liCOlcGll;
    str += liODicGIl + (SHOW_CONNECTIONS == false ? '2' : lIcDICl) + llODICDll;
    str += liODicGIl + (SHOW_CONNECTIONS == true ? '2' : lIcDICl) + licOiOGil;
    str += licOlOGIl;
    str += liCOlcGll;
    str += liODicGIl + (THEME == THEME_BLUE ? '2' : lIcDICl) + llCDIcOIl;
    str += liODicGIl + (THEME == THEME_DARK ? '2' : lIcDICl) + lICGiCGil;
    str += liODicGIl + (THEME == THEME_PURPLE ? '2' : lIcDICl) + llCDlODll;
    str += liODicGIl + (THEME == THEME_GREEN ? '2' : lIcDICl) + llcGiOOil;
    str += lIcDlOOIl;
    str += liCOlcGll;
    str += liODicGIl + (SHOW_TEXTURES == false ? '2' : lIcDICl) + licGIOOIl;
    str += liODicGIl + (SHOW_TEXTURES == true ? '2' : lIcDICl) + llCGlOGll;
    str += llcGIcOIl;
    str += liCOlcGll;
    str += liODicGIl + (ctx.imageSmoothingEnabled == false ? '2' : lIcDICl) + lIOOlcGil;
    str += liODicGIl + (ctx.imageSmoothingEnabled == true ? '2' : lIcDICl) + llCOlCGll;
    tools_box.innerHTML =
        str;
}

function
SetActiveTool(val) {
    if (possible_tools[val] == llcOicGll) {
        DoWorldScale();
    } else {
        active_tool =
            possible_tools[val];
        need_redraw = true;
        UpdateTools();
    }
}
SetActiveTool(0);

function
DoWorldScale() {
    var newscale =
        prompt(liCOlOOIl, 100);
    if (newscale == null || newscale == 100) {} else {
        var factor =
            Math.floor(newscale) / 100; {
            var roundwell =
                true;
            lcz();
            for (i = 0; i < es.length; i++)
                if (es[i].exists)
                    if (es[i].selected)
                        if (MatchLayer(es[i])) {
                            if (es[i].pm.w != undefined) {
                                ldn(licGiCDil + i + llCOicDll + i + llOGIcOil + factor + liOOICOIl);
                                lnd(licGiCDil + i + lIODicGIl + es[i].pm.w + lIcDlcGil);
                                if (es[i].pm.w * factor != Math.round(es[i].pm.w * factor / 10) * 10) roundwell =
                                    false;
                            }
                            if (es[i].pm.h != undefined) {
                                ldn(licGiCDil + i + liOGIOGll + i + llcGicGIl + factor + liOOICOIl);
                                lnd(licGiCDil + i + lICGICDil + es[i].pm.h + lIcDlcGil);
                                if (es[i].pm.h * factor != Math.round(es[i].pm.h * factor / 10) * 10) roundwell =
                                    false;
                            }
                            if (es[i].pm.x != undefined) {
                                ldn(licGiCDil + i + lIOOIcOll + i + llCDIODll + factor + liOOICOIl);
                                lnd(licGiCDil + i + licDIcGll + es[i].pm.x + lIcDlcGil);
                                if (es[i].pm.x * factor != Math.round(es[i].pm.x * factor / 10) * 10) roundwell =
                                    false;
                            }
                            if (es[i].pm.y != undefined) {
                                ldn(licGiCDil + i + lIcOIcOil + i + llOOlCDIl + factor + liOOICOIl);
                                lnd(licGiCDil + i + llcDiCDil + es[i].pm.y + lIcDlcGil);
                                if (es[i].pm.y * factor != Math.round(es[i].pm.y * factor / 10) * 10) roundwell =
                                    false;
                            }
                        } lfz(true);
            NewNote(lICGicGil + factor + llODlOOIl + newscale + lICGiCDil, note_passive);
            if (!roundwell) NewNote(licDiOGll, note_neutral);
            need_redraw = true;
            UpdateTools();
        }
    }
}
var lsc = -1;

function
selclick(e, instance) {
    e =
        e || window.event;
    if ((e.keyCode || e.which) == 1) {
        if (ctrl || alt) {
            if (ctrl) es[instance].selected =
                true;
            else if (alt) es[instance].selected =
                false;
        } else {
            if (k_shift) {
                var from_s =
                    Math.min(instance, lsc);
                var to_s =
                    Math.max(instance, lsc);
                for (var i = 0; i < es.length; i++) {
                    if (i >= from_s && i <= to_s) {
                        es[i].selected =
                            true;
                    } else {
                        es[i].selected =
                            false;
                    }
                }
            } else {
                for (var i = 0; i < es.length; i++) {
                    es[i].selected =
                        false;
                }
                es[instance].selected =
                    true;
            }
        }
        need_GUIParams_update = true;
        need_redraw = true;
        if (!k_shift) lsc = instance;
    }
}
var ObjectBox_visible = false;
ShowHideObjectBox();

function
ShowHideObjectBox() {
    ObjectBox_visible = !ObjectBox_visible;
    if (ObjectBox_visible) {
        objboxhider.innerHTML =
            lICDlcDil;
        gui_objbox.style.display = lIcDICl;
        UpdateGUIObjectsList();
    } else {
        objboxhider.innerHTML =
            llcDlcOil;
        gui_objbox.style.display = lIcOicGll;
    }
}
left_panel.style.WebkitTransition =
    liCGicOIl;
right_panel.style.WebkitTransition =
    llOOIOOll;
top_panel.style.WebkitTransition =
    liCOIODll;
var opacities_active =
    true;

function
UpdateOpacities() {
    if (expert_view) {
        if (mouse_x < 120 || mouse_x > lsu - 120 || mouse_y < 90) {
            left_panel.style.left =
                lIcOlODll;
            right_panel.style.right =
                lIcOlODll;
            top_panel.style.top =
                lIcOlODll;
            left_panel.style.top =
                licOiOGll;
            right_panel.style.top =
                licOiOGll;
        } else {
            left_panel.style.left =
                llOOIcGIl;
            right_panel.style.right =
                llOOiCGll;
            top_panel.style.top =
                llOOlOOIl;
            left_panel.style.top =
                lIcOlODll;
            right_panel.style.top =
                lIcOlODll;
        }
        opacities_active = true;
    } else {
        if (opacities_active) {
            opacities_active =
                false;
            left_panel.style.left =
                lIcOlODll;
            right_panel.style.right =
                lIcOlODll;
            top_panel.style.top =
                lIcOlODll;
            left_panel.style.top =
                licOiOGll;
            right_panel.style.top =
                licOiOGll;
        }
    }
}
UpdateOpacities();
var gaov =
    document.getElementById(llcOicOIl);
var OVERLAY_BLOCK = false;

function
checkWebKit() {
    var result =
        /AppleWebKit\/([\d.]+)/.exec(navigator.userAgent);
    if (result) {
        return parseFloat(result[1]);
    }
    return null;
}
var context_menu =
    true;
if (document.addEventListener) {
    document.addEventListener(llcOlcOll, function(e) {
        if (!context_menu) e.preventDefault();
    }, false);
} else {
    document.attachEvent(liOOIODil, function() {
        window.event.returnValue =
            false;
    });
}

function
ThrowError(text) {
    alert(text);
}
window.onresize =
    resize;

function
resize() {
    _lsu =
        window.innerWidth;
    _lsv =
        window.innerHeight;
    ctx.canvas.width =
        _lsu;
    ctx.canvas.height =
        _lsv;
    lsu =
        _lsu;
    lsv =
        _lsv;
    zoom_validate();
    need_redraw = true;
}
ResetView();
resize();
canv.onselectstart =
    function() {
        return false;
    };
var canvas_focus = false;
var mapid_field =
    document.getElementById(lIcOicOIl);
var maprights =
    document.getElementById(licDlcOil);
var isOSX =
    (navigator.appVersion.indexOf(lIODicDIl) != -1);
var knownmaps = new Array();
var mapid = lIcDICl;
var source_lost =
    false;
var quick_pick_hit_scale =
    1;
document.onmousedown = function() {
    context_menu =
        true;
};

function
SetUpMouseControls() {
    quick_pick_hit_scale =
        1;
    canv.onmousemove = function(e) {
        canvas_focus = true;
        m_move(e);
        return false;
    };
    canv.onmousedown = function(e) {
        canvas_focus = true;
        m_down(e);
        return false;
    };
    canv.onmouseup = function(e) {
        m_up(e);
        return false;
    };
    canv.onmouseout = function(e) {
        canvas_focus = false;
        m_failed(e)
    };
    canv.onmouseover = function(e) {
        canvas_focus = true;
    };
    canv.onblur = function(e) {
        canv_blur();
        return false;
    };
    canv.mousewheel = function(e) {
        m_wheel(event);
        return false;
    };
    document.getElementById(lIOGiCDil).style.display =
        lIcOicGll;
}
SetUpMouseControls();
canv.ontouchstart =
    function() {
        SetUpTouchControls();
    };
var drag_toggle =
    false;

function
SetUpTouchControls() {
    {
        quick_pick_hit_scale *= 3;
        note_place.style.bottom =
            licOlCOIl;
        var old_onmousedown =
            canv.onmousedown;
        var old_onmousemove =
            canv.onmousemove;
        var old_onmouseup =
            canv.onmouseup;
        canv.onmousedown =
            null;
        canv.onmousemove =
            null;
        canv.onmouseup =
            null;
        var ongoingTouches =
            new Array();

        function
        copyTouch(touch, which = -1) {
            if (which === -1) which =
                touch.which;
            return {
                identifier: touch.identifier,
                pageX: touch.pageX,
                pageY: touch.pageY,
                which: which
            };
        }

        function
        ongoingTouchIndexById(idToFind) {
            for (var i =
                    0; i < ongoingTouches.length; i++) {
                var id =
                    ongoingTouches[i].identifier;
                if (id == idToFind) {
                    return i;
                }
            }
            return -1;
        }
        canv.ontouchstart =
            function(e) {
                var touches =
                    e.changedTouches;
                for (var i =
                        0; i < touches.length; i++) {
                    if (ongoingTouches.length > 0) return;
                    var which =
                        drag_toggle ? 2 : 1;
                    var t =
                        copyTouch(touches[i], which);
                    ongoingTouches.push(t);
                    old_onmousedown({
                        which: t.which,
                        pageX: t.pageX,
                        pageY: t.pageY
                    });
                }
            };
        canv.ontouchmove =
            function(e) {
                var touches =
                    e.changedTouches;
                for (var i =
                        0; i < touches.length; i++) {
                    var idx =
                        ongoingTouchIndexById(touches[i].identifier);
                    if (idx >= 0) {
                        var t =
                            ongoingTouches[idx];
                        old_onmousemove({
                            pageX: t.pageX,
                            pageY: t.pageY
                        });
                        ongoingTouches.splice(idx, 1, copyTouch(touches[i], t.which));
                    }
                }
            };
        canv.ontouchend =
            canv.touchcancel =
            function(e) {
                var touches =
                    e.changedTouches;
                for (var i =
                        0; i < touches.length; i++) {
                    var idx =
                        ongoingTouchIndexById(touches[i].identifier);
                    if (idx >= 0) {
                        var t =
                            ongoingTouches[idx];
                        old_onmouseup({
                            which: t.which,
                            pageX: t.pageX,
                            pageY: t.pageY
                        });
                        ongoingTouches.splice(idx, 1);
                    }
                }
            };
        document.getElementById(lIOGiCDil).style.display =
            lIcDICl;
    }
}
window.addEventListener(liCDlCOil, k_down, true);
window.addEventListener(lIcOlOGIl, k_up, true);
window.onbeforeunload =
    confirmExit;

function
confirmExit() {
    if (changes_made) return lIcOlCDil;
    return null;
}
var need_redraw = true;
var need_GUIParams_update = true;
var timer_panic =
    0;
var speed_x = 0;
var speed_y = 0;

function
ani() {
    var start = +new Date();
    if (speed_x != 0) {
        var speed_power =
            zoom * 10 * (k_shift ? 5 : 1);
        dis_from_x +=
            speed_x * speed_power;
        dis_to_x +=
            speed_x * speed_power;
        zoom_validate();
        need_redraw = true;
        lmwa =
            s2w_x(mouse_x);
        lmwb =
            s2w_y(mouse_y);
        lmd = false;
        m_move();
    }
    if (speed_y != 0) {
        var speed_power =
            zoom * 10 * (k_shift ? 5 : 1);
        dis_from_y +=
            speed_y * speed_power;
        dis_to_y +=
            speed_y * speed_power;
        zoom_validate();
        need_redraw = true;
        lmwa =
            s2w_x(mouse_x);
        lmwb =
            s2w_y(mouse_y);
        lmd = false;
        m_move();
    }
    if (need_redraw) {
        need_redraw = false;
        Render();
    }
    if (need_GUIParams_update) {
        need_GUIParams_update = false;
        UpdateGUIParams();
        UpdateGUIObjectsList();
    }
    var end = +new Date();
    var diff =
        end - start;
    timer_panic =
        (timer_panic + diff) * 0.7;
    if (false)
        if (timer_panic > 100) {
            if (ENABLE_SHADOWS) {
                ENABLE_SHADOWS =
                    false;
                timer_panic = 0;
            } else if (ENABLE_TEXT) {
                ENABLE_TEXT =
                    false;
                timer_panic = 0;
            }
        } setTimeout(ani, 10);
}
setTimeout(ani, 50);
var last_save_time =
    getTimer();
Render();

function
die(msg) {
    document.getElementById(liODIcGil).innerHTML =
        lIcDIcOil + msg + licDlCGll;
}

function
LoadThisMap() {
    last_save_time =
        getTimer();
    ServerRequest(lIOGicDll + mapid + licGlOGll, lIcOIOl);
}

function
get(name) {
    if (name = (new RegExp(liOGlOOll + encodeURIComponent(name) + lICDlOGil)).exec(location.search)) return decodeURIComponent(name[1]);
}

function
compi_obj(i) {
    var loco_2 =
        lIcDICl;
    loco_2 +=
        lIOOIOOIl + es[i]._class;
    for (var p in es[i].pm) {
        var pars =
            es[i].pm[p];
        if (es[i]._class == lIcOIcl) {
            if (p == llCDlOl)
                if (pars == lIcDICl) continue;
            if (p == liOGIcl)
                if (pars == '-1' || pars == lIcDICl) continue;
            if (p == licGicl || p == lIOGiODl)
                if (pars == '0' || pars == lIcDICl) continue;
            if (p == liOGICDl) {
                if (pars === '0' || pars === lIcDICl || pars === licOlcGl || pars === false || pars === 0 || pars === undefined) continue;
            }
            if (p == liOOICDl) {
                if (pars == licGICl || pars === lIcDICl || pars == true) continue;
            }
        }
        if (es[i]._class == lICGIcl) {
            if (p == liCOlOl)
                if (pars === lIcDICl || pars == '1' || pars == true) continue;
        }
        if (es[i]._class == lIcGll || es[i]._class == liOOlOl || es[i]._class == lICGicl) {
            if (p == licOiOl)
                if (pars == '-1' || pars == lIcDICl) continue;
        }
        if (es[i]._class == lIcGll) {
            if (p == licGicl || p == lIOGiODl)
                if (pars == '0' || pars == lIcDICl) continue;
            if (p == liOGICDl) {
                if (pars === '0' || pars === lIcDICl || pars === licOlcGl || pars === false || pars === 0 || pars === undefined) continue;
            }
        }
        if (p == liCDiODl || p == llCOICGl)
            if (pars == 1) continue;
        if (p == liOOlCGl)
            if (pars == 0) continue;
        if (typeof pars == lIcGIOl) pars =
            es[i].pm[p].split(licOICOll).join(lIODICDll);
        loco_2 +=
            llCGlcl + p + lICDlcDIl + pars + licOICOll;
    }
    loco_2 +=
        liOOiOGIl;
    return loco_2;
}

function
lcc_(_class) {
    var loco_ =
        lIcDICl;
    if (_class == lIOOl) {
        var teams =
            new Array();
        var teams_of =
            new Array();
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._class == _class) {
                    teams[es[i].pm.team] =
                        new Array();
                    teams_of[es[i].pm.team] =
                        0;
                } for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._class == _class) {
                    teams[es[i].pm.team].push(i);
                } var ok =
            true;
        while (ok) {
            ok = false;
            for (team in teams) {
                if (teams_of[team] != -1) {
                    ok =
                        true;
                    loco_ +=
                        compi_obj(teams[team][teams_of[team]]);
                    teams_of[team] +=
                        1;
                    if (teams_of[team] >= teams[team].length) teams_of[team] = -1;
                }
            }
        }
    } else {
        for (var i = 0; i < es.length; i++)
            if (es[i].exists)
                if (es[i]._class == _class) {
                    loco_ +=
                        compi_obj(i);
                }
    }
    return loco_;
}
var last_awaiting_images =
    lIcDICl;

function
PrepareCustomImages() {
    last_awaiting_images =
        lIcDICl;
    var ret =
        true;
    var available_images = [];
    var final_images = [];
    var avail_ptr =
        0;

    function
    UseNextOrNew() {
        if (avail_ptr < available_images.length) {
            final_images[final_images.length] =
                available_images[avail_ptr++];
            return final_images[final_images.length - 1];
        }
        final_images[final_images.length] =
            new E(lIOOIl);
        es.push(final_images[final_images.length - 1]);
        return final_images[final_images.length - 1];
    }
    var visite_values = {};

    function
    ConsiderValue(v) {
        v =
            v + lIcDICl;
        if (v.length >= 2)
            if (v.charAt(0) == llCDlOl) {
                var num =
                    parseInt(v.substr(1));
                if (!isNaN(num)) {
                    if (visite_values[num] === undefined) {
                        visite_values[num] =
                            true;
                        var e =
                            UseNextOrNew();
                        e.pm.id =
                            num;
                        e.exists =
                            true;
                        if (e.pm.x) delete e.pm.x;
                        if (e.pm.y) delete e.pm.y;
                        if (CACHED_BGS[llCDlOl + num] != undefined && CACHED_BGS[llCDlOl + num].loaded) {
                            e.pm.width =
                                CACHED_BGS[llCDlOl + num].width;
                            e.pm.height =
                                CACHED_BGS[llCDlOl + num].height;
                        } else {
                            ServerRequest(llOGIOOl + llCOlcl + lIODiCOl + llCDlOl + num, lIcOiOOl);
                            if (CACHED_BGS[llCDlOl + num] != undefined) {
                                ret =
                                    false;
                                if (last_awaiting_images.length != 0) last_awaiting_images +=
                                    licOiCGil;
                                last_awaiting_images +=
                                    llCDlOl + num;
                            }
                        }
                    }
                }
            }
    }
    for (var i =
            0; i < es.length; i++)
        if (es[i]._class == lIOOIl) {
            available_images.push(es[i]);
            es[i].exists =
                false;
        } for (var i =
            0; i < es.length; i++)
        if (es[i].exists) {
            if (es[i]._class == lIcOIcl) {
                ConsiderValue(es[i].pm.m);
            }
            if (es[i]._class == lIcGll) {
                ConsiderValue(es[i].pm.model);
            }
            if (es[i]._class == lICDll) {
                for (var t =
                        1; es[i].pm[lIOGicOl + t + lIOGiCOl] !== undefined; t++) {
                    var trigger_type_id =
                        es[i].pm[lIOGicOl + t + lIOGiCOl];
                    if (mark_pairs[liOGicDl + trigger_type_id] == llODIcl) ConsiderValue(es[i].pm[lIOGicOl + t + lIOGiCGl]);
                    if (mark_pairs[licGIODl + trigger_type_id] == llODIcl) ConsiderValue(es[i].pm[lIOGicOl + t + lICGlcOl]);
                }
            }
        } UpdateGUIObjectsList();
    return ret;
}

function
SaveThisMap(temp_to_real_compile_data = lIcDICl, callback = null) {
    if (mapid != lIcDICl) {
        if (!PrepareCustomImages()) {
            NewNote(llcDiCGIl + last_awaiting_images + llODicGll, note_neutral);
            setTimeout(function() {
                SaveThisMap(temp_to_real_compile_data, callback);
            }, 1000);
            return;
        }
        var compiled =
            lIcDICl;
        if (temp_to_real_compile_data == lIcDICl) {
            for (var i = 0; i < known_class_savepriorities.length; i++) compiled +=
                lcc_(known_class_savepriorities[i]);
            if (compiled == lIcDICl) compiled =
                llcOlcOIl;
            try {
                localStorage.setItem(lIcOlcOIl + mapid + lIcOICDil + (new Date().getTime()), compiled);
            } catch (e) {
                NewNote(lIcOlcOll, note_bad);
            }
        } else compiled =
            temp_to_real_compile_data;
        last_save_time =
            getTimer();
        ServerRequest(lIOGicDll + mapid + liOGlcDll + llCOlOGIl + encodeURIComponent(compiled), llcDlCl, callback);
    } else {
        SaveThisMapAs();
    }
}
var mrdimlights =
    document.getElementById(llCDiCOIl);
var mrsave =
    document.getElementById(liCGICOil);
var mrcustom_image =
    document.getElementById(licDlCDil);
var image_list =
    document.getElementById(liOGIcDIl);
var ignore_keys = false;
var dim_undo = lIcDICl;
var dim_enter_event = lIcDICl;

function
SaveThisMapAs() {
    mrdimlights.style.display =
        llCOIcOIl;
    mrsave.style.display =
        llCOIcOIl;
    document.getElementById(liCGiCGil).focus();
    document.getElementById(liCGiCGil).value =
        mapid;
    dim_enter_event =
        lICDlOOIl;
    ignore_keys = true;
    PutMapsList(liOOICOll, liCGiCGil, lICDlOOIl, llcDlCl);
    dim_undo =
        llcOlcDIl;
}

function
mrSave() {
    if (knownmaps.indexOf(document.getElementById(liCGiCGil).value) == -1 || confirm(licGIOGll + document.getElementById(liCGiCGil).value + llcOlCOll) == true) {
        mapid =
            document.getElementById(liCGiCGil).value;
        SaveThisMap();
        CancelDim();
    }
}
var browse_images_callback =
    null;
var last_for_class =
    licDiCOll;
var last_current_value =
    licDiCOll;
var search_phrase =
    lIcDICl;

function
UpdateImageList() {
    ServerRequest(llOGIOOl + last_for_class + licGIcGil + last_current_value + lIOGlcDll + search_phrase, llCGlOOIl);
}

function
BrowseImages(for_class = llCOlcl, current_value = lIcDICl, callback = null) {
    awaiting_image_paste =
        true;
    mrdimlights.style.display =
        llCOIcOIl;
    mrcustom_image.style.display =
        llCOIcOIl;
    dim_enter_event =
        lIcDICl;
    ignore_keys = true;
    image_list.innerHTML =
        lIcDICl;
    setTimeout(function() {
        last_for_class =
            for_class;
        last_current_value =
            current_value;
        ServerRequest(llOGIOOl + for_class + licGIcGil + current_value + lIOGlcDll + search_phrase, llCGlOOIl);
    }, 1);
    dim_undo =
        lIcDlcDll;
    browse_images_callback =
        callback;
}

function
CustomImageSelected(new_value, new_value_title) {
    browse_images_callback(new_value, new_value_title);
    CancelDim();
}

function
retrieveImageFromClipboardAsBase64(pasteEvent, callback, imageFormat) {
    if (pasteEvent.clipboardData == false) {
        if (typeof(callback) == lIcOICGil) {
            callback(undefined);
        }
    };
    var items =
        pasteEvent.clipboardData.items;
    if (items == undefined) {
        if (typeof(callback) == lIcOICGil) {
            callback(undefined);
        }
    };
    var nothing =
        true;
    for (var i =
            0; i < items.length; i++) {
        if (items[i].type.indexOf(lIOOIl) == -1) {
            continue;
        }
        nothing =
            false;
        var blob =
            items[i].getAsFile();
        var mycanvas =
            document.createElement(liOOicGll);
        var ctx =
            mycanvas.getContext(lIl);
        var img =
            new Image();
        img.onload =
            function() {
                mycanvas.width =
                    this.width;
                mycanvas.height =
                    this.height;
                ctx.drawImage(img, 0, 0);
                if (typeof(callback) == lIcOICGil) {
                    callback(mycanvas.toDataURL((imageFormat || liODICGll)));
                }
            };
        var URLObj =
            window.URL || window.webkitURL;
        img.src =
            URLObj.createObjectURL(blob);
    }
    if (nothing) {
        if (items.length == 0) NewNote(llCOlCGIl, note_passive);
        else NewNote(lIOOICOIl, note_passive);
    }
}
var imageLoader =
    document.getElementById(llODIcOll);
imageLoader.addEventListener(llcDlOOIl, handleImage, false);
var canvas_img =
    document.getElementById(llcGiCGll);
var ctx_img =
    canvas_img.getContext(lIl);

function
handleImage(e) {
    var reader =
        new FileReader();
    reader.onload =
        function(event) {
            var img =
                new Image();
            img.onload =
                function() {
                    canvas_img.width =
                        img.width;
                    canvas_img.height =
                        img.height;
                    ctx_img.drawImage(img, 0, 0);
                    var imageDataBase64 =
                        canvas_img.toDataURL(liODICGll);
                    ServerRequest(llOGIOOl + llCOlcl + liCOIOOil + imageDataBase64, licOlCDil);
                };
            img.src =
                event.target.result;
        };
    reader.readAsDataURL(e.target.files[0]);
}
window.addEventListener(liODlCGil, function(e) {
    if (mrcustom_image.style.display == llCOIcOIl) {
        retrieveImageFromClipboardAsBase64(e, function(imageDataBase64) {
            if (imageDataBase64) {
                ServerRequest(llOGIOOl + llCOlcl + liCOIOOil + imageDataBase64, licOlCDil);
            } else alert(llOOicDll);
        });
    }
}, false);

function
CancelDim() {
    eval(dim_undo);
    mrdimlights.style.display =
        lIcOicGll;
    ignore_keys =
        false;
}

function
UpdateMapsList() {
    ServerRequest(llcOIODIl, liODiOGIl);
}

function
getTimer() {
    return new Date().getTime();
}
var max_temp_maps =
    64;
UpdateMapsList();
var last_dbl = 0;
var last_id = -1;

function
PutMapsList(where, fieldobj, proceed_fnct, uniq) {
    var meta = lIcDICl;
    for (el in knownmaps) {
        meta +=
            llOGICGll + el + llCGiOl + uniq + liCGICOIl + (mapid == knownmaps[el] ? '1' : '0') + lICGicOll + where + llODICGll + fieldobj + llODICGll + proceed_fnct + llODICGll + uniq + llCGICOll + el + llCGiOl + uniq + liCDlCOIl + fieldobj + llCDiODil + knownmaps[el] + lIOGlOOIl + fieldobj + lIODlcGIl + el + llCDlCOil + proceed_fnct + lIOOlCGIl + el + liOGiODil + knownmaps[el];
        meta +=
            lIODlODll;
    }
    el =
        knownmaps.length;
    try {
        var temp_maps =
            0;
        for (var i =
                0, len =
                localStorage.length; i < len; ++i) {
            var storage_key =
                localStorage.key(i);
            if (storage_key.substring(0, lIcOlcOIl.length) == lIcOlcOIl) {
                var key_parts =
                    storage_key.substr(lIcOlcOIl.length);
                key_parts =
                    key_parts.split(lIcOICDil);
                var iterated_map_id =
                    llCOICOll + i + licDiCOIl + key_parts[0];
                var map_id_pure =
                    key_parts[0];
                var edit_time =
                    key_parts[1];
                var date =
                    new Date();
                date.setTime(edit_time);
                if (temp_maps == 0) {
                    meta +=
                        lICOlODil + max_temp_maps + liCOicGIl;
                }

                function
                LeadZero(v) {
                    if (v < 10) return '0' + v;
                    return v;
                }
                var monthNames = [lICGIcDll, licGiOGIl, licGiCOIl, liCDlCDll, lICGICOIl, llCDiCDil, llODlCDIl, llCDIcGll, lIcDlCGIl, llCGIOOll, lICGiOOIl, liCGlODil];
                meta +=
                    llOGICGll + el + llCGiOl + uniq + licDlCOil + (mapid == iterated_map_id ? '1' : '0') + lICGicOll + where + llODICGll + fieldobj + llODICGll + proceed_fnct + llODICGll + uniq + llCGICOll + el + llCGiOl + uniq + liCDlCOIl + fieldobj + llCDiODil + iterated_map_id + lIOGlOOIl + fieldobj + lIODlcGIl + el + llCDlCOil + proceed_fnct + lIOOlCGIl + el + lICOiCGIl + map_id_pure + llcDiOOIl + LeadZero(date.getHours()) + licDiCOIl + LeadZero(date.getMinutes()) + licDiCOIl + LeadZero(date.getSeconds()) + licOiCGil + date.getDate() + llCGlcl + monthNames[date.getMonth()] + llCGlcl + date.getFullYear() + lIOGIcOIl;
                meta +=
                    lIODlODll;
                el++;
                temp_maps++;
            }
        }
    } catch (e) {
        NewNote(llOGiODil, note_bad);
    }
    document.getElementById(where).innerHTML =
        meta;
}

function
RemoveOldTempMaps() {
    try {
        var delete_these = [];
        for (var i =
                0, len =
                localStorage.length; i < len; ++i) {
            var storage_key =
                localStorage.key(i);
            if (storage_key.substring(0, lIcOlcOIl.length) == lIcOlcOIl) {
                var key_parts =
                    storage_key.substr(lIcOlcOIl.length);
                key_parts =
                    key_parts.split(lIcOICDil);
                var iterated_map_id =
                    llCOICOll + i + licDiCOIl + key_parts[0];
                var map_id_pure =
                    key_parts[0];
                var edit_time =
                    key_parts[1];
                delete_these.unshift({
                    key: storage_key,
                    time: Number(edit_time)
                });
            }
        }

        function
        compare(a, b) {
            if (a.time < b.time) return -1;
            if (a.time > b.time) return 1;
            return 0;
        }
        if (delete_these.length - max_temp_maps > 0) {
            delete_these.sort(compare);
            delete_these =
                delete_these.slice(0, delete_these.length - max_temp_maps);
            console.log(delete_these);
            for (var i =
                    0; i < delete_these.length; i++) {
                var storage_key =
                    delete_these[i].key;
                localStorage.removeItem(storage_key);
            }
        }
    } catch (e) {
        NewNote(llcDICDIl, note_bad);
    }
}
RemoveOldTempMaps();
var changes_made =
    false;

function
StartNewMap() {
    if (!changes_made || confirm(lIOGIODIl) == true) {
        es =
            new Array();
        mapid =
            lIcDICl;
        changes_made =
            false;
        need_redraw =
            true;
        need_GUIParams_update =
            true;
        ResetView();
        ClearUndos();
    }
}

function
RevertThisMap() {
    if (mapid == lIcDICl) {
        NewNote(lIcOIOOil, note_neutral);
    } else if (confirm(lICGlOOil) == true) {
        ServerRequest(lIOGicDll + mapid + licGlOGll, lIcOIOl);
    }
}

function
OpenMap() {
    {
        mrdimlights.style.display =
            llCOIcOIl;
        mrload.style.display =
            llCOIcOIl;
        document.getElementById(liODlODll).focus();
        dim_enter_event =
            llOOlCOll;
        ignore_keys = true;
        PutMapsList(llcOIcGll, liODlODll, llOOlCOll, lIcOIOl);
        dim_undo =
            lICOicOIl;
    }
}

function
mrLoad() {
    CancelDim();
    if (!changes_made || confirm(lIOGIODIl) == true) {
        mapid =
            document.getElementById(liODlODll).value;
        if (mapid.indexOf(llCOICOll) == 0) {
            var map_id_parts =
                mapid.split(licDiCOIl);
            var local_storage_id =
                map_id_parts[1];
            var storage_key =
                localStorage.key(local_storage_id);
            var compiled_temp_map =
                localStorage.getItem(storage_key);
            document.getElementById(liODlODll).value =
                mapid =
                curlogin + liCGicOll;
            SaveThisMap(compiled_temp_map, function() {
                mrLoad();
            });
        } else {
            ServerRequest(lIOGicDll + mapid + licGlOGll, lIcOIOl);
        }
    }
}

function
mrReloadLoad() {
    UpdateMapsList();
    PutMapsList(llcOIcGll, liODlODll, llOOlCOll, lIcOIOl);
}

function
mrReloadSave() {
    UpdateMapsList();
    PutMapsList(liOOICOll, liCGiCGil, lICDlOOIl, llcDlCl);
}

function
OpenPreferences() {
    NewNote(lIOOiODll, note_neutral);
}

function
TestMap() {
    if (!changes_made) {
        ServerRequest(lIOGicDll + mapid + liOOlOOil, llcOicOIl);
    } else NewNote(llCOiOOil, note_neutral);
}
var check_mode =
    false;

function
CheckMap() {
    NewNote(lIOGlOOil, note_neutral);
    check_mode = !check_mode;
    if (check_mode) NewNote(liODIODIl, note_passive);
    else NewNote(lIOGIOOil, note_passive);
    if (check_mode) BuildCheckTraces();
    else ClearCheckTraces();
    need_redraw =
        true;
}
var redirect_once = true;

function
RedirectTester() {
    if (redirect_once) {
        redirect_once =
            false;
        var flashMovie = getFlashMovieObject(llODlOGIl);
        flashMovie.sendTextToFlash(liOOicOil + mapid + lIOOicOil);
    }
}

function
PreviewDone() {}
window.onload =
    maxWindow;

function
maxWindow() {
    need_redraw = true;
    window.moveTo(0, 0);
    if (document.all) {
        top.window.resizeTo(screen.availWidth, screen.availHeight);
    } else if (document.layers || document.getElementById) {
        if (top.window.outerHeight < screen.availHeight || top.window.outerWidth < screen.availWidth) {
            top.window.outerHeight =
                screen.availHeight;
            top.window.outerWidth =
                screen.availWidth;
        }
    }
}

function
ClearCheckTraces() {
    waypoints =
        new Array();
    connections =
        new Array();
    box =
        new Array();
    water =
        new Array();
    pusher =
        new Array();
    player =
        new Array();
    teleport =
        new Array();
}
var waypoints =
    new Array();
var connections =
    new Array();
var box =
    new Array();
var water =
    new Array();
var pusher =
    new Array();
var player =
    new Array();
var teleport =
    new Array();
var CONNECTION_NOT_REACHABLE = 0;
var CONNECTION_WALK = 1;
var CONNECTION_JUMP = 2;
var CONNECTION_JUMP_SWORDS = 3;
var CONNECTION_JUMP_BOOST = 4;
var CONNECTION_TELEPORT = 5;
var CONNECTION_SAFEFALL = 6;
var CONNECTION_RUN_JUMP = 7;
var CONNECTION_UNSAFE_FALL = 8;

function
Dist2D(x1, y1, x2, y2) {
    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}

function
FindObject(val, search_class) {
    if (isNaN(val) && val.charAt(0) == llOOiCOIl) {
        for (var si = 0; si < es.length; si++)
            if (es[si].exists)
                if (es[si]._class == search_class) {
                    if (es[si].pm.uid == val) return si;
                }
    } else {
        var inco = 0;
        for (var si = 0; si < es.length; si++)
            if (es[si].exists)
                if (es[si]._class == search_class) {
                    if (inco == val) return si;
                    inco++;
                }
    }
    return -1;
}

function
BuildCheckTraces() {
    ClearCheckTraces();
    var step_size =
        20;
    for (var i = 0; i < es.length; i++)
        if (es[i].exists) {
            if (es[i]._class == llOOIcl || es[i]._class == liCOlCl) {
                box[box.length] = {
                    x1: es[i].pm.x,
                    y1: es[i].pm.y,
                    x2: es[i].pm.x + es[i].pm.w,
                    y2: es[i].pm.y + es[i].pm.h
                };
            } else if (es[i]._class == liOOlOl) {
                pusher[pusher.length] = {
                    x1: es[i].pm.x,
                    y1: es[i].pm.y,
                    x2: es[i].pm.x + es[i].pm.w,
                    y2: es[i].pm.y + es[i].pm.h,
                    damage: es[i].pm.damage,
                    stable: es[i].pm.stab == 0 && Dist2D(es[i].pm.tox, es[i].pm.toy, 0, 0.5) < 1
                };
            } else if (es[i]._class == lICGIcl) {
                water[water.length] = {
                    x1: es[i].pm.x,
                    y1: es[i].pm.y,
                    x2: es[i].pm.x + es[i].pm.w,
                    y2: es[i].pm.y + es[i].pm.h,
                    damage: es[i].pm.damage
                };
            } else if (es[i]._class == lIOOl) {
                player[player.length] = {
                    x: es[i].pm.x,
                    y: es[i].pm.y,
                    team: es[i].pm.team,
                    hea: es[i].pm.hea,
                    hmax: es[i].pm.hmax
                };
            } else if (es[i]._class == lICGicl) {
                if (es[i].pm.use_on != 0) {
                    var target_trigger =
                        FindObject(es[i].pm.use_target, lICDll);
                    var destination = -1;
                    if (target_trigger != -1)
                        for (var i2 = 1; i2 <= 10; i2++) {
                            if (es[target_trigger].pm[lIOGicOl + i2 + lIOGiCOl] == 30 || es[target_trigger].pm[lIOGicOl + i2 + lIOGiCOl] == 31) {
                                if (FindObject(es[target_trigger].pm[lIOGicOl + i2 + lIOGiCGl], lICGicl) == i) {
                                    destination =
                                        FindObject(es[target_trigger].pm[lIOGicOl + i2 + lICGlcOl], lICGicl);
                                    break;
                                }
                            }
                        }
                    if (destination != -1) {
                        teleport[teleport.length] = {
                            x1: es[i].pm.x,
                            y1: es[i].pm.y,
                            x2: es[i].pm.x + es[i].pm.w,
                            y2: es[i].pm.y + es[i].pm.h,
                            target_x: es[destination].pm.x + es[i].pm.w / 2,
                            target_y: es[destination].pm.y + es[i].pm.h / 2
                        };
                    }
                }
            }
        } if (box.length == 0) {
        NewNote(llCGIcDil, note_neutral);
        return;
    }
    var min_x = box[0].x1;
    var min_y = box[0].y1;
    var max_x = box[0].x2;
    var max_y = box[0].y2;
    for (var i = 1; i < box.length; i++) {
        if (box[i].x1 < min_x) min_x =
            box[i].x1;
        if (box[i].y1 < min_y) min_y =
            box[i].y1;
        if (box[i].x2 > max_x) max_x =
            box[i].x2;
        if (box[i].y2 > max_y) max_y =
            box[i].y2;
    }

    function
    TracePointAccess(x, y) {
        for (var i = box.length - 1; i >= 0; i--)
            if (x >= box[i].x1)
                if (x <= box[i].x2)
                    if (y >= box[i].y1)
                        if (y <= box[i].y2) return false;
        return true;
    }

    function
    TracePointAccessNoBorders(x, y) {
        for (var i = box.length - 1; i >= 0; i--)
            if (x > box[i].x1)
                if (x < box[i].x2)
                    if (y > box[i].y1)
                        if (y < box[i].y2) return false;
        return true;
    }

    function
    CanSpawnAt(x, y) {
        if (x > min_x + 100)
            if (x < max_x - 100)
                if (y > min_y + 100)
                    if (y < max_y - 100) {
                        if (TracePointAccess(x, y - 50))
                            if (TracePointAccess(x - 10, y - 50))
                                if (TracePointAccess(x + 10, y - 50))
                                    if (!TracePointAccess(x, y + 50))
                                        if (!TracePointAccess(x - 10, y + 50))
                                            if (!TracePointAccess(x + 10, y + 50)) {
                                                for (var i = 0; i < water.length; i++)
                                                    if (x > water[i].x1 - 100)
                                                        if (x < water[i].x2 + 100)
                                                            if (y > water[i].y1 - 100)
                                                                if (y < water[i].y2 + 100) return false;
                                                for (var i = 0; i < pusher.length; i++)
                                                    if (x > pusher[i].x1 - 100)
                                                        if (x < pusher[i].x2 + 100)
                                                            if (y > pusher[i].y1 - 100)
                                                                if (y < pusher[i].y2 + 100) return false;
                                                return true;
                                            } return false;
                    } return false;
    }

    function
    CanStandAt(x, y) {
        for (var i = 0; i < pusher.length; i++)
            if (!pusher[i].stable)
                if (x > pusher[i].x1 - 10)
                    if (x < pusher[i].x2 + 10)
                        if (y > pusher[i].y1)
                            if (y < pusher[i].y2 + 80) return false;
        if (TracePointAccess(x, y))
            for (var i = 0; i < water.length; i++)
                if (x >= water[i].x1)
                    if (x <= water[i].x2)
                        if (y >= water[i].y1)
                            if (y <= water[i].y2) return true;
        if (TracePointAccess(x, y - (step_size / 2)))
            if (!TracePointAccess(x, y + (step_size / 2))) return true;
        return false;
    }

    function
    FindPointNear(x, y) {
        var best_i = 0;
        var best_di = Dist2D(x, y, waypoints[0].x, waypoints[0].y);
        for (var i = 1; i < waypoints.length; i++) {
            var new_di =
                Dist2D(x, y, waypoints[i].x, waypoints[i].y);
            if (new_di < best_di) {
                best_i = i;
                best_di = new_di;
            }
        }
        return best_i;
    }

    function
    GetDamageAt(x, y) {
        var damage = 0;
        for (var i = 0; i < water.length; i++)
            if (x >= water[i].x1)
                if (x <= water[i].x2)
                    if (y >= water[i].y1)
                        if (y <= water[i].y2) {
                            damage =
                                water[i].damage;
                            break;
                        } for (var i = 0; i < pusher.length; i++)
            if (x >= pusher[i].x1 - 10)
                if (x <= pusher[i].x2 + 10)
                    if (y >= pusher[i].y1)
                        if (y <= pusher[i].y2 + 80) damage +=
                            pusher[i].damage;
        return damage;
    }

    function
    TraceWay(x1, y1, x2, y2, allowed_hits) {
        if (x1 == x2 && y1 == y2) return TracePointAccessNoBorders(x1, y1);
        allowed_hits =
            allowed_hits || 1;
        var traces_made =
            0;
        var start_x =
            x1;
        var start_y =
            y1;
        var speed_x =
            x2 - x1;
        var speed_y =
            y2 - y1;
        var end_x =
            x2;
        var end_y =
            y2;
        var hits = 0;
        if (Math.abs(speed_x) > Math.abs(speed_y)) {
            speed_y =
                speed_y / Math.abs(speed_x) * 5;
            speed_x =
                speed_x / Math.abs(speed_x) * 5;
        } else {
            speed_x =
                speed_x / Math.abs(speed_y) * 5;
            speed_y =
                speed_y / Math.abs(speed_y) * 5;
        }
        var ok1 = false;
        var ok2 = false;
        while (true) {
            if (TracePointAccessNoBorders(start_x, start_y)) {
                start_x +=
                    speed_x;
                start_y +=
                    speed_y;
                if (speed_x > 0) {
                    if (start_x >= end_x) ok1 = true;
                } else {
                    if (start_x <= end_x) ok1 = true;
                }
                if (speed_y > 0) {
                    if (start_y >= end_y) ok2 = true;
                } else {
                    if (start_y <= end_y) ok2 = true;
                }
                if (ok1 && ok2) {
                    return true;
                }
            } else {
                hits++;
                if (hits > allowed_hits) return false;
                start_x +=
                    speed_x;
                start_y +=
                    speed_y;
            }
            traces_made++;
            if (traces_made > 1000) {
                NewNote(lICGlCGll + traces_made + liCDIOOIl + x1 + licOiCGil + y1 + licOiCGil + x2 + licOiCGil + y2 + liCOlCDil, note_neutral);
                return false;
            }
        }
    }

    function
    GetPossibleConnection(a, b) {
        if (!TraceWay(waypoints[a].x, waypoints[a].y, waypoints[a].x, waypoints[a].y - 50)) return CONNECTION_NOT_REACHABLE;
        if (!TraceWay(waypoints[b].x, waypoints[b].y, waypoints[b].x, waypoints[b].y - 50)) return CONNECTION_NOT_REACHABLE;
        if (Math.abs(waypoints[a].x - waypoints[b].x) <= step_size)
            if (Math.abs(waypoints[a].y - waypoints[b].y) <= step_size) {
                if (TraceWay(waypoints[a].x, waypoints[a].y, waypoints[b].x, waypoints[b].y))
                    if (TraceWay(waypoints[a].x, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50)) return CONNECTION_WALK;
                var high =
                    Math.min(waypoints[a].y, waypoints[b].y);
                if ((TraceWay(waypoints[a].x, waypoints[a].y, waypoints[a].x, high) && TraceWay(waypoints[b].x, waypoints[b].y, waypoints[a].x, high)) || (TraceWay(waypoints[b].x, waypoints[b].y, waypoints[b].x, high) && TraceWay(waypoints[a].x, waypoints[a].y, waypoints[b].x, high)))
                    if (TraceWay(waypoints[a].x, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50)) return CONNECTION_WALK;
            } if (waypoints[b].y > waypoints[a].y + step_size)
            if (waypoints[b].y <= waypoints[a].y + 350)
                if (Math.abs(waypoints[a].x - waypoints[b].x) / Math.pow(Math.abs(waypoints[b].y - waypoints[a].y), 0.5) < 20) {
                    if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80))
                        if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50))
                            if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80))
                                if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50)) return CONNECTION_SAFEFALL;
                    if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                        if (TraceWay(waypoints[b].x - 10, waypoints[b].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                            if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                                if (TraceWay(waypoints[b].x + 10, waypoints[b].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50)) {
                                    if (TraceWay(waypoints[a].x + 40 - 15, waypoints[a].y, waypoints[b].x - 15, waypoints[b].y))
                                        if (TraceWay(waypoints[a].x + 40 + 15, waypoints[a].y, waypoints[b].x + 15, waypoints[b].y))
                                            if (TraceWay(waypoints[a].x + 40, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80)) return CONNECTION_SAFEFALL;
                                    if (TraceWay(waypoints[a].x - 40 - 15, waypoints[a].y, waypoints[b].x - 15, waypoints[b].y))
                                        if (TraceWay(waypoints[a].x - 40 + 15, waypoints[a].y, waypoints[b].x + 15, waypoints[b].y))
                                            if (TraceWay(waypoints[a].x - 40, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80)) return CONNECTION_SAFEFALL;
                                }
                } if (waypoints[a].y > waypoints[b].y)
            if (waypoints[a].y <= waypoints[b].y + 165 - Math.pow(waypoints[a].x - waypoints[b].x, 2) / 500) {
                if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2 - 10, waypoints[a].y - 120))
                    if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2 + 10, waypoints[a].y - 120))
                        if (TraceWay(waypoints[b].x - 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, waypoints[a].y - 120) || TraceWay(waypoints[b].x + 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, waypoints[a].y - 120)) return CONNECTION_JUMP;
            } if (waypoints[a].y >= waypoints[b].y - 70)
            if (waypoints[a].y <= waypoints[b].y + 70)
                if (Math.abs(waypoints[a].x - waypoints[b].x) <= 200) {
                    if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 80, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                        if (TraceWay(waypoints[b].x - 10, waypoints[b].y - 80, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                            if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                                if (TraceWay(waypoints[b].x - 10, waypoints[b].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                                    if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 80, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                                        if (TraceWay(waypoints[b].x + 10, waypoints[b].y - 80, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                                            if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160))
                                                if (TraceWay(waypoints[b].x + 10, waypoints[b].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 160)) return CONNECTION_RUN_JUMP;
                } if (waypoints[a].y + 100 > waypoints[b].y)
            if (waypoints[a].y <= waypoints[b].y + 200 - Math.pow(waypoints[a].x - waypoints[b].x, 2) / 500) {
                if (TraceWay(waypoints[a].x - 12, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 180))
                    if (TraceWay(waypoints[a].x + 12, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 180))
                        if (TraceWay(waypoints[b].x - 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 180) || TraceWay(waypoints[b].x + 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 180)) return CONNECTION_JUMP_SWORDS;
            } if (waypoints[a].y + 100 > waypoints[b].y)
            if (waypoints[a].y <= waypoints[b].y + 265 - Math.pow(waypoints[a].x - waypoints[b].x, 2) / 3000) {
                if (TraceWay(waypoints[a].x - 15, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 210))
                    if (TraceWay(waypoints[a].x + 15, waypoints[a].y - 50, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 210))
                        if (TraceWay(waypoints[b].x - 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 210) || TraceWay(waypoints[b].x + 20, waypoints[b].y, (waypoints[a].x + waypoints[b].x) / 2, (waypoints[a].y + waypoints[b].y) / 2 - 210)) return CONNECTION_JUMP_BOOST;
            } if (waypoints[b].y > waypoints[a].y + step_size)
            if (Math.abs(waypoints[a].x - waypoints[b].x) / Math.pow(Math.abs(waypoints[b].y - waypoints[a].y), 0.5) < 20) {
                if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80))
                    if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50))
                        if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80))
                            if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, waypoints[b].x, waypoints[b].y - 50)) return CONNECTION_UNSAFE_FALL;
                if (TraceWay(waypoints[a].x - 10, waypoints[a].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                    if (TraceWay(waypoints[b].x - 10, waypoints[b].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                        if (TraceWay(waypoints[a].x + 10, waypoints[a].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50))
                            if (TraceWay(waypoints[b].x + 10, waypoints[b].y - 50, (waypoints[b].x + waypoints[a].x) / 2, (waypoints[b].y + waypoints[a].y * 2) / 3 - 50)) {
                                if (TraceWay(waypoints[a].x + 40 - 15, waypoints[a].y, waypoints[b].x - 15, waypoints[b].y))
                                    if (TraceWay(waypoints[a].x + 40 + 15, waypoints[a].y, waypoints[b].x + 15, waypoints[b].y))
                                        if (TraceWay(waypoints[a].x + 40, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80)) return CONNECTION_UNSAFE_FALL;
                                if (TraceWay(waypoints[a].x - 40 - 15, waypoints[a].y, waypoints[b].x - 15, waypoints[b].y))
                                    if (TraceWay(waypoints[a].x - 40 + 15, waypoints[a].y, waypoints[b].x + 15, waypoints[b].y))
                                        if (TraceWay(waypoints[a].x - 40, waypoints[a].y - 80, waypoints[b].x, waypoints[b].y - 80)) return CONNECTION_UNSAFE_FALL;
                            }
            } return CONNECTION_NOT_REACHABLE;
    }
    for (var _x = min_x; _x < max_x; _x += step_size)
        for (var _y = min_y; _y < max_y; _y += step_size) {
            if (CanStandAt(_x, _y)) waypoints[waypoints.length] = {
                x: _x,
                y: _y,
                spawn_dm: CanSpawnAt(_x, _y),
                spawn_coop: false,
                spawn_coop_team: -1,
                risk_level_dm: 0,
                risk_level_coop: 0,
                damage: GetDamageAt(_x, _y)
            };
        }
    for (var i = 0; i < teleport.length; i++) {
        var _x =
            (teleport[i].x1 + teleport[i].x2) / 2;
        var _y =
            teleport[i].y2;
        waypoints[waypoints.length] = {
            x: _x,
            y: _y,
            spawn_dm: CanSpawnAt(_x, _y),
            spawn_coop: false,
            spawn_coop_team: -1,
            risk_level_dm: 0,
            risk_level_coop: 0,
            damage: GetDamageAt(_x, _y)
        };
    }
    for (var i = 0; i < player.length; i++) {
        var my_point =
            FindPointNear(player[i].x, player[i].y);
        waypoints[my_point].spawn_coop =
            true;
        if (waypoints[my_point].spawn_coop_team != player[i].team) {
            if (waypoints[my_point].spawn_coop_team == -1) waypoints[my_point].spawn_coop_team =
                player[i].team;
            else {
                NewNote(lIODlCDIl, note_neutral);
                return;
            }
        }
    }
    for (var a = 0; a < waypoints.length; a++)
        for (var b = 0; b < waypoints.length; b++)
            if (a != b) {
                var trace_res =
                    GetPossibleConnection(a, b);
                if (trace_res != CONNECTION_NOT_REACHABLE) {
                    connections[connections.length] = {
                        a: a,
                        b: b,
                        method: trace_res
                    };
                }
                if (Math.abs(waypoints[b].x - waypoints[a].x) < 1100)
                    if (Math.abs(waypoints[b].y - waypoints[a].y) < 1100) {
                        var di =
                            Dist2D(waypoints[b].x, waypoints[b].y, waypoints[a].x, waypoints[a].y);
                        if (di < 1100)
                            if (di > 200) {
                                if (TraceWay(waypoints[b].x, waypoints[b].y - 60, waypoints[a].x, waypoints[a].y - 70, 4))
                                    if (!TraceWay(waypoints[a].x, waypoints[a].y - 60, waypoints[b].x, waypoints[b].y - 70, 4)) waypoints[a].risk_level_dm +=
                                        100 / (100 + Dist2D(waypoints[b].x, waypoints[b].y, waypoints[a].x, waypoints[a].y)) * 2;
                                if (TraceWay(waypoints[b].x, waypoints[b].y - 60, waypoints[a].x, waypoints[a].y - 40, 4))
                                    if (!TraceWay(waypoints[a].x, waypoints[a].y - 60, waypoints[b].x, waypoints[b].y - 40, 4)) waypoints[a].risk_level_dm +=
                                        100 / (100 + Dist2D(waypoints[b].x, waypoints[b].y, waypoints[a].x, waypoints[a].y)) * 2;
                                if (TraceWay(waypoints[b].x, waypoints[b].y - 60, waypoints[a].x, waypoints[a].y - 20, 4))
                                    if (!TraceWay(waypoints[a].x, waypoints[a].y - 60, waypoints[b].x, waypoints[b].y - 20, 4)) waypoints[a].risk_level_dm +=
                                        100 / (100 + Dist2D(waypoints[b].x, waypoints[b].y, waypoints[a].x, waypoints[a].y)) * 2;
                            }
                    }
            } for (var i = 0; i < teleport.length; i++) {
        connections[connections.length] = {
            a: FindPointNear((teleport[i].x1 + teleport[i].x2) / 2, (teleport[i].y1 + teleport[i].y2) / 2),
            b: FindPointNear(teleport[i].target_x, teleport[i].target_y),
            method: CONNECTION_TELEPORT
        };
    }
}
window.onerror =
    function(msg, url, line) {
        if (checkWebKit() === null) alert(liCDlOGIl);
    };
